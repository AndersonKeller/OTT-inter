webpackHotUpdate("static/development/pages/index.js",{

/***/ "./pages/index.js":
/*!************************!*\
  !*** ./pages/index.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_esm_toArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toArray */ \"./node_modules/@babel/runtime/helpers/esm/toArray.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/head */ \"./node_modules/next/dist/next-server/lib/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! styled-components */ \"./node_modules/styled-components/dist/styled-components.browser.esm.js\");\n/* harmony import */ var _components_button__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../components/button */ \"./components/button.js\");\n/* harmony import */ var _components_carousel_section__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../components/carousel-section */ \"./components/carousel-section.js\");\n/* harmony import */ var _components_featured__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../components/featured */ \"./components/featured.js\");\n/* harmony import */ var _components_layout_Layout__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../components/layout/Layout */ \"./components/layout/Layout.js\");\n/* harmony import */ var _components_Loading_Loading__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../components/Loading/Loading */ \"./components/Loading/Loading.js\");\n/* harmony import */ var _components_MediaLink_MediaLink__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../components/MediaLink/MediaLink */ \"./components/MediaLink/MediaLink.js\");\n/* harmony import */ var _components_wishlist_btn__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../components/wishlist-btn */ \"./components/wishlist-btn.js\");\n/* harmony import */ var _contexts_UserContext__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../contexts/UserContext */ \"./contexts/UserContext.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../config */ \"./config/index.js\");\n/* harmony import */ var _services_api__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../services/api */ \"./services/api.js\");\n/* harmony import */ var _components_withApi__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ~/components/withApi */ \"./components/withApi/index.js\");\n/* harmony import */ var color__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! color */ \"./node_modules/color/index.js\");\n/* harmony import */ var color__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(color__WEBPACK_IMPORTED_MODULE_20__);\n/* harmony import */ var _constants_constants__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ~/constants/constants */ \"./constants/constants.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! next/router */ \"./node_modules/next/dist/client/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_22__);\n\n\n\n\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar HomePage = function HomePage(_ref) {\n  _s();\n\n  var api = _ref.api,\n      contents = _ref.contents,\n      featuredMedia = _ref.featuredMedia,\n      featuredMediaError = _ref.featuredMediaError,\n      media = _ref.media,\n      layoutProps = _ref.layoutProps;\n\n  var _useContext = Object(react__WEBPACK_IMPORTED_MODULE_7__[\"useContext\"])(_contexts_UserContext__WEBPACK_IMPORTED_MODULE_16__[\"default\"]),\n      user = _useContext.user;\n\n  var pageTitle = _config__WEBPACK_IMPORTED_MODULE_17__[\"CONFIG\"].appName;\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_7__[\"useState\"])(0),\n      idx = _useState[0],\n      setIdx = _useState[1];\n\n  return __jsx(_components_layout_Layout__WEBPACK_IMPORTED_MODULE_12__[\"default\"], Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n    paddingTop: false\n  }, layoutProps, {\n    media: featuredMedia\n  }), __jsx(next_head__WEBPACK_IMPORTED_MODULE_5___default.a, null, __jsx(\"title\", {\n    className: \"jsx-3651139852\"\n  }, pageTitle), \"x\", __jsx(\"link\", {\n    rel: \"apple-touch-icon\",\n    sizes: \"180x180\",\n    href: \"/static/\".concat(_constants_constants__WEBPACK_IMPORTED_MODULE_21__[\"TENANT\"], \"/favicon/faviconlau-180x180.png\"),\n    className: \"jsx-3651139852\"\n  }), __jsx(\"link\", {\n    rel: \"icon\",\n    type: \"image/png\",\n    sizes: \"32x32\",\n    href: \"/static/\".concat(_constants_constants__WEBPACK_IMPORTED_MODULE_21__[\"TENANT\"], \"/favicon/faviconlau-32x32.png\"),\n    className: \"jsx-3651139852\"\n  }), __jsx(\"link\", {\n    rel: \"icon\",\n    type: \"image/png\",\n    sizes: \"16x16\",\n    href: \"/static/\".concat(_constants_constants__WEBPACK_IMPORTED_MODULE_21__[\"TENANT\"], \"/favicon/faviconlau-16x16.png\"),\n    className: \"jsx-3651139852\"\n  }), __jsx(\"link\", {\n    rel: \"manifest\",\n    href: \"/static/\".concat(_constants_constants__WEBPACK_IMPORTED_MODULE_21__[\"TENANT\"], \"/favicon/site.webmanifest\"),\n    className: \"jsx-3651139852\"\n  }), __jsx(\"link\", {\n    rel: \"mask-icon\",\n    href: \"/static/\".concat(_constants_constants__WEBPACK_IMPORTED_MODULE_21__[\"TENANT\"], \"/favicon/safari-pinned-tab.svg\"),\n    color: \"#5bbad5\",\n    className: \"jsx-3651139852\"\n  }), __jsx(\"meta\", {\n    name: \"msapplication-TileColor\",\n    content: \"#da532c\",\n    className: \"jsx-3651139852\"\n  }), __jsx(\"meta\", {\n    name: \"theme-color\",\n    content: \"#ffffff\",\n    className: \"jsx-3651139852\"\n  })), __jsx(\"div\", {\n    className: \"jsx-3651139852\" + \" \" + \"index\"\n  }, __jsx(Cover, {\n    error: featuredMediaError,\n    media: featuredMedia\n  }), __jsx(\"div\", {\n    className: \"jsx-3651139852\" + \" \" + \"index__contents\"\n  }, contents && contents.map(function (item, index) {\n    var showBanner = item.is_paid && user || !item.is_paid && !user;\n    var contentableType = item.contentable_type;\n\n    switch (contentableType) {\n      case 'categories':\n        return __jsx(HomeCarouselSection, {\n          api: api,\n          category: item.slug,\n          key: index,\n          idx: index\n        });\n\n      case 'banners':\n        return showBanner && __jsx(BannerSection, {\n          id: item.contentable_id,\n          key: index\n        });\n\n      case 'movies':\n        return showBanner && __jsx(BannerSection, {\n          movie: item.slug,\n          key: index\n        });\n    }\n  }))), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a, {\n    id: \"3651139852\"\n  }, \".index.jsx-3651139852{margin-bottom:75px;}.index__contents.jsx-3651139852{position:relative;z-index:2;padding-bottom:4em;}.home-carousel-section.jsx-3651139852:first-child{padding:3.5em 0;}@media (min-width:768px){.index.jsx-3651139852{margin-bottom:30px;}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/rafael/Projects/somosgad/dale/pages/index.js */\"));\n};\n\n_s(HomePage, \"XojmfB7O6XeeHrXyU9I2bfbX9oo=\");\n\n_c = HomePage;\n\nHomePage.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(ctx) {\n    var api, _yield$api$get, homePage, _homePage$contents, firstContent, contents, _yield$api$get2, featuredMedia, _homePage$contents2, _contents;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            api = ctx.api;\n            _context.next = 3;\n            return api.get('pages/home');\n\n          case 3:\n            _yield$api$get = _context.sent;\n            homePage = _yield$api$get.data;\n            _context.prev = 5;\n            _homePage$contents = Object(_babel_runtime_helpers_esm_toArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(homePage.contents), firstContent = _homePage$contents[0], contents = _homePage$contents.slice(1);\n            _context.next = 9;\n            return api.get('movie/' + firstContent.slug + '?for=home-cover');\n\n          case 9:\n            _yield$api$get2 = _context.sent;\n            featuredMedia = _yield$api$get2.data.movie;\n            true ? next_router__WEBPACK_IMPORTED_MODULE_22___default.a.push('/login') : undefined; // return { contents, featuredMedia }\n\n            _context.next = 18;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](5);\n            _homePage$contents2 = Object(_babel_runtime_helpers_esm_toArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(homePage.contents), _contents = _homePage$contents2.slice(0);\n            return _context.abrupt(\"return\", {\n              contents: _contents,\n              featuredMediaError: _context.t0\n            });\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 14]]);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_c2 = Object(_components_withApi__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(HomePage));\nvar CoverImgContent = styled_components__WEBPACK_IMPORTED_MODULE_8__[\"default\"].div.withConfig({\n  displayName: \"pages__CoverImgContent\",\n  componentId: \"zvtr18-0\"\n})([\"background-image:linear-gradient(to bottom,\", \" 80%,\", \" 100%),url('\", \"');background-position:50% 0,50% 0,75% 0;background-repeat:no-repeat,no-repeat,no-repeat;background-size:cover,cover,cover;&::before{content:'';display:block;padding-bottom:112.5%;}@media (min-width:768px){background-image:linear-gradient(to bottom,\", \" 65%,\", \" 100%),url('\", \"');background-position:50% 0,50% 0,40% 50%;&::before{padding-bottom:80%;}}@media (min-width:1200px){background-position:50% 0,50% 0,75% 50%;&::before{padding-bottom:48%;}}\"], function (props) {\n  return color__WEBPACK_IMPORTED_MODULE_20___default()(props.theme.colors.background).fade(1).string();\n}, function (props) {\n  return props.theme.colors.background;\n}, function (props) {\n  return props.posterUrl;\n}, function (props) {\n  return color__WEBPACK_IMPORTED_MODULE_20___default()(props.theme.colors.background).fade(1).string();\n}, function (props) {\n  return props.theme.colors.background;\n}, function (props) {\n  return props.posterUrl;\n});\n_c3 = CoverImgContent;\n\nvar Cover = function Cover(_ref3) {\n  _s2();\n\n  var error = _ref3.error,\n      media = _ref3.media;\n\n  if (error) {\n    return __jsx(\"p\", null, \"No se puede cargar contenido destacado\");\n  }\n\n  var _useContext2 = Object(react__WEBPACK_IMPORTED_MODULE_7__[\"useContext\"])(_contexts_UserContext__WEBPACK_IMPORTED_MODULE_16__[\"default\"]),\n      user = _useContext2.user;\n\n  var _ref4 = media || {},\n      description = _ref4.description,\n      logo = _ref4.logo,\n      poster_url = _ref4.poster_url;\n\n  var _ref5 = logo || {},\n      height = _ref5.height,\n      _ref5$url = _ref5.url;\n\n  _ref5$url = _ref5$url === void 0 ? {} : _ref5$url;\n  var fallback = _ref5$url[\"default\"],\n      png = _ref5$url.png,\n      webp = _ref5$url.webp,\n      width = _ref5.width;\n  var empezaYa = _config__WEBPACK_IMPORTED_MODULE_17__[\"CONFIG\"].lang === 'es-CL' ? '¡Vívelo ahora!' : '¡Empieza Ya!';\n  return __jsx(next_link__WEBPACK_IMPORTED_MODULE_6___default.a, {\n    href: media && media.video_file ? \"/media/\".concat(media.slug, \"/watch\") : '/'\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"cover container-fluid\"\n  }, poster_url && __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"cover__img row\"\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"col p-0\"\n  }, __jsx(CoverImgContent, {\n    posterUrl: poster_url\n  }, __jsx(\"img\", {\n    alt: \"\",\n    src: poster_url,\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"d-none\"\n  })))), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"cover__contents row\"\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"col-12 col-md-4 offset-md-1\"\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"cover__infos\"\n  }, logo && __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"row\"\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"col-8 offset-2 col-md-12 offset-md-0\"\n  }, __jsx(\"h1\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"cover__logo\"\n  }, __jsx(\"picture\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]])\n  }, __jsx(\"source\", {\n    srcSet: webp,\n    type: \"media/webp\",\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]])\n  }), __jsx(\"source\", {\n    srcSet: png,\n    type: \"media/png\",\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]])\n  }), __jsx(\"img\", {\n    height: height,\n    src: fallback,\n    width: width,\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"img-fluid\"\n  }))))), description && __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"row cover__description\"\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"col-10 offset-1 col-md-12 offset-md-0\"\n  }, __jsx(\"p\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"mb-0\"\n  }, description)))), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"row justify-content-center gutter-15\"\n  }, !user ? __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"col-auto\"\n  }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_6___default.a, {\n    href: \"/signup\",\n    passHref: true\n  }, __jsx(_components_button__WEBPACK_IMPORTED_MODULE_9__[\"default\"], null, empezaYa))) : __jsx(react__WEBPACK_IMPORTED_MODULE_7___default.a.Fragment, null, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"col-auto\"\n  }, __jsx(_components_MediaLink_MediaLink__WEBPACK_IMPORTED_MODULE_14__[\"default\"], Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n    media: media\n  }, {\n    passHref: true\n  }), __jsx(_components_button__WEBPACK_IMPORTED_MODULE_9__[\"default\"], null, \"Mira\"))), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a.dynamic([[\"1807027609\", [logo ? height * 100 / width + '%' : 0]]]) + \" \" + \"col-auto\"\n  }, __jsx(_components_wishlist_btn__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n    movieId: media.id\n  })))))), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a, {\n    id: \"1807027609\",\n    dynamic: [logo ? height * 100 / width + '%' : 0]\n  }, \".cover.__jsx-style-dynamic-selector{font-size:12px;line-height:1.4;margin-bottom:15px;overflow:hidden;padding-bottom:15px;position:relative;text-align:center;z-index:1;}.cover__img.__jsx-style-dynamic-selector{margin-bottom:-90px;}.cover__infos.__jsx-style-dynamic-selector{margin-bottom:15px;}.cover__logo.__jsx-style-dynamic-selector{margin-top:0;margin-bottom:15px;position:relative;}.cover__logo.__jsx-style-dynamic-selector::before{content:'';display:block;padding-bottom:\".concat(logo ? height * 100 / width + '%' : 0, \";}.cover__logo.__jsx-style-dynamic-selector img.__jsx-style-dynamic-selector{left:0;position:absolute;top:0;}@media (min-width:768px){.cover.__jsx-style-dynamic-selector{font-size:16px;line-height:1.5;margin-bottom:-60px;text-align:left;}.cover__img.__jsx-style-dynamic-selector{margin-bottom:0;}.cover__contents.__jsx-style-dynamic-selector{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;height:100%;padding-top:var(--padding-top);padding-bottom:60px;position:absolute;width:100%;top:0;}.cover__infos.__jsx-style-dynamic-selector{margin-bottom:15px;}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/rafael/Projects/somosgad/dale/pages/index.js */\"))));\n};\n\n_s2(Cover, \"y3FQDew7UyrSqYkvQcTdCsLbAB8=\");\n\n_c4 = Cover;\n\nvar HomeCarouselSection = function HomeCarouselSection(_ref6) {\n  _s3();\n\n  var api = _ref6.api,\n      categorySlug = _ref6.category,\n      idx = _ref6.idx;\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_7__[\"useState\"])(null),\n      category = _useState2[0],\n      setCategory = _useState2[1];\n\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_7__[\"useState\"])(false),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_7__[\"useState\"])(false),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var lang = _config__WEBPACK_IMPORTED_MODULE_17__[\"CONFIG\"].lang;\n  Object(react__WEBPACK_IMPORTED_MODULE_7__[\"useEffect\"])(function () {\n    function fetchData() {\n      return _fetchData.apply(this, arguments);\n    }\n\n    function _fetchData() {\n      _fetchData = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2() {\n        var _yield$api$get3, data, errorMessage;\n\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                setError(false);\n                setLoading(true);\n                _context2.prev = 2;\n                _context2.next = 5;\n                return api.get(\"category/\".concat(categorySlug));\n\n              case 5:\n                _yield$api$get3 = _context2.sent;\n                data = _yield$api$get3.data;\n                console.log(data);\n                setCategory(data);\n                _context2.next = 15;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](2);\n                errorMessage = ['es', 'es-CL'].includes(lang) ? 'Error al intentar cargar la categoría' : 'Error trying to load category';\n                setError(errorMessage);\n\n              case 15:\n                setLoading(false);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[2, 11]]);\n      }));\n      return _fetchData.apply(this, arguments);\n    }\n\n    fetchData();\n  }, [categorySlug]); // alert(key)\n\n  return __jsx(react__WEBPACK_IMPORTED_MODULE_7___default.a.Fragment, null, __jsx(\"div\", {\n    className: \"jsx-2384396703\" + \" \" + \"home-carousel-section\"\n  }, loading ? __jsx(\"div\", {\n    className: \"jsx-2384396703\" + \" \" + \"text-center\"\n  }, __jsx(_components_Loading_Loading__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {\n    loadingState: loading\n  })) : category ? __jsx(_components_carousel_section__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n    category: category,\n    idx: idx\n  }) : error && __jsx(\"div\", {\n    className: \"jsx-2384396703\" + \" \" + \"text-center\"\n  }, error)), __jsx(\"br\", {\n    className: \"jsx-2384396703\"\n  }), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a, {\n    id: \"2384396703\"\n  }, \"@media (min-width:768px){}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/rafael/Projects/somosgad/dale/pages/index.js */\"));\n};\n\n_s3(HomeCarouselSection, \"0fCJt74Cu1meMSX1NN7Lrna/N1w=\");\n\n_c5 = HomeCarouselSection;\n\nvar BannerSection = function BannerSection(_ref7) {\n  _s4();\n\n  var id = _ref7.id,\n      movie = _ref7.movie;\n\n  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_7__[\"useState\"])(),\n      banner = _useState5[0],\n      setBanner = _useState5[1];\n\n  var _useState6 = Object(react__WEBPACK_IMPORTED_MODULE_7__[\"useState\"])(false),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = Object(react__WEBPACK_IMPORTED_MODULE_7__[\"useState\"])(),\n      error = _useState7[0],\n      setError = _useState7[1];\n\n  Object(react__WEBPACK_IMPORTED_MODULE_7__[\"useEffect\"])(function (_) {\n    function fetchData() {\n      return _fetchData2.apply(this, arguments);\n    }\n\n    function _fetchData2() {\n      _fetchData2 = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3() {\n        var _yield, data;\n\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                setLoading(true);\n                _context3.prev = 1;\n                _context3.next = 4;\n                return id ? Object(_services_api__WEBPACK_IMPORTED_MODULE_18__[\"default\"])().get(\"/banners/\".concat(id)) : Object(_services_api__WEBPACK_IMPORTED_MODULE_18__[\"default\"])().get(\"/movie/\".concat(movie));\n\n              case 4:\n                _yield = _context3.sent;\n                data = _yield.data;\n                setBanner(data);\n                _context3.next = 12;\n                break;\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](1);\n                setError(true);\n\n              case 12:\n                setLoading(false);\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[1, 9]]);\n      }));\n      return _fetchData2.apply(this, arguments);\n    }\n\n    fetchData();\n  }, [id]);\n  return __jsx(\"div\", {\n    className: \"jsx-1694855813\"\n  }, __jsx(\"div\", {\n    className: \"jsx-1694855813\" + \" \" + \"section\"\n  }, __jsx(\"div\", {\n    className: \"jsx-1694855813\" + \" \" + \"text-center\"\n  }, __jsx(_components_Loading_Loading__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {\n    loadingState: loading\n  })), banner && id && __jsx(\"a\", {\n    href: banner.link,\n    target: \"_blank\",\n    className: \"jsx-1694855813\" + \" \" + \"sponsor-link\"\n  }, __jsx(_components_featured__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n    img: banner.banner_url\n  })), banner && movie && __jsx(_components_MediaLink_MediaLink__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n    media: banner.movie,\n    passHref: true\n  }, __jsx(\"a\", {\n    className: \"jsx-1694855813\"\n  }, __jsx(_components_featured__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n    className: \"gradient\",\n    img: banner.movie.poster_url\n  }))), error && __jsx(\"div\", {\n    className: \"jsx-1694855813\" + \" \" + \"text-center\"\n  }, \"Error\")), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_4___default.a, {\n    id: \"1694855813\"\n  }, \".sponsor-link.jsx-1694855813{color:white !important;-webkit-text-decoration:none;text-decoration:none;}.sponsor-link.jsx-1694855813:hover{color:white !important;-webkit-text-decoration:none;text-decoration:none;}a.jsx-1694855813:not([href]):not([tabindex]):hover{color:white !important;-webkit-text-decoration:none;text-decoration:none;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/rafael/Projects/somosgad/dale/pages/index.js */\"));\n};\n\n_s4(BannerSection, \"+/YNznwZwoPXYIErHlbDJu+umJc=\");\n\n_c6 = BannerSection;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"HomePage\");\n$RefreshReg$(_c2, \"%default%\");\n$RefreshReg$(_c3, \"CoverImgContent\");\n$RefreshReg$(_c4, \"Cover\");\n$RefreshReg$(_c5, \"HomeCarouselSection\");\n$RefreshReg$(_c6, \"BannerSection\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/next/node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/index.js\n");

/***/ })

})