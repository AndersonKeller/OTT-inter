webpackHotUpdate("static/development/pages/media/[slug].js",{

/***/ "./pages/media/[slug].js":
/*!*******************************!*\
  !*** ./pages/media/[slug].js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! styled-components */ \"./node_modules/styled-components/dist/styled-components.browser.esm.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/head */ \"./node_modules/next/dist/next-server/lib/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _material_ui_core_useMediaQuery__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @material-ui/core/useMediaQuery */ \"./node_modules/@material-ui/core/esm/useMediaQuery/index.js\");\n/* harmony import */ var react_bootstrap_Collapse__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-bootstrap/Collapse */ \"./node_modules/react-bootstrap/esm/Collapse.js\");\n/* harmony import */ var _components_button__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ~/components/button */ \"./components/button.js\");\n/* harmony import */ var _components_layout_Layout__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ~/components/layout/Layout */ \"./components/layout/Layout.js\");\n/* harmony import */ var _components_MediaLink_MediaLink__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ~/components/MediaLink/MediaLink */ \"./components/MediaLink/MediaLink.js\");\n/* harmony import */ var _components_wishlist_btn__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ~/components/wishlist-btn */ \"./components/wishlist-btn.js\");\n/* harmony import */ var _components_withApi__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ~/components/withApi */ \"./components/withApi/index.js\");\n/* harmony import */ var _contexts_UserContext__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ~/contexts/UserContext */ \"./contexts/UserContext.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ~/config */ \"./config/index.js\");\n/* harmony import */ var _components_icons_chevron__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ~/components/icons/chevron */ \"./components/icons/chevron.js\");\n/* harmony import */ var color__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! color */ \"./node_modules/color/index.js\");\n/* harmony import */ var color__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(color__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var _constants_constants__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ~/constants/constants */ \"./constants/constants.js\");\n/* harmony import */ var _components_LogoApp__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ~/components/LogoApp */ \"./components/LogoApp/index.js\");\n\n\n\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction MediaPage1(_ref) {\n  var category = _ref.category,\n      errorCode = _ref.errorCode,\n      layoutProps = _ref.layoutProps,\n      media = _ref.media,\n      related = _ref.related;\n  var appName = _config__WEBPACK_IMPORTED_MODULE_16__[\"CONFIG\"].appName;\n  var mediaTitle = media.title;\n  var pageTitle = \"\".concat(mediaTitle, \" < \").concat(appName);\n  return __jsx(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, __jsx(_components_layout_Layout__WEBPACK_IMPORTED_MODULE_11__[\"default\"], Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n    errorCode: errorCode,\n    paddingTop: false\n  }, layoutProps), __jsx(next_head__WEBPACK_IMPORTED_MODULE_6___default.a, null, __jsx(\"title\", {\n    className: \"jsx-4207457223\"\n  }, pageTitle)), __jsx(Cover, {\n    category: category,\n    media: media\n  }), category && related && __jsx(More, {\n    category: category,\n    related: related\n  })), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {\n    id: \"4207457223\"\n  }, \".footer{padding-bottom:0px !important;margin-top:57px !important;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/rafael/Projects/somosgad/dale/pages/media/[slug].js */\"));\n}\n\n_c = MediaPage1;\n\nMediaPage1.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(ctx) {\n    var api, query, movieSlug, categorySlug, url, _yield$api$get, data, category, media, related, errorCode;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            api = ctx.api, query = ctx.query;\n            movieSlug = query.slug, categorySlug = query.category;\n            _context.prev = 2;\n            url = \"movie/\".concat(movieSlug) + (categorySlug ? \"/category/\".concat(categorySlug) : '');\n            _context.next = 6;\n            return api.get(url);\n\n          case 6:\n            _yield$api$get = _context.sent;\n            data = _yield$api$get.data;\n            category = data.category, media = data.movie, related = data.related;\n            return _context.abrupt(\"return\", {\n              category: category,\n              media: media,\n              related: related\n            });\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](2);\n            errorCode = 404;\n            return _context.abrupt(\"return\", {\n              errorCode: errorCode\n            });\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 12]]);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar Cover = function Cover(_ref3) {\n  _s();\n\n  var category = _ref3.category,\n      media = _ref3.media;\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var _useContext = Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useContext\"])(_contexts_UserContext__WEBPACK_IMPORTED_MODULE_15__[\"default\"]),\n      user = _useContext.user;\n\n  var smDown = Object(_material_ui_core_useMediaQuery__WEBPACK_IMPORTED_MODULE_8__[\"default\"])('(max-width: 767px)');\n  var probaGratis = _config__WEBPACK_IMPORTED_MODULE_16__[\"CONFIG\"].lang === 'es-CL' ? 'Prueba gratis' : 'Probá Gratis';\n  var theme = Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useContext\"])(styled_components__WEBPACK_IMPORTED_MODULE_5__[\"ThemeContext\"]);\n  var maskColor = color__WEBPACK_IMPORTED_MODULE_18___default()(theme.colors.background);\n  var _media$banner_descrip = media.banner_description,\n      banner_description = _media$banner_descrip === void 0 ? null : _media$banner_descrip,\n      _media$detail = media.detail,\n      detail = _media$detail === void 0 ? null : _media$detail,\n      posterUrl = media.poster_url,\n      _media$publish_year = media.publish_year,\n      publishYear = _media$publish_year === void 0 ? null : _media$publish_year,\n      title = media.title;\n  return __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"569781101\", [posterUrl, posterUrl]]])\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"569781101\", [posterUrl, posterUrl]]]) + \" \" + \"header-entre\"\n  }, __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"569781101\", [posterUrl, posterUrl]]])\n  }, category.name)), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"569781101\", [posterUrl, posterUrl]]]) + \" \" + \"cover container-fluid\"\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"569781101\", [posterUrl, posterUrl]]]) + \" \" + \"row align-items-center\"\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"569781101\", [posterUrl, posterUrl]]]) + \" \" + \"col-12 col-md-5 offset-md-1\"\n  }, __jsx(_components_MediaLink_MediaLink__WEBPACK_IMPORTED_MODULE_12__[\"default\"], Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n    category: category,\n    media: media\n  }, {\n    watch: true\n  }), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"569781101\", [posterUrl, posterUrl]]]) + \" \" + \"heading\"\n  }, __jsx(\"h1\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"569781101\", [posterUrl, posterUrl]]]) + \" \" + \"h2\"\n  }, __jsx(\"img\", {\n    src: media.logo_url ? media.logo_url[\"default\"] : '',\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"569781101\", [posterUrl, posterUrl]]]) + \" \" + \"image-logo\"\n  })), publishYear && __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"569781101\", [posterUrl, posterUrl]]]) + \" \" + \"year\"\n  }, publishYear), __jsx(\"br\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"569781101\", [posterUrl, posterUrl]]])\n  }), banner_description && __jsx(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"569781101\", [posterUrl, posterUrl]]]) + \" \" + \"description\"\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"569781101\", [posterUrl, posterUrl]]]) + \" \" + (smDown && !open && 'short-description' || \"\")\n  }, smDown && !open && detail.replace(/^([\\s\\S]{70}[^\\s]*)[\\s\\S]*/, \"$1\"), __jsx(react_bootstrap_Collapse__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n    \"in\": open || !smDown\n  }, __jsx(\"p\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"569781101\", [posterUrl, posterUrl]]])\n  }, banner_description))), __jsx(\"div\", {\n    onClick: function onClick(_) {\n      return setOpen(!open);\n    },\n    \"aria-controls\": \"description\",\n    \"aria-expanded\": open,\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"569781101\", [posterUrl, posterUrl]]]) + \" \" + ('chevron-collapse ' + (!smDown && 'd-none') || false)\n  }, __jsx(_components_icons_chevron__WEBPACK_IMPORTED_MODULE_17__[\"default\"], {\n    dir: !open && \"bottom\",\n    alt: \"mas\",\n    className: \"chevron\",\n    height: \"10\",\n    width: \"17\",\n    inline: true\n  }))))), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"569781101\", [posterUrl, posterUrl]]]) + \" \" + \"buttons\"\n  }, !user ? __jsx(next_link__WEBPACK_IMPORTED_MODULE_7___default.a, {\n    href: _constants_constants__WEBPACK_IMPORTED_MODULE_19__[\"TENANT\"] === 'lau' ? \"/subscriptor\" : \"/signup\"\n  }, __jsx(_components_button__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n    block: smDown\n  }, probaGratis)) : __jsx(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, __jsx(_components_MediaLink_MediaLink__WEBPACK_IMPORTED_MODULE_12__[\"default\"], Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n    category: category,\n    media: media\n  }, {\n    watch: true\n  }), __jsx(_components_button__WEBPACK_IMPORTED_MODULE_10__[\"default\"], null, \"Mira\")), __jsx(_components_wishlist_btn__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {\n    movieId: media.id\n  })))))), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {\n    id: \"569781101\",\n    dynamic: [posterUrl, posterUrl]\n  }, \".image-logo.__jsx-style-dynamic-selector{max-width:37%;}.cover.__jsx-style-dynamic-selector{background-color:var(--background);background-position:50% 50%,100% 50%;background-image:url(\".concat(posterUrl, \");background-repeat:no-repeat,no-repeat;background-size:cover,cover;font-size:15px;line-height:1.5;}.cover.__jsx-style-dynamic-selector .row.__jsx-style-dynamic-selector{padding-top:calc(var(--padding-top) + 15px);padding-bottom:15px;}.heading.__jsx-style-dynamic-selector{margin-bottom:15px;}h1.__jsx-style-dynamic-selector{font-size:31px;font-weight:bold;line-height:normal;margin-bottom:0;}.year.__jsx-style-dynamic-selector{font-size:1.33em;}.description.__jsx-style-dynamic-selector{color:var(--descriptions-color);}.short-description.__jsx-style-dynamic-selector{margin-bottom:100px;}.short-description.__jsx-style-dynamic-selector:after{content:\\\" . . .\\\";}.cover.__jsx-style-dynamic-selector .btn-primary{margin-right:15px;margin-bottom:0;}.chevron-collapse.__jsx-style-dynamic-selector{padding-left:10px;}.header-entre.__jsx-style-dynamic-selector{display:none;}@media (min-width:768px){.image-logo.__jsx-style-dynamic-selector{max-width:37%;}.cover.__jsx-style-dynamic-selector .row.__jsx-style-dynamic-selector{height:560px;padding-top:var(--padding-top);padding-bottom:30px;}.info.__jsx-style-dynamic-selector{margin-bottom:30px;}.description.__jsx-style-dynamic-selector:after{content:\\\"\\\";}}@media(max-width:768px){.cover.__jsx-style-dynamic-selector{background-image:url(\").concat(posterUrl, \");}.buttons.__jsx-style-dynamic-selector{display:none!important;}h1.__jsx-style-dynamic-selector{text-align:center;font-size:18px;padding:161px 0px 18px 0px;}.heading.__jsx-style-dynamic-selector{margin-bottom:-19px;}.container-fluid.__jsx-style-dynamic-selector,.container-sm.__jsx-style-dynamic-selector,.container-md.__jsx-style-dynamic-selector,.container-lg.__jsx-style-dynamic-selector,.container-xl.__jsx-style-dynamic-selector{width:90%;padding-right:15px;padding-left:-13px;}h3.__jsx-style-dynamic-selector{padding-left:8px;font-size:22px;font-weight:600;}.header-entre.__jsx-style-dynamic-selector{background:#090a0a;display:block;margin-top:30%;padding-left:10px;}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/rafael/Projects/somosgad/dale/pages/media/[slug].js */\")));\n};\n\n_s(Cover, \"lqNW5SN7DIOk3nt6dbYFxPoqImE=\", false, function () {\n  return [_material_ui_core_useMediaQuery__WEBPACK_IMPORTED_MODULE_8__[\"default\"]];\n});\n\n_c2 = Cover;\n\nvar HMediaCard = function HMediaCard(_ref4) {\n  var category = _ref4.category,\n      media = _ref4.media;\n  var title = media.title;\n  return __jsx(\"div\", {\n    className: \"jsx-519892674\" + \" \" + \"h-media-card row\"\n  }, __jsx(\"div\", {\n    className: \"jsx-519892674\" + \" \" + \"col-md-4\"\n  }, __jsx(_components_MediaLink_MediaLink__WEBPACK_IMPORTED_MODULE_12__[\"default\"], Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n    watch: true\n  }, {\n    category: category,\n    media: media\n  }), __jsx(\"a\", {\n    className: \"jsx-519892674\"\n  }, __jsx(\"img\", {\n    height: \"220\",\n    src: media.thumbnail2_url ? media.thumbnail2_url : '//placehold.jp/390x220.png',\n    width: \"390\",\n    className: \"jsx-519892674\" + \" \" + \"img-fluid w-100 d-block\"\n  })))), __jsx(\"div\", {\n    className: \"jsx-519892674\" + \" \" + \"col-md-5\"\n  }, __jsx(\"h3\", {\n    className: \"jsx-519892674\" + \" \" + \"h3\"\n  }, __jsx(_components_MediaLink_MediaLink__WEBPACK_IMPORTED_MODULE_12__[\"default\"], Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n    watch: true\n  }, {\n    category: category,\n    media: media\n  }), __jsx(\"a\", {\n    className: \"jsx-519892674\"\n  }, title))), media.detail && __jsx(\"div\", {\n    className: \"jsx-519892674\" + \" \" + \"description\"\n  }, __jsx(\"p\", {\n    className: \"jsx-519892674\"\n  }, media.detail))), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {\n    id: \"519892674\"\n  }, \".h-media-card.jsx-519892674{margin-bottom:30px;}.h-media-card.jsx-519892674 a.jsx-519892674{color:var(--white);-webkit-text-decoration:none;text-decoration:none;}.h-media-card.jsx-519892674 img.jsx-519892674{margin-bottom:15px;}.h3.jsx-519892674{font-size:inherit;font-weight:bold;margin-top:15px;margin-bottom:15px;}.h3.jsx-519892674 a.jsx-519892674:focus,.h3.jsx-519892674 a.jsx-519892674:hover{-webkit-text-decoration:underline;text-decoration:underline;}.description.jsx-519892674{color:var(--descriptions-color);font-size:15px;}@media (min-width:768px){.h-media-card.jsx-519892674{margin-bottom:45px;}.h-media-card.jsx-519892674 img.jsx-519892674{margin-bottom:0;}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/rafael/Projects/somosgad/dale/pages/media/[slug].js */\"));\n};\n\n_c3 = HMediaCard;\n\nvar More = function More(_ref5) {\n  _s2();\n\n  var category = _ref5.category,\n      medias = _ref5.related;\n  var categoryName = category.name;\n  var theme = Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useContext\"])(styled_components__WEBPACK_IMPORTED_MODULE_5__[\"ThemeContext\"]);\n  var backgroundColor = color__WEBPACK_IMPORTED_MODULE_18___default()(theme.colors.background).hsl().string();\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])(\"none\"),\n      display = _useState2[0],\n      setDisplay = _useState2[1];\n\n  function visible() {\n    if (display == \"block\") {\n      setDisplay(\"none\");\n    } else {\n      setDisplay(\"block\");\n    }\n  }\n\n  return __jsx(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, __jsx(\"div\", {\n    className: \"jsx-3843199656\" + \" \" + \"is_visivel\"\n  }, __jsx(\"a\", {\n    onClick: function onClick() {\n      return visible();\n    },\n    className: \"jsx-3843199656\" + \" \" + \"btn-mas btn-primary\"\n  }, \"Ver M\\xE1s\"), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {\n    id: \"3843199656\"\n  }, \".is_visivel.jsx-3843199656{display:none;padding:24px;}@media (max-width:768px){.is_visivel.jsx-3843199656{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}.btn-mas.jsx-3843199656{font-weight:700;background-color:var(--primary);border:0px;border-radius:4px;padding:5px;width:28%;text-align:center;font-size:14px;}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/rafael/Projects/somosgad/dale/pages/media/[slug].js */\")), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"1338540420\", [backgroundColor, display]]]) + \" \" + \"more container-fluid\"\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"1338540420\", [backgroundColor, display]]]) + \" \" + \"row\"\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"1338540420\", [backgroundColor, display]]]) + \" \" + \"col offset-md-1\"\n  }, __jsx(\"h2\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"1338540420\", [backgroundColor, display]]]) + \" \" + \"h2 text-uppercase\"\n  }, \"M\\xE1s \", categoryName))), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a.dynamic([[\"1338540420\", [backgroundColor, display]]]) + \" \" + \"cards\"\n  }, medias.map(function (media, i) {\n    return __jsx(HMediaCard, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n      key: i\n    }, {\n      category: category,\n      media: media\n    }));\n  })), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_3___default.a, {\n    id: \"1338540420\",\n    dynamic: [backgroundColor, display]\n  }, \".more.__jsx-style-dynamic-selector{background-color:\".concat(backgroundColor, \";font-size:20px;line-height:1.5;padding-top:30px;}.h2.__jsx-style-dynamic-selector{font-size:30px;margin-top:0;margin-bottom:30px;}.cards.__jsx-style-dynamic-selector{overflow:hidden;}@media (max-width:768px){.more.__jsx-style-dynamic-selector{padding-top:45px;}.h2.__jsx-style-dynamic-selector{font-size:31px;margin-bottom:60px;display:none;}.cards.__jsx-style-dynamic-selector{padding-left:4%;}.container-fluid.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;display:\").concat(display, \";}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWZhZWwvUHJvamVjdHMvc29tb3NnYWQvZGFsZS9wYWdlcy9tZWRpYS9bc2x1Z10uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMlhvQixBQUd5RCxBQU0vQixBQU9DLEFBSUcsQUFLRixBQU1DLEFBS0osZUExQkQsQUFnQlEsQ0FUdkIsQUFpQkUsQ0FiQSxXQVZtQixNQWdCTCxZQXZCQyxDQVFqQixBQWlCRSxjQXhCZ0IsYUFnQ1EsR0EvQlAsaUJBQ25CLCtFQStCMkMscUNBQ3pDIiwiZmlsZSI6Ii9Vc2Vycy9yYWZhZWwvUHJvamVjdHMvc29tb3NnYWQvZGFsZS9wYWdlcy9tZWRpYS9bc2x1Z10uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgVGhlbWVDb250ZXh0IH0gZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5pbXBvcnQgSGVhZCBmcm9tICduZXh0L2hlYWQnXG5pbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnXG5pbXBvcnQgdXNlTWVkaWFRdWVyeSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS91c2VNZWRpYVF1ZXJ5J1xuaW1wb3J0IENvbGxhcHNlIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9Db2xsYXBzZSdcbmltcG9ydCBCdXR0b24gZnJvbSAnfi9jb21wb25lbnRzL2J1dHRvbidcbmltcG9ydCBMYXlvdXQgZnJvbSAnfi9jb21wb25lbnRzL2xheW91dC9MYXlvdXQnXG5pbXBvcnQgTWVkaWFMaW5rIGZyb20gJ34vY29tcG9uZW50cy9NZWRpYUxpbmsvTWVkaWFMaW5rJ1xuaW1wb3J0IFdpc2hsaXN0QnRuIGZyb20gJ34vY29tcG9uZW50cy93aXNobGlzdC1idG4nXG5pbXBvcnQgd2l0aEFwaSBmcm9tICd+L2NvbXBvbmVudHMvd2l0aEFwaSdcbmltcG9ydCBVc2VyQ29udGV4dCBmcm9tICd+L2NvbnRleHRzL1VzZXJDb250ZXh0J1xuaW1wb3J0IHsgQ09ORklHIH0gZnJvbSAnfi9jb25maWcnXG5pbXBvcnQgQ2hldnJvbiBmcm9tICd+L2NvbXBvbmVudHMvaWNvbnMvY2hldnJvbidcbmltcG9ydCBDb2xvciBmcm9tICdjb2xvcidcbmltcG9ydCB7IFRFTkFOVCB9IGZyb20gXCJ+L2NvbnN0YW50cy9jb25zdGFudHNcIjtcbmltcG9ydCBMb2dvQXBwIGZyb20gJ34vY29tcG9uZW50cy9Mb2dvQXBwJ1xuXG5mdW5jdGlvbiBNZWRpYVBhZ2UxKHsgY2F0ZWdvcnksIGVycm9yQ29kZSwgbGF5b3V0UHJvcHMsIG1lZGlhLCByZWxhdGVkIH0pIHtcbiAgY29uc3QgeyBhcHBOYW1lIH0gPSBDT05GSUdcbiAgY29uc3QgeyB0aXRsZTogbWVkaWFUaXRsZSB9ID0gbWVkaWFcbiAgY29uc3QgcGFnZVRpdGxlID0gYCR7bWVkaWFUaXRsZX0gPCAke2FwcE5hbWV9YFxuXG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPExheW91dCBlcnJvckNvZGU9e2Vycm9yQ29kZX0gcGFkZGluZ1RvcD17ZmFsc2V9IHsuLi5sYXlvdXRQcm9wc30+XG4gICAgICAgIDxIZWFkPlxuICAgICAgICAgIDx0aXRsZT57cGFnZVRpdGxlfTwvdGl0bGU+XG4gICAgICAgIDwvSGVhZD5cblxuICAgICAgICA8Q292ZXIgY2F0ZWdvcnk9e2NhdGVnb3J5fSBtZWRpYT17bWVkaWF9IC8+XG4gICAgICAgIHtjYXRlZ29yeSAmJiByZWxhdGVkICYmIChcbiAgICAgICAgICA8TW9yZSBjYXRlZ29yeT17Y2F0ZWdvcnl9IHJlbGF0ZWQ9e3JlbGF0ZWR9IC8+XG4gICAgICAgICl9XG4gICAgICA8L0xheW91dD5cbiAgICAgIDxzdHlsZSBqc3ggZ2xvYmFsPntgXG4gICAgICAgIC5mb290ZXIge1xuICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDBweCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogNTdweCAhaW1wb3J0YW50O1xuICAgICAgICAgfVxuICAgICAgYH08L3N0eWxlPlxuICAgIDwvPlxuICApXG59XG5cblxuTWVkaWFQYWdlMS5nZXRJbml0aWFsUHJvcHMgPSBhc3luYyBjdHggPT4ge1xuICBjb25zdCB7IGFwaSwgcXVlcnkgfSA9IGN0eFxuICBjb25zdCB7IHNsdWc6IG1vdmllU2x1ZywgY2F0ZWdvcnk6IGNhdGVnb3J5U2x1ZyB9ID0gcXVlcnk7XG4gIHRyeSB7XG4gICAgY29uc3QgdXJsID0gYG1vdmllLyR7bW92aWVTbHVnfWAgKyAoY2F0ZWdvcnlTbHVnID8gYC9jYXRlZ29yeS8ke2NhdGVnb3J5U2x1Z31gIDogJycpXG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBhcGkuZ2V0KHVybClcbiAgICBjb25zdCB7IGNhdGVnb3J5LCBtb3ZpZTogbWVkaWEsIHJlbGF0ZWQgfSA9IGRhdGFcbiAgICByZXR1cm4geyBjYXRlZ29yeSwgbWVkaWEsIHJlbGF0ZWQgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnN0IGVycm9yQ29kZSA9IDQwNFxuICAgIHJldHVybiB7IGVycm9yQ29kZSB9XG4gIH1cbn1cblxuXG5jb25zdCBDb3ZlciA9ICh7IGNhdGVnb3J5LCBtZWRpYSB9KSA9PiB7XG4gIGNvbnN0IFtvcGVuLCBzZXRPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCB7IHVzZXIgfSA9IHVzZUNvbnRleHQoVXNlckNvbnRleHQpXG4gIGNvbnN0IHNtRG93biA9IHVzZU1lZGlhUXVlcnkoJyhtYXgtd2lkdGg6IDc2N3B4KScpXG4gIGNvbnN0IHByb2JhR3JhdGlzID0gQ09ORklHLmxhbmcgPT09ICdlcy1DTCcgPyAnUHJ1ZWJhIGdyYXRpcycgOiAnUHJvYsOhIEdyYXRpcydcbiAgY29uc3QgdGhlbWUgPSB1c2VDb250ZXh0KFRoZW1lQ29udGV4dClcbiAgY29uc3QgbWFza0NvbG9yID0gQ29sb3IodGhlbWUuY29sb3JzLmJhY2tncm91bmQpO1xuICBjb25zdCB7XG4gICAgYmFubmVyX2Rlc2NyaXB0aW9uID0gbnVsbCxcbiAgICBkZXRhaWwgPSBudWxsLFxuICAgIHBvc3Rlcl91cmw6IHBvc3RlclVybCxcbiAgICBwdWJsaXNoX3llYXI6IHB1Ymxpc2hZZWFyID0gbnVsbCxcbiAgICB0aXRsZSxcbiAgfSA9IG1lZGlhO1xuXG4gIHJldHVybiAoXG5cbiAgICA8ZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXItZW50cmVcIj5cbiAgICAgICAgPGgzPntjYXRlZ29yeS5uYW1lfTwvaDM+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb3ZlciBjb250YWluZXItZmx1aWRcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cgYWxpZ24taXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTIgY29sLW1kLTUgb2Zmc2V0LW1kLTFcIj5cbiAgICAgICAgICAgIDxNZWRpYUxpbmsgey4uLnsgY2F0ZWdvcnksIG1lZGlhIH19IHdhdGNoPlxuXG5cblxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRpbmdcIj5cbiAgICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwiaDJcIj5cbiAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwiaW1hZ2UtbG9nb1wiIHNyYz17bWVkaWEubG9nb191cmwgPyBtZWRpYS5sb2dvX3VybC5kZWZhdWx0IDogJyd9PjwvaW1nPlxuICAgICAgICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgICAgICAge3B1Ymxpc2hZZWFyICYmIChcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwieWVhclwiPntwdWJsaXNoWWVhcn08L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgICAgICA8YnI+PC9icj5cbiAgICAgICAgICAgICAgICB7YmFubmVyX2Rlc2NyaXB0aW9uICYmIChcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGVzY3JpcHRpb25cIiBzdHlsZT17eyBkaXNwbGF5OiAnZmxleCcgfX0+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzbURvd24gJiYgIW9wZW4gJiYgJ3Nob3J0LWRlc2NyaXB0aW9uJ30+XG4gICAgICAgICAgICAgICAgICAgICAge3NtRG93biAmJiAhb3BlbiAmJiBkZXRhaWwucmVwbGFjZSgvXihbXFxzXFxTXXs3MH1bXlxcc10qKVtcXHNcXFNdKi8sIFwiJDFcIil9XG4gICAgICAgICAgICAgICAgICAgICAgPENvbGxhcHNlIGluPXtvcGVuIHx8ICFzbURvd259PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+e2Jhbm5lcl9kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgPC9Db2xsYXBzZT5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9eydjaGV2cm9uLWNvbGxhcHNlICcgKyAoIXNtRG93biAmJiAnZC1ub25lJyl9XG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17XyA9PiBzZXRPcGVuKCFvcGVuKX1cbiAgICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPVwiZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9e29wZW59XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8Q2hldnJvblxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyPXshb3BlbiAmJiBcImJvdHRvbVwifVxuICAgICAgICAgICAgICAgICAgICAgICAgYWx0PVwibWFzXCIgY2xhc3NOYW1lPVwiY2hldnJvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgaW5saW5lXG4gICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvTWVkaWFMaW5rPlxuXG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnV0dG9uc1wiPlxuXG4gICAgICAgICAgICAgIHshdXNlciA/IChcbiAgICAgICAgICAgICAgICA8TGluayBocmVmPXtURU5BTlQgPT09ICdsYXUnID8gXCIvc3Vic2NyaXB0b3JcIiA6IFwiL3NpZ251cFwifT5cbiAgICAgICAgICAgICAgICAgIDxCdXR0b24gYmxvY2s9e3NtRG93bn0+e3Byb2JhR3JhdGlzfTwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgIDxNZWRpYUxpbmsgey4uLnsgY2F0ZWdvcnksIG1lZGlhIH19IHdhdGNoPlxuICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24+TWlyYTwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L01lZGlhTGluaz5cbiAgICAgICAgICAgICAgICAgICAgPFdpc2hsaXN0QnRuIG1vdmllSWQ9e21lZGlhLmlkfSAvPlxuICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPHN0eWxlIGpzeD57YFxuXG4gICAgICAgIC5pbWFnZS1sb2dvIHtcbiAgICAgICAgICBtYXgtd2lkdGg6MzclO1xuICAgICAgICB9XG5cbiAgICAgICAgLmNvdmVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kKTtcbiAgICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiA1MCUgNTAlLCAxMDAlIDUwJTtcblxuICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke3Bvc3RlclVybH0pO1xuICAgICAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQsIG5vLXJlcGVhdDtcbiAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyLCBjb3ZlcjtcbiAgICAgICAgICBmb250LXNpemU6IDE1cHg7XG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgICAgICAgfVxuICAgICAgICAuY292ZXIgLnJvdyB7XG4gICAgICAgICAgcGFkZGluZy10b3A6IGNhbGModmFyKC0tcGFkZGluZy10b3ApICsgMTVweCk7XG4gICAgICAgICAgcGFkZGluZy1ib3R0b206IDE1cHg7XG4gICAgICAgIH1cbiAgICAgICAgLmhlYWRpbmcge1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XG4gICAgICAgIH1cbiAgICAgICAgaDEge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMzFweDtcbiAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICBsaW5lLWhlaWdodDogbm9ybWFsO1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgICAgIH1cbiAgICAgICAgLnllYXIge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMS4zM2VtO1xuICAgICAgICB9XG4gICAgICAgIC5kZXNjcmlwdGlvbiB7XG4gICAgICAgICAgY29sb3I6IHZhcigtLWRlc2NyaXB0aW9ucy1jb2xvcik7XG4gICAgICAgIH1cbiAgICAgICAgLnNob3J0LWRlc2NyaXB0aW9uIHtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMDBweDtcbiAgICAgICAgfVxuICAgICAgICAuc2hvcnQtZGVzY3JpcHRpb24gOmFmdGVyIHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IFwiIC4gLiAuXCI7XG4gICAgICAgIH1cbiAgICAgICAgLmNvdmVyIDpnbG9iYWwoLmJ0bi1wcmltYXJ5KSB7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgICAgIH1cbiAgICAgICAgLmNoZXZyb24tY29sbGFwc2Uge1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgICAgICAgfVxuICAgICAgICAuaGVhZGVyLWVudHJlIHtcbiAgICAgICAgICBkaXNwbGF5Om5vbmU7XG4gICAgICAgIH1cbiAgICAgICAgQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XG5cbiAgICAgICAgLmltYWdlLWxvZ28ge1xuICAgICAgICAgIG1heC13aWR0aDozNyU7XG4gICAgICAgIH1cbiAgICAgICAgICAuY292ZXIgLnJvdyB7XG4gICAgICAgICAgICBoZWlnaHQ6IDU2MHB4O1xuICAgICAgICAgICAgcGFkZGluZy10b3A6IHZhcigtLXBhZGRpbmctdG9wKTtcbiAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAzMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAuaW5mbyB7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAuZGVzY3JpcHRpb246YWZ0ZXIge1xuICAgICAgICAgICAgY29udGVudDogXCJcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBAbWVkaWEobWF4LXdpZHRoOjc2OHB4KXtcbiAgICAgICAgLmNvdmVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHsgcG9zdGVyVXJsfSk7XG4gICAgICAgIH1cbiAgICAgICAgICAuYnV0dG9ucyB7XG4gICAgICAgICAgICBkaXNwbGF5Om5vbmUhaW1wb3J0YW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICBoMSB7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICBmb250LXNpemU6IDE4cHg7XG4gICAgICAgICAgICBwYWRkaW5nOiAxNjFweCAwcHggMThweCAwcHg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5oZWFkaW5nIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IC0xOXB4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAuY29udGFpbmVyLWZsdWlkLCAuY29udGFpbmVyLXNtLCAuY29udGFpbmVyLW1kLCAuY29udGFpbmVyLWxnLCAuY29udGFpbmVyLXhsIHtcbiAgICAgICAgICAgIHdpZHRoOiA5MCU7XG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4O1xuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAtMTNweDtcbiAgICAgICAgICAgfVxuXG4gICAgICAgICAgIGgzIHtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogOHB4O1xuICAgICAgICAgICAgZm9udC1zaXplOiAyMnB4O1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICAgICAgICAgfVxuXG4gICAgICAgICAgLmhlYWRlci1lbnRyZXtcbiAgICAgICAgICAgYmFja2dyb3VuZDojMDkwYTBhOztcbiAgICAgICAgICAgZGlzcGxheTpibG9jaztcbiAgICAgICAgICAgbWFyZ2luLXRvcDogMzAlO1xuICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBgIH08L3N0eWxlPlxuICAgIDwvZGl2ID5cblxuICApXG59XG5cbmNvbnN0IEhNZWRpYUNhcmQgPSAoeyBjYXRlZ29yeSwgbWVkaWEgfSkgPT4ge1xuICBjb25zdCB7IHRpdGxlIH0gPSBtZWRpYVxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiaC1tZWRpYS1jYXJkIHJvd1wiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbWQtNFwiPlxuICAgICAgICA8TWVkaWFMaW5rIHdhdGNoIHsuLi57IGNhdGVnb3J5LCBtZWRpYSB9fT5cbiAgICAgICAgICA8YT5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaW1nLWZsdWlkIHctMTAwIGQtYmxvY2tcIlxuICAgICAgICAgICAgICBoZWlnaHQ9XCIyMjBcIlxuICAgICAgICAgICAgICBzcmM9e21lZGlhLnRodW1ibmFpbDJfdXJsID8gbWVkaWEudGh1bWJuYWlsMl91cmwgOiAnLy9wbGFjZWhvbGQuanAvMzkweDIyMC5wbmcnfVxuICAgICAgICAgICAgICB3aWR0aD1cIjM5MFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9NZWRpYUxpbms+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLW1kLTVcIj5cbiAgICAgICAgPGgzIGNsYXNzTmFtZT1cImgzXCI+XG4gICAgICAgICAgPE1lZGlhTGluayB3YXRjaCB7Li4ueyBjYXRlZ29yeSwgbWVkaWEgfX0+XG4gICAgICAgICAgICA8YT57dGl0bGV9PC9hPlxuICAgICAgICAgIDwvTWVkaWFMaW5rPlxuICAgICAgICA8L2gzPlxuICAgICAgICB7bWVkaWEuZGV0YWlsICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICA8cD57bWVkaWEuZGV0YWlsfTwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAuaC1tZWRpYS1jYXJkIHtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgICAgICB9XG4gICAgICAgIC5oLW1lZGlhLWNhcmQgYSB7XG4gICAgICAgICAgY29sb3I6IHZhcigtLXdoaXRlKTtcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgIH1cbiAgICAgICAgLmgtbWVkaWEtY2FyZCBpbWcge1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XG4gICAgICAgIH1cbiAgICAgICAgLmgzIHtcbiAgICAgICAgICBmb250LXNpemU6IGluaGVyaXQ7XG4gICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgICAgbWFyZ2luLXRvcDogMTVweDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICAgICAgICB9XG4gICAgICAgIC5oMyBhOmZvY3VzLFxuICAgICAgICAuaDMgYTpob3ZlciB7XG4gICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gICAgICAgIH1cbiAgICAgICAgLmRlc2NyaXB0aW9uIHtcbiAgICAgICAgICBjb2xvcjogdmFyKC0tZGVzY3JpcHRpb25zLWNvbG9yKTtcbiAgICAgICAgICBmb250LXNpemU6IDE1cHg7XG4gICAgICAgIH1cbiAgICAgICAgQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gICAgICAgICAgLmgtbWVkaWEtY2FyZCB7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA0NXB4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAuaC1tZWRpYS1jYXJkIGltZyB7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYCB9PC9zdHlsZT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5cbmNvbnN0IE1vcmUgPSAoeyBjYXRlZ29yeSwgcmVsYXRlZDogbWVkaWFzIH0pID0+IHtcbiAgY29uc3QgeyBuYW1lOiBjYXRlZ29yeU5hbWUgfSA9IGNhdGVnb3J5XG4gIGNvbnN0IHRoZW1lID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpXG4gIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IENvbG9yKHRoZW1lLmNvbG9ycy5iYWNrZ3JvdW5kKS5oc2woKS5zdHJpbmcoKVxuICBjb25zdCBbZGlzcGxheSwgc2V0RGlzcGxheV0gPSB1c2VTdGF0ZShcIm5vbmVcIilcblxuICBmdW5jdGlvbiB2aXNpYmxlKCkge1xuXG4gICAgaWYgKGRpc3BsYXkgPT0gXCJibG9ja1wiKSB7XG4gICAgICBzZXREaXNwbGF5KFwibm9uZVwiKVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXREaXNwbGF5KFwiYmxvY2tcIilcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuXG4gICAgPD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaXNfdmlzaXZlbFwiPlxuICAgICAgICA8YSBvbkNsaWNrPXsoKSA9PiB2aXNpYmxlKCl9IGNsYXNzTmFtZT1cImJ0bi1tYXMgYnRuLXByaW1hcnlcIj5WZXIgTcOhczwvYT5cbiAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgIC5pc192aXNpdmVsIHtcbiAgICAgICAgICAgIGRpc3BsYXk6bm9uZTtcbiAgICAgICAgICAgIHBhZGRpbmc6MjRweDtcbiAgICAgICAgICB9XG4gICAgICAgICBAbWVkaWEgKG1heC13aWR0aDo3NjhweCkge1xuICAgICAgICAgICAuaXNfdmlzaXZlbCB7XG4gICAgICAgICAgICAgZGlzcGxheTpmbGV4O1xuICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICB9XG4gICAgICAgICAgIC5idG4tbWFzIHtcbiAgICAgICAgICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnkpO1xuICAgICAgICAgICAgIGJvcmRlcjowcHg7XG4gICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICAgICAgIHBhZGRpbmc6IDVweDtcbiAgICAgICAgICAgICB3aWR0aDogMjglO1xuICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgIH1cbiAgICAgICAgIH1cblxuXG4gICAgICBgIH08L3N0eWxlPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9yZSBjb250YWluZXItZmx1aWRcIj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sIG9mZnNldC1tZC0xXCI+XG4gICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwiaDIgdGV4dC11cHBlcmNhc2VcIj5Nw6FzIHtjYXRlZ29yeU5hbWV9PC9oMj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZHNcIj5cbiAgICAgICAgICB7bWVkaWFzLm1hcCgobWVkaWEsIGkpID0+IChcbiAgICAgICAgICAgIDxITWVkaWFDYXJkIGtleT17aX0gey4uLnsgY2F0ZWdvcnksIG1lZGlhIH19IC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIC5tb3JlIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyBiYWNrZ3JvdW5kQ29sb3J9O1xuICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMS41O1xuICAgICAgICAgIHBhZGRpbmctdG9wOiAzMHB4O1xuICAgICAgICB9XG4gICAgICAgIC5oMiB7XG4gICAgICAgICAgZm9udC1zaXplOiAzMHB4O1xuICAgICAgICAgIG1hcmdpbi10b3A6IDA7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLmNhcmRzIHtcbiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICB9XG4gICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOjc2OHB4KSB7XG4gICAgICAgICAgLm1vcmUge1xuICAgICAgICAgICAgcGFkZGluZy10b3A6IDQ1cHg7XG4gICAgICAgICAgfVxuXG5cbiAgICAgICAgICAuaDIge1xuICAgICAgICAgICAgZm9udC1zaXplOiAzMXB4O1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNjBweDtcbiAgICAgICAgICAgIGRpc3BsYXk6bm9uZTtcblxuICAgICAgICAgIH1cbiAgICAgICAgICAuY2FyZHMge1xuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA0JTtcblxuXG4gICAgICAgICAgfVxuICAgICAgICAgIC5jb250YWluZXItZmx1aWQge1xuICAgICAgICAgICAgZGlzcGxheTpmbGV4O1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OmNlbnRlcjtcbiAgICAgICAgICAgICAgZGlzcGxheTogJHsgZGlzcGxheX07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBgIH08L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgPC8+XG5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aEFwaShNZWRpYVBhZ2UxKVxuIl19 */\\n/*@ sourceURL=/Users/rafael/Projects/somosgad/dale/pages/media/[slug].js */\"))));\n};\n\n_s2(More, \"d/4ydzBqmTO/fTd1zT1A6dX8QXU=\");\n\n_c4 = More;\n/* harmony default export */ __webpack_exports__[\"default\"] = (_c5 = Object(_components_withApi__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(MediaPage1));\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"MediaPage1\");\n$RefreshReg$(_c2, \"Cover\");\n$RefreshReg$(_c3, \"HMediaCard\");\n$RefreshReg$(_c4, \"More\");\n$RefreshReg$(_c5, \"%default%\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/next/node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/next/node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/media/[slug].js\n");

/***/ })

})