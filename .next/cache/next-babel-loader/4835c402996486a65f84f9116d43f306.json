{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import sleep from 'sleep-promise'\nimport Layout from '~/components/layout/Layout';\nimport FormGroup from '~/components/layout/AuthModal/FormGroup';\nimport Label from '~/components/layout/AuthModal/Label';\nimport Input from '~/components/layout/AuthModal/Input';\nimport { useContext, useState } from 'react';\nimport withAuth from '~/components/withAuth';\nimport { IS_PRODUCTION } from \"~/constants/constants\";\nimport UserContext from \"~/contexts/UserContext\";\nimport Select from \"~/components/Select/Select\";\nimport Loading from \"~/components/Loading/Loading\"; // import Address from \"~/pages/register/wizard/partials/address\"\n\nconst Address = ({\n  api,\n  error,\n  handleInputChange,\n  setValues,\n  loading,\n  requireds,\n  values\n}) => {\n  const argCountryId = 11;\n  const braCountryId = 32;\n  const chlCountryId = 48;\n  const {\n    country_id: countryId,\n    address_1st_level,\n    city,\n    address_3rd_level,\n    address\n  } = values;\n  const {\n    0: countries,\n    1: setCountries\n  } = useState();\n  useEffect(_ => {\n    (async _ => {\n      const {\n        data\n      } = await api.get('countries');\n      setCountries(data);\n    })();\n  }, []);\n\n  const handleCountryChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [name]: value,\n      address_1st_level: ''\n    }));\n  };\n\n  const firstLevelLabel = countryId == argCountryId ? 'Provincia' : countryId == braCountryId ? 'Estado' : countryId == chlCountryId ? 'RegiÃ³n' : 'State';\n  const firstLevelPluralLabel = countryId == argCountryId ? 'Provincias' : countryId == braCountryId ? 'Estados' : countryId == chlCountryId ? 'Regiones' : 'States';\n  const {\n    0: firstLevelList,\n    1: setFirstLevelList\n  } = useState();\n  useEffect(_ => {\n    (async _ => {\n      const parsedCountryId = parseInt(countryId);\n      const {\n        data: addresses\n      } = [argCountryId, braCountryId, chlCountryId].includes(parsedCountryId) ? await api.get('address-1st-levels', {\n        params: {\n          country_id: countryId\n        }\n      }) : {\n        data: null\n      };\n      setFirstLevelList(addresses);\n    })();\n  }, [countryId]);\n  const cityLabel = countryId == braCountryId ? 'Cidade' : countryId == chlCountryId ? 'Provincia' : 'Ciudad';\n  const thirdLevelLabel = countryId == chlCountryId ? 'Comuna' : 'District';\n  return __jsx(\"div\", {\n    className: \"address\"\n  }, __jsx(\"h3\", {\n    className: \"h3\"\n  }, \"Ubicaci\\xF3n\"), __jsx(SelectFormGroup, {\n    error: error,\n    label: \"Pa\\xEDs\",\n    loading: loading,\n    list: countries,\n    listMapValue: \"id\",\n    name: \"country_id\",\n    onChange: handleCountryChange,\n    pluralLabel: \"Pa\\xEDses\",\n    requireds: requireds,\n    value: countryId\n  }), [argCountryId, braCountryId, chlCountryId].map(id => id + '').includes(countryId) && __jsx(SelectFormGroup, {\n    error: error,\n    label: firstLevelLabel,\n    loading: loading,\n    list: firstLevelList,\n    listMapValue: \"id\",\n    name: \"address_1st_level\",\n    onChange: handleInputChange,\n    pluralLabel: firstLevelPluralLabel,\n    requireds: requireds,\n    value: address_1st_level\n  }), [braCountryId, chlCountryId].map(id => id + '').includes(countryId) && __jsx(FormGroup, null, __jsx(Label, {\n    htmlFor: \"city\"\n  }, cityLabel), __jsx(Input, {\n    id: \"city\",\n    name: \"city\",\n    onChange: handleInputChange,\n    required: requireds,\n    type: \"text\",\n    value: city\n  }), __jsx(InvalidFeedback, {\n    error: error,\n    loading: loading,\n    name: \"city\"\n  })), [chlCountryId].map(id => id + '').includes(countryId) && __jsx(FormGroup, null, __jsx(Label, {\n    htmlFor: \"address_3rd_level\"\n  }, thirdLevelLabel), __jsx(Input, {\n    id: \"address_3rd_level\",\n    name: \"address_3rd_level\",\n    onChange: handleInputChange,\n    required: requireds,\n    type: \"text\",\n    value: address_3rd_level\n  }), __jsx(InvalidFeedback, {\n    error: error,\n    loading: loading,\n    name: \"address_3rd_level\"\n  })), __jsx(FormGroup, null, __jsx(Label, {\n    htmlFor: \"address\"\n  }, \"Direcci\\xF3n\"), __jsx(Input, {\n    id: \"address\",\n    name: \"address\",\n    onChange: handleInputChange,\n    required: requireds,\n    type: \"text\",\n    value: address\n  }), __jsx(InvalidFeedback, {\n    error: error,\n    loading: loading,\n    name: \"address\"\n  })));\n};\n\nexport default withAuth(Address, true);","map":{"version":3,"sources":["/Users/rafael/Projects/somosgad/dale/pages/register/wizard/partials/address.js"],"names":["Layout","FormGroup","Label","Input","useContext","useState","withAuth","IS_PRODUCTION","UserContext","Select","Loading","Address","api","error","handleInputChange","setValues","loading","requireds","values","argCountryId","braCountryId","chlCountryId","country_id","countryId","address_1st_level","city","address_3rd_level","address","countries","setCountries","useEffect","_","data","get","handleCountryChange","e","name","value","target","firstLevelLabel","firstLevelPluralLabel","firstLevelList","setFirstLevelList","parsedCountryId","parseInt","addresses","includes","params","cityLabel","thirdLevelLabel","map","id"],"mappings":"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","sourcesContent":["// import sleep from 'sleep-promise'\nimport Layout from '~/components/layout/Layout'\nimport FormGroup from '~/components/layout/AuthModal/FormGroup'\nimport Label from '~/components/layout/AuthModal/Label'\nimport Input from '~/components/layout/AuthModal/Input'\nimport { useContext, useState } from 'react'\nimport withAuth from '~/components/withAuth'\nimport { IS_PRODUCTION } from \"~/constants/constants\";\nimport UserContext from \"~/contexts/UserContext\";\nimport Select from \"~/components/Select/Select\";\nimport Loading from \"~/components/Loading/Loading\";\n// import Address from \"~/pages/register/wizard/partials/address\"\n\nconst Address = ({\n                   api,\n                   error,\n                   handleInputChange,\n                   setValues,\n                   loading,\n                   requireds,\n                   values,\n                 }) => {\n\n  const argCountryId = 11\n  const braCountryId = 32\n  const chlCountryId = 48\n\n  const { country_id: countryId, address_1st_level, city, address_3rd_level, address } = values\n\n  const [ countries, setCountries ] = useState()\n\n  useEffect( _ => {\n    (async _ => {\n      const { data } = await api.get('countries')\n      setCountries(data)\n    })()\n  }, [])\n\n  const handleCountryChange = e => {\n    const { name, value } = e.target\n    setValues({\n      ...values,\n      [name]: value,\n      address_1st_level: '',\n    })\n  }\n\n  const firstLevelLabel = countryId == argCountryId ? 'Provincia' :\n    countryId == braCountryId ? 'Estado' :\n      countryId == chlCountryId ? 'RegiÃ³n' :\n        'State'\n\n  const firstLevelPluralLabel = countryId == argCountryId ? 'Provincias' :\n    countryId == braCountryId ? 'Estados' :\n      countryId == chlCountryId ? 'Regiones' :\n        'States'\n\n  const [ firstLevelList, setFirstLevelList ] = useState()\n\n  useEffect(_ => {\n    (async _ => {\n      const parsedCountryId = parseInt(countryId)\n      const { data: addresses } = [argCountryId, braCountryId, chlCountryId].includes(parsedCountryId) ?\n        await api.get('address-1st-levels', {\n          params: {\n            country_id: countryId,\n          },\n        }) : { data: null }\n      setFirstLevelList(addresses)\n    })()\n  }, [countryId])\n\n  const cityLabel = countryId == braCountryId ? 'Cidade' :\n    countryId == chlCountryId ? 'Provincia' :\n      'Ciudad'\n\n  const thirdLevelLabel = countryId == chlCountryId ? 'Comuna' : 'District'\n\n  return (\n    <div className=\"address\">\n      <h3 className=\"h3\">UbicaciÃ³n</h3>\n\n      {/* country */}\n      <SelectFormGroup\n        error={error}\n        label=\"PaÃ­s\"\n        loading={loading}\n        list={countries}\n        listMapValue=\"id\"\n        name=\"country_id\"\n        onChange={handleCountryChange}\n        pluralLabel=\"PaÃ­ses\"\n        requireds={requireds}\n        value={countryId}\n      />\n\n      {/* 1st level */}\n      {[argCountryId, braCountryId, chlCountryId].map(id => id+'').includes(countryId) && (\n        <SelectFormGroup\n          error={error}\n          label={firstLevelLabel}\n          loading={loading}\n          list={firstLevelList}\n          listMapValue=\"id\"\n          name=\"address_1st_level\"\n          onChange={handleInputChange}\n          pluralLabel={firstLevelPluralLabel}\n          requireds={requireds}\n          value={address_1st_level}\n        />\n      )}\n\n      {/* city */}\n      {[braCountryId, chlCountryId].map(id => id+'').includes(countryId) && (\n        <FormGroup>\n          <Label htmlFor=\"city\">{cityLabel}</Label>\n          <Input\n            id=\"city\"\n            name=\"city\"\n            onChange={handleInputChange}\n            required={requireds}\n            type=\"text\"\n            value={city}\n          />\n          <InvalidFeedback error={error} loading={loading} name=\"city\" />\n        </FormGroup>\n      )}\n\n      {/* 3rd level */}\n      {[chlCountryId].map(id => id+'').includes(countryId) && (\n        <FormGroup>\n          <Label htmlFor=\"address_3rd_level\">{thirdLevelLabel}</Label>\n          <Input\n            id=\"address_3rd_level\"\n            name=\"address_3rd_level\"\n            onChange={handleInputChange}\n            required={requireds}\n            type=\"text\"\n            value={address_3rd_level}\n          />\n          <InvalidFeedback error={error} loading={loading} name=\"address_3rd_level\" />\n        </FormGroup>\n      )}\n\n      <FormGroup>\n        <Label htmlFor=\"address\">DirecciÃ³n</Label>\n        <Input\n          id=\"address\"\n          name=\"address\"\n          onChange={handleInputChange}\n          required={requireds}\n          type=\"text\"\n          value={address}\n        />\n        <InvalidFeedback error={error} loading={loading} name=\"address\" />\n      </FormGroup>\n\n    </div>\n  )\n}\n\nexport default withAuth(Address, true);\n"]},"metadata":{},"sourceType":"module"}