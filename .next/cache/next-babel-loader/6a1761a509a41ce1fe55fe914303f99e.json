{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.baseURL = void 0;\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _auth = require(\"./auth\");\n\nvar _config = require(\"~/config\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst baseURL = _config.API_URL;\nexports.baseURL = baseURL;\nlet http, apiCtx, apiSignOut;\n\nconst api = (ctx, signOut) => {\n  if (!http) {\n    // client creation\n    http = _axios.default.create({\n      baseURL: `${baseURL}/api`\n    }); // request interceptor (before)\n\n    http.interceptors.request.use(async config => {\n      const accessToken = (0, _auth.getAccessToken)(apiCtx);\n      config.headers.Accept = 'application/json';\n\n      if (accessToken) {\n        config.headers.Authorization = `Bearer ${accessToken}`;\n      }\n\n      return config;\n    }); // response interceptor (after)\n\n    http.interceptors.response.use(response => {\n      // Any status code that lie within the range of 2xx cause this function to trigger\n      // Do something with response data\n      return response;\n    }, function (error) {\n      // if the request is unauthorized\n      const unauthorized = error.response && error.response.status === 401; // if it's a backend request\n\n      if (apiCtx && unauthorized) {\n        (0, _auth.backendLogout)(apiCtx); // if it's a front end request\n      } else if (unauthorized) {\n        (0, _auth.frontendLogout)(apiSignOut);\n      } // Any status codes that falls outside the range of 2xx cause this function to trigger\n      // Do something with response error\n\n\n      return Promise.reject(error);\n    });\n  }\n\n  apiCtx = ctx;\n  apiSignOut = signOut;\n  return http;\n};\n\nvar _default = api;\nexports.default = _default;","map":{"version":3,"sources":["/Users/rafael/Projects/somosgad/dale/services/api.js"],"names":["baseURL","API_URL","http","apiCtx","apiSignOut","api","ctx","signOut","axios","create","interceptors","request","use","config","accessToken","headers","Accept","Authorization","response","error","unauthorized","status","Promise","reject"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEO,MAAMA,OAAO,GAAGC,eAAhB;;AAEP,IAAIC,IAAJ,EAAUC,MAAV,EAAkBC,UAAlB;;AAEA,MAAMC,GAAG,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAE5B,MAAK,CAAEL,IAAP,EAAa;AAEX;AACAA,IAAAA,IAAI,GAAGM,eAAMC,MAAN,CAAa;AAClBT,MAAAA,OAAO,EAAG,GAAEA,OAAQ;AADF,KAAb,CAAP,CAHW,CAOX;;AACAE,IAAAA,IAAI,CAACQ,YAAL,CAAkBC,OAAlB,CAA0BC,GAA1B,CAA8B,MAAMC,MAAN,IAAgB;AAC5C,YAAMC,WAAW,GAAG,0BAAeX,MAAf,CAApB;AACAU,MAAAA,MAAM,CAACE,OAAP,CAAeC,MAAf,GAAwB,kBAAxB;;AACA,UAAIF,WAAJ,EAAiB;AACfD,QAAAA,MAAM,CAACE,OAAP,CAAeE,aAAf,GAAgC,UAASH,WAAY,EAArD;AACD;;AACD,aAAOD,MAAP;AACD,KAPD,EARW,CAiBX;;AACAX,IAAAA,IAAI,CAACQ,YAAL,CAAkBQ,QAAlB,CAA2BN,GAA3B,CAA+BM,QAAQ,IAAI;AAEzC;AACA;AACA,aAAOA,QAAP;AAED,KAND,EAMG,UAAUC,KAAV,EAAiB;AAElB;AACA,YAAMC,YAAY,GAAGD,KAAK,CAACD,QAAN,IAAkBC,KAAK,CAACD,QAAN,CAAeG,MAAf,KAA0B,GAAjE,CAHkB,CAKlB;;AACA,UAAIlB,MAAM,IAAIiB,YAAd,EAA4B;AAC1B,iCAAcjB,MAAd,EAD0B,CAG5B;AACC,OAJD,MAIO,IAAIiB,YAAJ,EAAkB;AACvB,kCAAehB,UAAf;AACD,OAZiB,CAclB;AACA;;;AACA,aAAOkB,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,KAvBD;AAyBD;;AAEDhB,EAAAA,MAAM,GAAGG,GAAT;AACAF,EAAAA,UAAU,GAAGG,OAAb;AAEA,SAAOL,IAAP;AACD,CAnDD;;eAqDeG,G","sourcesContent":["import axios from 'axios'\nimport { backendLogout, frontendLogout, getAccessToken } from './auth'\nimport { API_URL } from '~/config'\n\nexport const baseURL = API_URL\n\nlet http, apiCtx, apiSignOut\n\nconst api = (ctx, signOut) => {\n\n  if ( ! http) {\n\n    // client creation\n    http = axios.create({\n      baseURL: `${baseURL}/api`\n    })\n\n    // request interceptor (before)\n    http.interceptors.request.use(async config => {\n      const accessToken = getAccessToken(apiCtx)\n      config.headers.Accept = 'application/json'\n      if (accessToken) {\n        config.headers.Authorization = `Bearer ${accessToken}`\n      }\n      return config\n    })\n\n    // response interceptor (after)\n    http.interceptors.response.use(response => {\n\n      // Any status code that lie within the range of 2xx cause this function to trigger\n      // Do something with response data\n      return response\n\n    }, function (error) {\n\n      // if the request is unauthorized\n      const unauthorized = error.response && error.response.status === 401\n\n      // if it's a backend request\n      if (apiCtx && unauthorized) {\n        backendLogout(apiCtx)\n\n      // if it's a front end request\n      } else if (unauthorized) {\n        frontendLogout(apiSignOut)\n      }\n\n      // Any status codes that falls outside the range of 2xx cause this function to trigger\n      // Do something with response error\n      return Promise.reject(error)\n    })\n\n  }\n\n  apiCtx = ctx\n  apiSignOut = signOut\n\n  return http\n}\n\nexport default api\n"]},"metadata":{},"sourceType":"script"}