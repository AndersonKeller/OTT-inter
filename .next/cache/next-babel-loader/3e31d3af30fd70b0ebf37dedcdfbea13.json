{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport useScript, { ScriptStatus } from '@charlietango/use-script';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport nookies from 'nookies'; // import sleep from 'sleep-promise'\n\nimport { ThemeContext } from 'styled-components';\nimport Layout from '~/components/layout/Layout';\nimport { CONFIG } from '~/config';\nimport FormGroup from '~/components/layout/AuthModal/FormGroup';\nimport Label from '~/components/layout/AuthModal/Label';\nimport Input from '~/components/layout/AuthModal/Input';\nimport Button from '~/components/button';\nimport { useContext, useEffect, useState, useCallback } from 'react';\nimport UserContext from '~/contexts/UserContext';\nimport Packages from '~/components/Packages';\nimport Select from '~/components/Select/Select';\nimport { IS_PRODUCTION, HAS_WINDOW } from '~/constants/constants';\nimport withAuth from '~/components/withAuth';\nimport Loading from '~/components/Loading/Loading'; // page\n\nconst CompleteRegisterPage = ({\n  api,\n  layoutProps,\n  packages,\n  user\n}) => {\n  const [ready, status] = useScript('https://js.paymentsos.com/v2/latest/secure-fields.min.js');\n  const POS = ready && HAS_WINDOW ? window.POS : null;\n  const payUEnv = 'test';\n  const businessUnitPublicKey = '88985036-6530-4b5a-a7ec-c4e07ec07f6c';\n  const {\n    0: isPayUReady,\n    1: setIsPayUReady\n  } = useState(false);\n  const POSStyle = {\n    base: {\n      borderRadius: '.15rem',\n      backgroundColor: 'white',\n      height: 'calc(1.5em + .75rem + 2px)',\n      fontSize: '12px',\n      padding: '0px 3px',\n      marginLeft: '5px',\n      cardImage: {\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 0,\n        margin: 0\n      },\n      pan: {\n        width: '160px',\n        borderTopLeftRadius: 0,\n        borderBottomLeftRadius: 0,\n        marginLeft: 0\n      },\n      expirationDate: {\n        width: '47px'\n      },\n      secureFields: {\n        left: '40px'\n      },\n      cvv: {\n        width: '35px'\n      }\n    }\n  };\n\n  if (status === ScriptStatus.ERROR) {\n    console.log('Failed to load POS API');\n  }\n\n  useEffect(_ => {\n    if (POS) {\n      POS.setPublicKey(businessUnitPublicKey);\n      POS.setEnvironment(payUEnv);\n      POS.setStyle(POSStyle);\n      POS.setCardNumberPlaceholder('Tarjeta de cr√©dito');\n      POS.setExpirationDatePlaceholder('MM/AA');\n      setIsPayUReady(true);\n    }\n  }, [POS]);\n  return __jsx(Layout, layoutProps, __jsx(Head, null, __jsx(\"title\", {\n    className: \"jsx-674601483\"\n  }, \"Confirmaci\\xF3n < Registro < \", CONFIG.appName)), __jsx(\"div\", {\n    className: \"jsx-674601483\" + \" \" + \"rgpage container-fluid\"\n  }, __jsx(\"div\", {\n    className: \"jsx-674601483\" + \" \" + \"row\"\n  }, __jsx(\"div\", {\n    className: \"jsx-674601483\" + \" \" + \"col-xl-8 offset-xl-2\"\n  }, __jsx(\"h1\", {\n    className: \"jsx-674601483\" + \" \" + \"h2\"\n  }, \"Completa tu registro\"), __jsx(CompleteRegisterForm, {\n    api,\n    isPayUReady,\n    packages,\n    POS\n  })))), __jsx(_JSXStyle, {\n    id: \"674601483\"\n  }, \".rgpage.jsx-674601483{padding-top:40px;padding-bottom:120px;}.h2.jsx-674601483{margin-bottom:10px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/rafael/Projects/somosgad/dale/pages/register/complete.js */\"));\n};\n\nconst CompleteRegisterForm = ({\n  api,\n  isPayUReady,\n  packages,\n  POS\n}) => {\n  const {\n    id: free_package_id\n  } = packages.items.find(item => item.amount == 0) || {};\n  const debug = false && !IS_PRODUCTION;\n  const requireds = IS_PRODUCTION;\n  const {\n    user,\n    updateUser\n  } = useContext(UserContext);\n  const {\n    0: genders,\n    1: setGenders\n  } = useState();\n  const {\n    0: discounts,\n    1: setDiscounts\n  } = useState(false);\n  const {\n    0: blockDiscountFields,\n    1: setBlockDiscountFields\n  } = useState(false);\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    name: '',\n    gender_id: '',\n    document: '',\n    country_id: '',\n    address_1st_level: '',\n    city: '',\n    address_3rd_level: '',\n    address: '',\n    package_id: '',\n    payment_method_id: null,\n    payment_os: null,\n    cash_payment_method_id: null,\n    terms: null,\n    discount_id: null\n  });\n  const {\n    0: loading,\n    1: setLoading\n  } = useState();\n  const {\n    0: error,\n    1: setError\n  } = useState();\n  /* get genders */\n\n  useEffect(_ => {\n    (async _ => {\n      const {\n        data\n      } = await api.get('genders');\n      setGenders(data);\n    })();\n  }, []);\n  /* get discounts */\n\n  useEffect(_ => {\n    (async _ => {\n      var {\n        data\n      } = await api.get('discounts');\n      data = data.map((disc, index) => {\n        disc.dsc_id = 'dsc_' + index;\n        return disc;\n      });\n      setDiscounts(data);\n    })();\n  }, []);\n  /* fill user form */\n\n  useEffect(_ => {\n    if (user) {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        name: user.name,\n        gender_id: user.gender_id ? user.gender_id : '',\n        document: user.document ? user.document : '',\n        address: user.address ? user.address : '',\n        city: user.city ? user.city : '',\n        country_id: user.country_id ? user.country_id : '',\n        package_id: user.package_id_intention ? user.package_id_intention : ''\n      }));\n    }\n  }, [user]);\n  /* handle general input change */\n\n  const handleInputChange = e => {\n    const {\n      checked,\n      name,\n      value,\n      type\n    } = e.target;\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [name]: type === 'checkbox' ? checked ? value === 'true' ? true : value : false : value\n    }));\n  };\n  /* handle disocunt change */\n\n\n  const handleDiscountChange = async ({\n    target: {\n      name,\n      value,\n      id\n    }\n  }) => {\n    let valid = await checkDiscount(value); // console.table(valid)\n\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [name]: value,\n      discount_id: valid ? id : null\n    }));\n  };\n  /* handle discount change */\n\n\n  const checkDiscount = async supporterCode => {\n    // Simulate API Call\n    const prom = (delay, value) => new Promise(resolve => setTimeout(resolve, delay, value));\n\n    return await prom(50, supporterCode.length === 5);\n  };\n  /* handle package change */\n\n\n  const onPackageChange = useCallback(e => {\n    const package_id = parseInt(e.target.value, 10);\n    setValues(oldValues => _objectSpread(_objectSpread({}, oldValues), {}, {\n      package_id,\n      payment_method_id: package_id === free_package_id ? null : values.payment_method_id\n    }));\n  }, []);\n  /* handle payment method change */\n\n  function onPaymentChange(e) {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      payment_method_id: parseInt(e.target.value, 10),\n      cash_payment_method_id: null\n    }));\n  }\n\n  function onCashPaymentMethodChange(e) {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      cash_payment_method_id: parseInt(e.target.value, 10)\n    }));\n  }\n  /* token */\n\n\n  async function createToken() {\n    const promise = new Promise((resolve, reject) => {\n      const additionalData = {\n        holder_name: document.getElementById('cardholder-name').value // custom_data: document.getElementById('custom').value,\n\n      };\n      POS.createToken(additionalData, result => {\n        const json = JSON.parse(result);\n        console.log('json', json);\n        json.token ? resolve(json) : reject(json);\n      });\n    });\n    return promise;\n  } // is card payment\n\n\n  const credit_card_id = 1;\n  const debit_card_id = 2;\n  const isCardPayment = [credit_card_id, debit_card_id].includes(values.payment_method_id);\n  /* submit */\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError(false);\n\n    try {\n      const paymentData = values.package_id && values.package_id !== free_package_id && values.payment_method_id && isCardPayment ? await createToken() : null;\n\n      const data = _objectSpread(_objectSpread({}, values), {}, {\n        payment_os: paymentData\n      });\n\n      if (data.country_id === '') {\n        delete data.country_id;\n      }\n\n      if (data.address_1st_level === '') {\n        delete data.address_1st_level;\n      }\n\n      if (data.address_3rd_level === '') {\n        delete data.address_3rd_level;\n      }\n\n      try {\n        const {\n          data: {\n            user,\n            order\n          }\n        } = await api.post('register/complete', data);\n        updateUser(user);\n\n        if (order) {\n          Router.push({\n            pathname: '/register/confirm',\n            query: {\n              download_link: order.download_link,\n              link: order.link\n            }\n          }, '/register/confirm');\n        } else {\n          Router.push('/');\n        }\n      } catch (error) {\n        if (error.response) {\n          const {\n            data,\n            status\n          } = error.response;\n\n          if (status === 422) {\n            setError(data);\n          }\n        } else if (error.request) {\n          setError(error);\n        } else {\n          setError(error);\n        }\n      }\n    } catch (error) {\n      setError(error.description ? {\n        errors: {\n          payment_os: error.description\n        }\n      } : error);\n    }\n\n    setLoading(false);\n  };\n\n  return __jsx(\"form\", {\n    method: \"post\",\n    onSubmit: handleSubmit,\n    className: \"jsx-1643220738\"\n  }, error && error.message && __jsx(\"div\", {\n    className: \"jsx-1643220738\" + \" \" + \"invalid-feedback\"\n  }, error.message), debug && __jsx(\"pre\", {\n    style: {\n      color: '#fff'\n    },\n    className: \"jsx-1643220738\"\n  }, JSON.stringify(values, null, 2)), __jsx(\"div\", {\n    className: \"jsx-1643220738\" + \" \" + \"row\"\n  }, __jsx(\"div\", {\n    className: \"jsx-1643220738\" + \" \" + \"col-md-6\"\n  }, __jsx(\"div\", {\n    className: \"jsx-1643220738\" + \" \" + \"data\"\n  }, __jsx(\"h3\", {\n    className: \"jsx-1643220738\" + \" \" + \"h3\"\n  }, \"Tus datos\"), __jsx(FormGroup, null, __jsx(Label, {\n    htmlFor: \"name\"\n  }, \"Nombre completo\"), __jsx(Input, {\n    id: \"name\",\n    name: \"name\",\n    onChange: handleInputChange,\n    required: requireds,\n    value: values.name\n  }), __jsx(InvalidFeedback, {\n    error: error,\n    loading: loading,\n    name: \"name\"\n  })), __jsx(FormGroup, null, __jsx(Label, {\n    htmlFor: \"gender_id\"\n  }, \"G\\xE9nero\"), __jsx(Select, {\n    id: \"gender_id\",\n    name: \"gender_id\",\n    onChange: handleInputChange,\n    required: requireds,\n    value: values.gender_id\n  }, !genders ? __jsx(\"option\", {\n    disabled: true,\n    value: \"\",\n    className: \"jsx-1643220738\"\n  }, \"Cargando...\") : genders.length ? __jsx(React.Fragment, null, __jsx(\"option\", {\n    disabled: true,\n    value: \"\",\n    className: \"jsx-1643220738\"\n  }, \"Selecciona tu g\\xE9nero\"), genders.map((genre, key) => __jsx(\"option\", _extends({\n    key\n  }, {\n    value: genre.id,\n    className: \"jsx-1643220738\"\n  }), genre.name))) : __jsx(\"option\", {\n    disabled: true,\n    value: \"\",\n    className: \"jsx-1643220738\"\n  }, \"Incapaz de cargar g\\xE9neros\")), __jsx(InvalidFeedback, {\n    error: error,\n    loading: loading,\n    name: \"gender_id\"\n  })), __jsx(FormGroup, null, __jsx(Label, {\n    htmlFor: \"document\"\n  }, \"Documento\"), __jsx(Input, {\n    id: \"document\",\n    name: \"document\",\n    onChange: handleInputChange,\n    required: requireds,\n    type: \"text\",\n    value: values.document\n  }), __jsx(InvalidFeedback, {\n    error: error,\n    loading: loading,\n    name: \"document\"\n  })), discounts && discounts.map(d => __jsx(FormGroup, {\n    key: d.id\n  }, __jsx(Label, {\n    htmlFor: d.dsc_id\n  }, d.name), __jsx(Input, {\n    disabled: discounts.find(disc => !['', undefined].includes(values[disc.dsc_id]) && disc.id != d.id),\n    id: d.id,\n    maxLength: 5,\n    name: d.dsc_id,\n    onChange: handleDiscountChange,\n    type: \"text\",\n    style: values.discount_id == d.id ? {\n      backgroundColor: 'rgb(206, 249, 206)'\n    } : {},\n    value: values[d.dsc_id] || '',\n    readOnly: blockDiscountFields\n  }), __jsx(\"div\", {\n    style: {\n      float: 'right',\n      paddingTop: '10px'\n    },\n    className: \"jsx-1643220738\"\n  }, __jsx(Loading, {\n    size: \"20\",\n    color: \"white\",\n    loadingState: values.discount_id == d.id && blockDiscountFields\n  })))))), __jsx(\"div\", {\n    className: \"jsx-1643220738\" + \" \" + \"col-md-6\"\n  }, __jsx(Address, {\n    api: api,\n    error: error,\n    handleInputChange: handleInputChange,\n    loading: loading,\n    requireds: requireds,\n    setValues: setValues,\n    values: values\n  }))), __jsx(Packages, {\n    error: packages.error ? packages.error : null,\n    items: packages.items ? packages.items : null,\n    onChange: onPackageChange,\n    package_id: values.package_id,\n    validationError: !loading && error && error.errors && error.errors.package_id,\n    discount_id: values.discount_id,\n    setBlockDiscountFields\n  }), values.package_id && values.package_id !== free_package_id && __jsx(Payment, {\n    api,\n    cash_payment_method_id: values.cash_payment_method_id,\n    error,\n    isCardPayment,\n    isPayUReady,\n    loading,\n    onCashPaymentMethodChange,\n    onChange: onPaymentChange,\n    payment_method_id: values.payment_method_id,\n    POS,\n    requireds,\n    validationError: !loading && error && error.errors && error.errors.payment_method_id\n  }), __jsx(\"div\", {\n    className: \"jsx-1643220738\" + \" \" + \"row align-items-center\"\n  }, __jsx(\"div\", {\n    className: \"jsx-1643220738\" + \" \" + \"col-md-6 offset-md-4\"\n  }, __jsx(\"label\", {\n    className: \"jsx-1643220738\" + \" \" + \"terms\"\n  }, __jsx(\"input\", {\n    checked: values.terms,\n    name: \"terms\",\n    onChange: handleInputChange,\n    required: requireds,\n    type: \"checkbox\",\n    value: `true`,\n    className: \"jsx-1643220738\"\n  }), __jsx(\"span\", {\n    className: \"jsx-1643220738\"\n  }, \"He le\\xEDdo y acepto \", __jsx(Link, {\n    href: \"/terminos-y-politicas\"\n  }, __jsx(\"a\", {\n    target: \"_blank\",\n    className: \"jsx-1643220738\"\n  }, \"el contrato\")), \" de \", CONFIG.appName)), __jsx(InvalidFeedback, {\n    error: error,\n    loading: loading,\n    name: \"terms\"\n  })), __jsx(\"div\", {\n    className: \"jsx-1643220738\" + \" \" + \"col-md-2 text-right\"\n  }, __jsx(Button, {\n    block: true,\n    color: \"secondary\",\n    disabled: loading,\n    type: \"submit\"\n  }, \"Enviar\"))), __jsx(_JSXStyle, {\n    id: \"1643220738\"\n  }, \".h3{font-size:20px;font-weight:bold;margin-bottom:10px;}hr.jsx-1643220738,.hr.jsx-1643220738{margin-top:0;margin-bottom:15px;}.terms.jsx-1643220738{font-size:18px;}.terms.jsx-1643220738 input.jsx-1643220738{margin-right:5px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/rafael/Projects/somosgad/dale/pages/register/complete.js */\"));\n};\n\nconst InvalidFeedback = ({\n  error,\n  loading,\n  name\n}) => {\n  return __jsx(React.Fragment, null, !loading && error && error.errors && error.errors[name] && __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, error.errors[name]));\n};\n\nconst SelectFormGroup = ({\n  error,\n  label,\n  list,\n  listMapValue = null,\n  loading,\n  name,\n  onChange,\n  pluralLabel,\n  requireds,\n  value\n}) => {\n  return __jsx(FormGroup, null, __jsx(Label, {\n    htmlFor: name\n  }, label), __jsx(Select, {\n    id: name,\n    name: name,\n    onChange: onChange,\n    required: requireds,\n    value: value\n  }, !list ? __jsx(\"option\", {\n    disabled: true,\n    value: \"\"\n  }, \"Cargando...\") : list.length ? __jsx(React.Fragment, null, __jsx(\"option\", {\n    disabled: true,\n    value: \"\"\n  }, \"Selecciona tu \", label.toLowerCase()), list.map((item, key) => {\n    const value = listMapValue ? item[listMapValue] : item;\n    const optionName = listMapValue ? item.name : item;\n    return __jsx(\"option\", {\n      key: key,\n      value: value\n    }, optionName);\n  })) : __jsx(\"option\", {\n    disabled: true,\n    value: \"\"\n  }, \"Incapaz de cargar \", pluralLabel)), __jsx(InvalidFeedback, {\n    error: error,\n    loading: loading,\n    name: name\n  }));\n};\n\nconst Address = ({\n  api,\n  error,\n  handleInputChange,\n  setValues,\n  loading,\n  requireds,\n  values\n}) => {\n  const argCountryId = 11;\n  const braCountryId = 32;\n  const chlCountryId = 48;\n  const {\n    country_id: countryId,\n    address_1st_level,\n    city,\n    address_3rd_level,\n    address\n  } = values;\n  const {\n    0: countries,\n    1: setCountries\n  } = useState();\n  useEffect(_ => {\n    (async _ => {\n      const {\n        data\n      } = await api.get('countries');\n      setCountries(data);\n    })();\n  }, []);\n\n  const handleCountryChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [name]: value,\n      address_1st_level: ''\n    }));\n  };\n\n  const firstLevelLabel = countryId == argCountryId ? 'Provincia' : countryId == braCountryId ? 'Estado' : countryId == chlCountryId ? 'Regi√≥n' : 'State';\n  const firstLevelPluralLabel = countryId == argCountryId ? 'Provincias' : countryId == braCountryId ? 'Estados' : countryId == chlCountryId ? 'Regiones' : 'States';\n  const {\n    0: firstLevelList,\n    1: setFirstLevelList\n  } = useState();\n  useEffect(_ => {\n    (async _ => {\n      const parsedCountryId = parseInt(countryId);\n      const {\n        data: addresses\n      } = [argCountryId, braCountryId, chlCountryId].includes(parsedCountryId) ? await api.get('address-1st-levels', {\n        params: {\n          country_id: countryId\n        }\n      }) : {\n        data: null\n      };\n      setFirstLevelList(addresses);\n    })();\n  }, [countryId]);\n  const cityLabel = countryId == braCountryId ? 'Cidade' : countryId == chlCountryId ? 'Provincia' : 'Ciudad';\n  const thirdLevelLabel = countryId == chlCountryId ? 'Comuna' : 'District';\n  return __jsx(\"div\", {\n    className: \"address\"\n  }, __jsx(\"h3\", {\n    className: \"h3\"\n  }, \"Ubicaci\\xF3n\"), __jsx(SelectFormGroup, {\n    error: error,\n    label: \"Pa\\xEDs\",\n    loading: loading,\n    list: countries,\n    listMapValue: \"id\",\n    name: \"country_id\",\n    onChange: handleCountryChange,\n    pluralLabel: \"Pa\\xEDses\",\n    requireds: requireds,\n    value: countryId\n  }), [argCountryId, braCountryId, chlCountryId].map(id => id + '').includes(countryId) && __jsx(SelectFormGroup, {\n    error: error,\n    label: firstLevelLabel,\n    loading: loading,\n    list: firstLevelList,\n    listMapValue: \"id\",\n    name: \"address_1st_level\",\n    onChange: handleInputChange,\n    pluralLabel: firstLevelPluralLabel,\n    requireds: requireds,\n    value: address_1st_level\n  }), [braCountryId, chlCountryId].map(id => id + '').includes(countryId) && __jsx(FormGroup, null, __jsx(Label, {\n    htmlFor: \"city\"\n  }, cityLabel), __jsx(Input, {\n    id: \"city\",\n    name: \"city\",\n    onChange: handleInputChange,\n    required: requireds,\n    type: \"text\",\n    value: city\n  }), __jsx(InvalidFeedback, {\n    error: error,\n    loading: loading,\n    name: \"city\"\n  })), [chlCountryId].map(id => id + '').includes(countryId) && __jsx(FormGroup, null, __jsx(Label, {\n    htmlFor: \"address_3rd_level\"\n  }, thirdLevelLabel), __jsx(Input, {\n    id: \"address_3rd_level\",\n    name: \"address_3rd_level\",\n    onChange: handleInputChange,\n    required: requireds,\n    type: \"text\",\n    value: address_3rd_level\n  }), __jsx(InvalidFeedback, {\n    error: error,\n    loading: loading,\n    name: \"address_3rd_level\"\n  })), __jsx(FormGroup, null, __jsx(Label, {\n    htmlFor: \"address\"\n  }, \"Direcci\\xF3n\"), __jsx(Input, {\n    id: \"address\",\n    name: \"address\",\n    onChange: handleInputChange,\n    required: requireds,\n    type: \"text\",\n    value: address\n  }), __jsx(InvalidFeedback, {\n    error: error,\n    loading: loading,\n    name: \"address\"\n  })));\n};\n\nconst Payment = ({\n  api,\n  cash_payment_method_id,\n  error,\n  isCardPayment,\n  isPayUReady,\n  loading,\n  onCashPaymentMethodChange,\n  onChange,\n  payment_method_id,\n  POS,\n  requireds,\n  validationError\n}) => {\n  // payment methods\n  const {\n    0: paymentMethods,\n    1: setPaymentMethods\n  } = useState(); // get payment methods\n\n  useEffect(_ => {\n    const getPaymentMethods = async _ => {\n      const {\n        data\n      } = await api.get('payment-methods');\n      setPaymentMethods(data);\n    };\n\n    getPaymentMethods();\n  }, []); // init card secure fields\n\n  useEffect(_ => {\n    if (isPayUReady && isCardPayment) {\n      POS.initSecureFields('card-secure-fields');\n    }\n  }, [isPayUReady, isCardPayment]); // cash payment methods\n\n  const {\n    0: cashPaymentMethods,\n    1: setCashPaymentMethods\n  } = useState(); // get cash payment methods\n\n  useEffect(_ => {\n    const getCashPaymentMethods = async _ => {\n      const {\n        data\n      } = await api.get('cash-payment-methods');\n      setCashPaymentMethods(data);\n    };\n\n    getCashPaymentMethods();\n  }, []);\n  return __jsx(\"div\", {\n    className: \"jsx-2298570347\" + \" \" + \"row\"\n  }, __jsx(\"div\", {\n    className: \"jsx-2298570347\" + \" \" + \"offset-md-2 col-md-8\"\n  }, __jsx(\"h3\", {\n    className: \"jsx-2298570347\" + \" \" + \"h3\"\n  }, \"Pago\"), __jsx(\"div\", {\n    className: \"jsx-2298570347\" + \" \" + \"row\"\n  }, __jsx(\"div\", {\n    className: \"jsx-2298570347\" + \" \" + \"col-md-6\"\n  }, __jsx(FormGroup, null, paymentMethods && paymentMethods.map((paymentMethod, key) => __jsx(InputRadio, {\n    key: key,\n    label: paymentMethod.name,\n    name: \"payment\",\n    onChange: onChange,\n    state: payment_method_id,\n    value: paymentMethod.id\n  })), validationError && __jsx(\"div\", {\n    className: \"jsx-2298570347\" + \" \" + \"invalid-feedback\"\n  }, validationError))), __jsx(\"div\", {\n    className: \"jsx-2298570347\" + \" \" + \"col-md-6\"\n  }, isCardPayment ? __jsx(\"div\", {\n    className: \"jsx-2298570347\" + \" \" + \"card-inputs\"\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    htmlFor: \"cardholder-name\"\n  }, \"Nombre impreso en tarjeta\"), __jsx(Input, {\n    id: \"cardholder-name\",\n    name: \"cardholder-name\",\n    required: requireds,\n    type: \"text\"\n  })), __jsx(FormGroup, null, __jsx(\"div\", {\n    id: \"card-secure-fields\",\n    className: \"jsx-2298570347\"\n  }), __jsx(InvalidFeedback, {\n    error: error,\n    loading: loading,\n    name: \"payment_os\"\n  }))) // cash payment methods\n  : payment_method_id === 3 && __jsx(FormGroup, null, cashPaymentMethods == null ? __jsx(\"p\", {\n    className: \"jsx-2298570347\"\n  }, \"Cargando...\") : cashPaymentMethods.length ? cashPaymentMethods.map((item, key) => __jsx(InputRadio, {\n    key: key,\n    label: item.name,\n    name: \"cash_payment_method_id\",\n    onChange: onCashPaymentMethodChange,\n    state: cash_payment_method_id,\n    value: item.id\n  })) : __jsx(\"p\", {\n    className: \"jsx-2298570347\"\n  }, \"Sin m\\xE9todo de pago configurado.\"), __jsx(InvalidFeedback, {\n    error: error,\n    loading: loading,\n    name: \"cash_payment_method_id\"\n  }))))), __jsx(_JSXStyle, {\n    id: \"2298570347\"\n  }, \"@media (min-width:768px){.card-inputs.jsx-2298570347{margin-top:-21px;}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/rafael/Projects/somosgad/dale/pages/register/complete.js */\"));\n}; // Radio\n\n\nconst InputRadio = ({\n  label,\n  name,\n  onChange,\n  state,\n  value\n}) => {\n  const theme = useContext(ThemeContext);\n  const radioColor = theme.colors.background;\n  return __jsx(\"label\", {\n    className: _JSXStyle.dynamic([[\"204478922\", [radioColor]]])\n  }, __jsx(\"input\", _extends({\n    checked: state === value,\n    type: \"radio\"\n  }, {\n    name,\n    onChange,\n    value\n  }, {\n    className: _JSXStyle.dynamic([[\"204478922\", [radioColor]]])\n  })), __jsx(\"span\", {\n    className: _JSXStyle.dynamic([[\"204478922\", [radioColor]]]) + \" \" + \"fake-input\"\n  }, __jsx(\"span\", {\n    className: _JSXStyle.dynamic([[\"204478922\", [radioColor]]]) + \" \" + \"fake-radio\"\n  }), __jsx(\"span\", {\n    className: _JSXStyle.dynamic([[\"204478922\", [radioColor]]])\n  }, label)), __jsx(_JSXStyle, {\n    id: \"204478922\",\n    dynamic: [radioColor]\n  }, `label.__jsx-style-dynamic-selector{display:block;margin-bottom:5px;overflow:hidden;position:relative;}input.__jsx-style-dynamic-selector{opacity:0;position:absolute;}.fake-input.__jsx-style-dynamic-selector{border:2px solid var(--primary);border-radius:4px;display:block;font-size:1rem;line-height:1.4;padding:.375rem .75rem;-webkit-transition:background-color .3s,border-color .3s,color .3s;transition:background-color .3s,border-color .3s,color .3s;}.fake-radio.__jsx-style-dynamic-selector{background-color:var(--white);border:1px solid var(--gray2);border-radius:50%;display:inline-block;height:15px;margin-right:7.5px;padding:1px;vertical-align:-2px;width:15px;}.fake-radio.__jsx-style-dynamic-selector::before{background-color:${radioColor};border-radius:50%;content:'';display:block;opacity:0;height:100%;-webkit-transition:opacity .3s;transition:opacity .3s;width:100%;}input.__jsx-style-dynamic-selector:checked+.fake-input.__jsx-style-dynamic-selector{background-color:var(--primary);color:white;}input.__jsx-style-dynamic-selector:checked+.fake-input.__jsx-style-dynamic-selector .fake-radio.__jsx-style-dynamic-selector::before{opacity:1;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWZhZWwvUHJvamVjdHMvc29tb3NnYWQvZGFsZS9wYWdlcy9yZWdpc3Rlci9jb21wbGV0ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2MEJrQixBQUd5QixBQU1KLEFBSXNCLEFBU0YsQUFXZ0IsQUFVZCxBQUl0QixVQXJDUSxBQXNDcEIsSUE1Q29CLGNBT3BCLEVBWWdDLEVBbEJkLEFBU0UsQUE4Qk4sWUFDZCxFQVhvQixFQTVCQSxFQVNKLFVBU0ksSUFSSCxBQW1CSixFQTVCYixTQTZCZ0IsR0FYTyxDQVJMLFVBb0JOLE1BbkJhLElBUVgsQUFZQSxZQVhPLEFBWUksT0FwQnNDLFlBU2pELFlBQ1Esb0JBQ1QsR0FVQSxRQVRiLEdBVUEsb0VBckJBIiwiZmlsZSI6Ii9Vc2Vycy9yYWZhZWwvUHJvamVjdHMvc29tb3NnYWQvZGFsZS9wYWdlcy9yZWdpc3Rlci9jb21wbGV0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1c2VTY3JpcHQsIHsgU2NyaXB0U3RhdHVzIH0gZnJvbSAnQGNoYXJsaWV0YW5nby91c2Utc2NyaXB0J1xuaW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJ1xuaW1wb3J0IExpbmsgZnJvbSAnbmV4dC9saW5rJ1xuaW1wb3J0IFJvdXRlciBmcm9tICduZXh0L3JvdXRlcidcbmltcG9ydCBub29raWVzIGZyb20gJ25vb2tpZXMnXG4vLyBpbXBvcnQgc2xlZXAgZnJvbSAnc2xlZXAtcHJvbWlzZSdcbmltcG9ydCB7IFRoZW1lQ29udGV4dCB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IExheW91dCBmcm9tICd+L2NvbXBvbmVudHMvbGF5b3V0L0xheW91dCdcbmltcG9ydCB7IENPTkZJRyB9IGZyb20gJ34vY29uZmlnJ1xuaW1wb3J0IEZvcm1Hcm91cCBmcm9tICd+L2NvbXBvbmVudHMvbGF5b3V0L0F1dGhNb2RhbC9Gb3JtR3JvdXAnXG5pbXBvcnQgTGFiZWwgZnJvbSAnfi9jb21wb25lbnRzL2xheW91dC9BdXRoTW9kYWwvTGFiZWwnXG5pbXBvcnQgSW5wdXQgZnJvbSAnfi9jb21wb25lbnRzL2xheW91dC9BdXRoTW9kYWwvSW5wdXQnXG5pbXBvcnQgQnV0dG9uIGZyb20gJ34vY29tcG9uZW50cy9idXR0b24nXG5pbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFVzZXJDb250ZXh0IGZyb20gJ34vY29udGV4dHMvVXNlckNvbnRleHQnXG5pbXBvcnQgUGFja2FnZXMgZnJvbSAnfi9jb21wb25lbnRzL1BhY2thZ2VzJ1xuaW1wb3J0IFNlbGVjdCBmcm9tICd+L2NvbXBvbmVudHMvU2VsZWN0L1NlbGVjdCdcbmltcG9ydCB7IElTX1BST0RVQ1RJT04sIEhBU19XSU5ET1cgfSBmcm9tICd+L2NvbnN0YW50cy9jb25zdGFudHMnXG5pbXBvcnQgd2l0aEF1dGggZnJvbSAnfi9jb21wb25lbnRzL3dpdGhBdXRoJ1xuaW1wb3J0IExvYWRpbmcgZnJvbSAnfi9jb21wb25lbnRzL0xvYWRpbmcvTG9hZGluZydcblxuLy8gcGFnZVxuY29uc3QgQ29tcGxldGVSZWdpc3RlclBhZ2UgPSAoeyBhcGksIGxheW91dFByb3BzLCBwYWNrYWdlcywgdXNlciB9KSA9PiB7XG4gIGNvbnN0IFsgcmVhZHksIHN0YXR1cyBdID0gdXNlU2NyaXB0KCdodHRwczovL2pzLnBheW1lbnRzb3MuY29tL3YyL2xhdGVzdC9zZWN1cmUtZmllbGRzLm1pbi5qcycpXG4gIGNvbnN0IFBPUyA9IHJlYWR5ICYmIEhBU19XSU5ET1cgPyB3aW5kb3cuUE9TIDogbnVsbFxuICBjb25zdCBwYXlVRW52ID0gJ3Rlc3QnXG4gIGNvbnN0IGJ1c2luZXNzVW5pdFB1YmxpY0tleSA9ICc4ODk4NTAzNi02NTMwLTRiNWEtYTdlYy1jNGUwN2VjMDdmNmMnXG4gIGNvbnN0IFsgaXNQYXlVUmVhZHksIHNldElzUGF5VVJlYWR5IF0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgUE9TU3R5bGUgPSB7XG4gICAgYmFzZToge1xuICAgICAgYm9yZGVyUmFkaXVzOiAnLjE1cmVtJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgIGhlaWdodDogJ2NhbGMoMS41ZW0gKyAuNzVyZW0gKyAycHgpJyxcbiAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICBwYWRkaW5nOicwcHggM3B4JyxcbiAgICAgIG1hcmdpbkxlZnQ6ICc1cHgnLFxuICAgICAgY2FyZEltYWdlOiB7XG4gICAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAwLFxuICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogMCxcbiAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgfSxcbiAgICAgIHBhbjp7XG4gICAgICAgIHdpZHRoOicxNjBweCcsXG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IDAsXG4gICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IDAsXG4gICAgICAgIG1hcmdpbkxlZnQ6IDAsXG4gICAgICB9LFxuICAgICAgZXhwaXJhdGlvbkRhdGU6IHsgd2lkdGg6ICc0N3B4JyB9LFxuICAgICAgc2VjdXJlRmllbGRzOiB7IGxlZnQ6ICc0MHB4JyB9LFxuICAgICAgY3Z2OiB7IHdpZHRoOiAnMzVweCcgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0dXMgPT09IFNjcmlwdFN0YXR1cy5FUlJPUikge1xuICAgIGNvbnNvbGUubG9nKCdGYWlsZWQgdG8gbG9hZCBQT1MgQVBJJylcbiAgfVxuXG4gIHVzZUVmZmVjdChfID0+IHtcbiAgICBpZiAoUE9TKSB7XG4gICAgICBQT1Muc2V0UHVibGljS2V5KGJ1c2luZXNzVW5pdFB1YmxpY0tleSlcbiAgICAgIFBPUy5zZXRFbnZpcm9ubWVudChwYXlVRW52KVxuICAgICAgUE9TLnNldFN0eWxlKFBPU1N0eWxlKVxuICAgICAgUE9TLnNldENhcmROdW1iZXJQbGFjZWhvbGRlcignVGFyamV0YSBkZSBjcsOpZGl0bycpXG4gICAgICBQT1Muc2V0RXhwaXJhdGlvbkRhdGVQbGFjZWhvbGRlcignTU0vQUEnKTtcbiAgICAgIHNldElzUGF5VVJlYWR5KHRydWUpXG4gICAgfVxuICB9LCBbUE9TXSlcblxuICByZXR1cm4gKFxuICAgIDxMYXlvdXQgey4uLmxheW91dFByb3BzfT5cbiAgICAgIDxIZWFkPlxuICAgICAgICA8dGl0bGU+Q29uZmlybWFjacOzbiAmbHQ7IFJlZ2lzdHJvICZsdDsge0NPTkZJRy5hcHBOYW1lfTwvdGl0bGU+XG4gICAgICA8L0hlYWQ+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInJncGFnZSBjb250YWluZXItZmx1aWRcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC14bC04IG9mZnNldC14bC0yXCI+XG5cbiAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJoMlwiPkNvbXBsZXRhIHR1IHJlZ2lzdHJvPC9oMT5cblxuICAgICAgICAgICAgPENvbXBsZXRlUmVnaXN0ZXJGb3JtIHsuLi57YXBpLCBpc1BheVVSZWFkeSwgcGFja2FnZXMsIFBPU319IC8+XG5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLnJncGFnZSB7XG4gICAgICAgICAgcGFkZGluZy10b3A6IDQwcHg7XG4gICAgICAgICAgcGFkZGluZy1ib3R0b206IDEyMHB4O1xuICAgICAgICB9XG4gICAgICAgIC5oMiB7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgfVxuICAgICAgYH08L3N0eWxlPlxuICAgIDwvTGF5b3V0PlxuICApXG59XG5cbmNvbnN0IENvbXBsZXRlUmVnaXN0ZXJGb3JtID0gKHsgYXBpLCBpc1BheVVSZWFkeSwgcGFja2FnZXMsIFBPUyB9KSA9PiB7XG5cbiAgY29uc3QgeyBpZDogZnJlZV9wYWNrYWdlX2lkIH0gPSBwYWNrYWdlcy5pdGVtcy5maW5kKGl0ZW0gPT4gaXRlbS5hbW91bnQgPT0gMCkgfHwge31cblxuICBjb25zdCBkZWJ1ZyA9IGZhbHNlICYmICEgSVNfUFJPRFVDVElPTlxuICBjb25zdCByZXF1aXJlZHMgPSBJU19QUk9EVUNUSU9OXG5cbiAgY29uc3QgeyB1c2VyLCB1cGRhdGVVc2VyIH0gPSB1c2VDb250ZXh0KFVzZXJDb250ZXh0KVxuXG4gIGNvbnN0IFsgZ2VuZGVycywgc2V0R2VuZGVycyBdID0gdXNlU3RhdGUoKVxuICBjb25zdCBbIGRpc2NvdW50cywgc2V0RGlzY291bnRzIF0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgWyBibG9ja0Rpc2NvdW50RmllbGRzLCBzZXRCbG9ja0Rpc2NvdW50RmllbGRzIF0gPSB1c2VTdGF0ZShmYWxzZSlcblxuICBjb25zdCBbIHZhbHVlcywgc2V0VmFsdWVzIF0gPSB1c2VTdGF0ZSh7XG4gICAgbmFtZTogJycsXG4gICAgZ2VuZGVyX2lkOiAnJyxcbiAgICBkb2N1bWVudDogJycsXG4gICAgY291bnRyeV9pZDogJycsXG4gICAgYWRkcmVzc18xc3RfbGV2ZWw6ICcnLFxuICAgIGNpdHk6ICcnLFxuICAgIGFkZHJlc3NfM3JkX2xldmVsOiAnJyxcbiAgICBhZGRyZXNzOiAnJyxcbiAgICBwYWNrYWdlX2lkOiAnJyxcbiAgICBwYXltZW50X21ldGhvZF9pZDogbnVsbCxcbiAgICBwYXltZW50X29zOiBudWxsLFxuICAgIGNhc2hfcGF5bWVudF9tZXRob2RfaWQ6IG51bGwsXG4gICAgdGVybXM6IG51bGwsXG4gICAgZGlzY291bnRfaWQ6IG51bGwsXG4gIH0pXG5cbiAgY29uc3QgWyBsb2FkaW5nLCBzZXRMb2FkaW5nIF0gPSB1c2VTdGF0ZSgpXG4gIGNvbnN0IFsgZXJyb3IsIHNldEVycm9yIF0gPSB1c2VTdGF0ZSgpXG5cbiAgLyogZ2V0IGdlbmRlcnMgKi9cbiAgdXNlRWZmZWN0KF8gPT4ge1xuICAgIChhc3luYyBfID0+IHtcbiAgICAgIGNvbnN0IHtkYXRhfSA9IGF3YWl0IGFwaS5nZXQoJ2dlbmRlcnMnKVxuICAgICAgc2V0R2VuZGVycyhkYXRhKVxuICAgIH0pKClcbiAgfSwgW10pXG5cbiAgIC8qIGdldCBkaXNjb3VudHMgKi9cbiAgIHVzZUVmZmVjdChfID0+IHtcbiAgICAoYXN5bmMgXyA9PiB7XG4gICAgICB2YXIgeyBkYXRhIH0gPSBhd2FpdCBhcGkuZ2V0KCdkaXNjb3VudHMnKVxuXG4gICAgICBkYXRhID0gZGF0YS5tYXAoIChkaXNjLCBpbmRleCkgPT4ge1xuICAgICAgICBkaXNjLmRzY19pZCA9ICdkc2NfJyArIGluZGV4XG4gICAgICAgIHJldHVybiBkaXNjXG4gICAgICB9KVxuXG4gICAgICBzZXREaXNjb3VudHMoZGF0YSlcbiAgICB9KSgpXG4gIH0sIFtdKVxuXG4gIC8qIGZpbGwgdXNlciBmb3JtICovXG4gIHVzZUVmZmVjdChfID0+IHtcbiAgICBpZiAodXNlcikge1xuICAgICAgc2V0VmFsdWVzKHtcbiAgICAgICAgLi4udmFsdWVzLFxuICAgICAgICBuYW1lOiB1c2VyLm5hbWUsXG4gICAgICAgIGdlbmRlcl9pZDogdXNlci5nZW5kZXJfaWQgPyB1c2VyLmdlbmRlcl9pZCA6ICcnLFxuICAgICAgICBkb2N1bWVudDogdXNlci5kb2N1bWVudCA/IHVzZXIuZG9jdW1lbnQgOiAnJyxcbiAgICAgICAgYWRkcmVzczogdXNlci5hZGRyZXNzID8gdXNlci5hZGRyZXNzIDogJycsXG4gICAgICAgIGNpdHk6IHVzZXIuY2l0eSA/IHVzZXIuY2l0eSA6ICcnLFxuICAgICAgICBjb3VudHJ5X2lkOiB1c2VyLmNvdW50cnlfaWQgPyB1c2VyLmNvdW50cnlfaWQgOiAnJyxcbiAgICAgICAgcGFja2FnZV9pZDogdXNlci5wYWNrYWdlX2lkX2ludGVudGlvbiA/IHVzZXIucGFja2FnZV9pZF9pbnRlbnRpb24gOiAnJyxcbiAgICAgIH0pXG4gICAgfVxuICB9LCBbdXNlcl0pXG5cbiAgLyogaGFuZGxlIGdlbmVyYWwgaW5wdXQgY2hhbmdlICovXG4gIGNvbnN0IGhhbmRsZUlucHV0Q2hhbmdlID0gZSA9PiB7XG4gICAgY29uc3QgeyBjaGVja2VkLCBuYW1lLCB2YWx1ZSwgdHlwZSB9ID0gZS50YXJnZXRcbiAgICBzZXRWYWx1ZXMoe1xuICAgICAgLi4udmFsdWVzLFxuICAgICAgW25hbWVdOiB0eXBlID09PSAnY2hlY2tib3gnID9cbiAgICAgICAgKGNoZWNrZWQgPyAodmFsdWUgPT09ICd0cnVlJyA/IHRydWUgOiB2YWx1ZSkgOiBmYWxzZSkgOlxuICAgICAgICB2YWx1ZSxcbiAgICB9KVxuICB9XG5cbiAgLyogaGFuZGxlIGRpc29jdW50IGNoYW5nZSAqL1xuICBjb25zdCBoYW5kbGVEaXNjb3VudENoYW5nZSA9IGFzeW5jICh7dGFyZ2V0OnsgbmFtZSwgdmFsdWUsIGlkIH19KSA9PiB7XG5cbiAgICBsZXQgdmFsaWQgPSBhd2FpdCBjaGVja0Rpc2NvdW50KHZhbHVlKVxuICAgIC8vIGNvbnNvbGUudGFibGUodmFsaWQpXG5cbiAgICBzZXRWYWx1ZXMoe1xuICAgICAgLi4udmFsdWVzLFxuICAgICAgW25hbWVdOiB2YWx1ZSxcbiAgICAgIGRpc2NvdW50X2lkOiB2YWxpZCA/IGlkIDogbnVsbFxuICAgIH0pXG4gIH1cblxuICAvKiBoYW5kbGUgZGlzY291bnQgY2hhbmdlICovXG4gIGNvbnN0IGNoZWNrRGlzY291bnQgPSBhc3luYyBzdXBwb3J0ZXJDb2RlID0+IHtcblxuICAgIC8vIFNpbXVsYXRlIEFQSSBDYWxsXG4gICAgY29uc3QgcHJvbSA9IChkZWxheSwgdmFsdWUpID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSwgdmFsdWUpKVxuXG4gICAgcmV0dXJuIGF3YWl0IHByb20oNTAsIHN1cHBvcnRlckNvZGUubGVuZ3RoID09PSA1KVxuXG4gIH1cblxuICAvKiBoYW5kbGUgcGFja2FnZSBjaGFuZ2UgKi9cbiAgY29uc3Qgb25QYWNrYWdlQ2hhbmdlID0gdXNlQ2FsbGJhY2soIGUgPT4ge1xuICAgIGNvbnN0IHBhY2thZ2VfaWQgPSBwYXJzZUludChlLnRhcmdldC52YWx1ZSwgMTApXG4gICAgc2V0VmFsdWVzKCBvbGRWYWx1ZXMgPT4gKHtcbiAgICAgIC4uLm9sZFZhbHVlcyxcbiAgICAgIHBhY2thZ2VfaWQsXG4gICAgICBwYXltZW50X21ldGhvZF9pZDogcGFja2FnZV9pZCA9PT0gZnJlZV9wYWNrYWdlX2lkID8gbnVsbCA6IHZhbHVlcy5wYXltZW50X21ldGhvZF9pZCxcbiAgICB9KSlcbiAgfSxbXSlcblxuICAvKiBoYW5kbGUgcGF5bWVudCBtZXRob2QgY2hhbmdlICovXG4gIGZ1bmN0aW9uIG9uUGF5bWVudENoYW5nZShlKSB7XG4gICAgc2V0VmFsdWVzKHtcbiAgICAgIC4uLnZhbHVlcyxcbiAgICAgIHBheW1lbnRfbWV0aG9kX2lkOiBwYXJzZUludChlLnRhcmdldC52YWx1ZSwgMTApLFxuICAgICAgY2FzaF9wYXltZW50X21ldGhvZF9pZDogbnVsbCxcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gb25DYXNoUGF5bWVudE1ldGhvZENoYW5nZShlKSB7XG4gICAgc2V0VmFsdWVzKHtcbiAgICAgIC4uLnZhbHVlcyxcbiAgICAgIGNhc2hfcGF5bWVudF9tZXRob2RfaWQ6IHBhcnNlSW50KGUudGFyZ2V0LnZhbHVlLCAxMCksXG4gICAgfSlcbiAgfVxuXG4gIC8qIHRva2VuICovXG4gIGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVRva2VuKCkge1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBhZGRpdGlvbmFsRGF0YSA9IHtcbiAgICAgICAgaG9sZGVyX25hbWU6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYXJkaG9sZGVyLW5hbWUnKS52YWx1ZSxcbiAgICAgICAgLy8gY3VzdG9tX2RhdGE6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdXN0b20nKS52YWx1ZSxcbiAgICAgIH1cbiAgICAgIFBPUy5jcmVhdGVUb2tlbihhZGRpdGlvbmFsRGF0YSwgKHJlc3VsdCkgPT4ge1xuICAgICAgICBjb25zdCBqc29uID0gSlNPTi5wYXJzZShyZXN1bHQpXG4gICAgICAgIGNvbnNvbGUubG9nKCdqc29uJywganNvbilcbiAgICAgICAganNvbi50b2tlbiA/IHJlc29sdmUoanNvbikgOiByZWplY3QoanNvbilcbiAgICAgIH0pXG4gICAgfSlcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgLy8gaXMgY2FyZCBwYXltZW50XG4gIGNvbnN0IGNyZWRpdF9jYXJkX2lkID0gMVxuICBjb25zdCBkZWJpdF9jYXJkX2lkID0gMlxuICBjb25zdCBpc0NhcmRQYXltZW50ID0gW2NyZWRpdF9jYXJkX2lkLCBkZWJpdF9jYXJkX2lkXS5pbmNsdWRlcyh2YWx1ZXMucGF5bWVudF9tZXRob2RfaWQpXG5cbiAgLyogc3VibWl0ICovXG4gIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IGFzeW5jIGUgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIHNldExvYWRpbmcodHJ1ZSlcbiAgICBzZXRFcnJvcihmYWxzZSlcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGF5bWVudERhdGEgPSB2YWx1ZXMucGFja2FnZV9pZCAmJiB2YWx1ZXMucGFja2FnZV9pZCAhPT0gZnJlZV9wYWNrYWdlX2lkICYmXG4gICAgICAgIHZhbHVlcy5wYXltZW50X21ldGhvZF9pZCAmJiBpc0NhcmRQYXltZW50ID8gYXdhaXQgY3JlYXRlVG9rZW4oKSA6IG51bGxcbiAgICAgIGNvbnN0IGRhdGEgPSB7IC4uLnZhbHVlcywgcGF5bWVudF9vczogcGF5bWVudERhdGEgfVxuICAgICAgaWYgKGRhdGEuY291bnRyeV9pZCA9PT0gJycpIHtcbiAgICAgICAgZGVsZXRlIGRhdGEuY291bnRyeV9pZFxuICAgICAgfVxuICAgICAgaWYgKGRhdGEuYWRkcmVzc18xc3RfbGV2ZWwgPT09ICcnKSB7XG4gICAgICAgIGRlbGV0ZSBkYXRhLmFkZHJlc3NfMXN0X2xldmVsXG4gICAgICB9XG4gICAgICBpZiAoZGF0YS5hZGRyZXNzXzNyZF9sZXZlbCA9PT0gJycpIHtcbiAgICAgICAgZGVsZXRlIGRhdGEuYWRkcmVzc18zcmRfbGV2ZWxcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YTogeyB1c2VyLCBvcmRlciB9IH0gPSBhd2FpdCBhcGkucG9zdCgncmVnaXN0ZXIvY29tcGxldGUnLCBkYXRhKVxuICAgICAgICB1cGRhdGVVc2VyKHVzZXIpXG4gICAgICAgIGlmIChvcmRlcikge1xuICAgICAgICAgIFJvdXRlci5wdXNoKHtcbiAgICAgICAgICAgIHBhdGhuYW1lOiAnL3JlZ2lzdGVyL2NvbmZpcm0nLFxuICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgZG93bmxvYWRfbGluazogb3JkZXIuZG93bmxvYWRfbGluayxcbiAgICAgICAgICAgICAgbGluazogb3JkZXIubGluayxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSwgJy9yZWdpc3Rlci9jb25maXJtJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBSb3V0ZXIucHVzaCgnLycpXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvci5yZXNwb25zZSkge1xuICAgICAgICAgIGNvbnN0IHsgZGF0YSwgc3RhdHVzIH0gPSBlcnJvci5yZXNwb25zZVxuICAgICAgICAgIGlmIChzdGF0dXMgPT09IDQyMikge1xuICAgICAgICAgICAgc2V0RXJyb3IoZGF0YSlcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZXJyb3IucmVxdWVzdCkge1xuICAgICAgICAgIHNldEVycm9yKGVycm9yKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldEVycm9yKGVycm9yKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHNldEVycm9yKGVycm9yLmRlc2NyaXB0aW9uID8geyBlcnJvcnM6IHsgcGF5bWVudF9vczogZXJyb3IuZGVzY3JpcHRpb24gfSB9IDogZXJyb3IpXG4gICAgfVxuICAgIHNldExvYWRpbmcoZmFsc2UpXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxmb3JtIG1ldGhvZD1cInBvc3RcIiBvblN1Ym1pdD17aGFuZGxlU3VibWl0fT5cblxuICAgICAgey8qIG1haW4gZXJyb3IgbXNnICovfVxuICAgICAgeyBlcnJvciAmJiBlcnJvci5tZXNzYWdlICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnZhbGlkLWZlZWRiYWNrXCI+e2Vycm9yLm1lc3NhZ2V9PC9kaXY+XG4gICAgICApIH1cblxuICAgICAgey8qIGZvcm0gZGF0YSBkZWJ1ZyAqL31cbiAgICAgIHsgZGVidWcgJiYgKFxuICAgICAgICA8cHJlIHN0eWxlPXt7IGNvbG9yOiAnI2ZmZicgfX0+XG4gICAgICAgICAge0pTT04uc3RyaW5naWZ5KHZhbHVlcywgbnVsbCwgMil9XG4gICAgICAgIDwvcHJlPlxuICAgICAgKX1cblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1tZC02XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkYXRhXCI+XG5cbiAgICAgICAgICAgIHsvKiBoZWFkaW5nICovfVxuICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cImgzXCI+VHVzIGRhdG9zPC9oMz5cblxuICAgICAgICAgICAgey8qIG5hbWUgKi99XG4gICAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICA8TGFiZWwgaHRtbEZvcj1cIm5hbWVcIj5Ob21icmUgY29tcGxldG88L0xhYmVsPlxuICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICBpZD1cIm5hbWVcIlxuICAgICAgICAgICAgICAgIG5hbWU9XCJuYW1lXCJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ9e3JlcXVpcmVkc31cbiAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWVzLm5hbWV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxJbnZhbGlkRmVlZGJhY2sgZXJyb3I9e2Vycm9yfSBsb2FkaW5nPXtsb2FkaW5nfSBuYW1lPVwibmFtZVwiIC8+XG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD5cblxuICAgICAgICAgICAgey8qIGdlbnJlICovfVxuICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgPExhYmVsIGh0bWxGb3I9XCJnZW5kZXJfaWRcIj5Hw6luZXJvPC9MYWJlbD5cbiAgICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICAgIGlkPVwiZ2VuZGVyX2lkXCJcbiAgICAgICAgICAgICAgICBuYW1lPVwiZ2VuZGVyX2lkXCJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ9e3JlcXVpcmVkc31cbiAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWVzLmdlbmRlcl9pZH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHsgISBnZW5kZXJzID8gKFxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiBkaXNhYmxlZCB2YWx1ZT1cIlwiPkNhcmdhbmRvLi4uPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgKSA6IGdlbmRlcnMubGVuZ3RoID8gPD5cbiAgICAgICAgICAgICAgICAgIDxvcHRpb24gZGlzYWJsZWQgdmFsdWU9XCJcIj5TZWxlY2Npb25hIHR1IGfDqW5lcm88L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgIHsgZ2VuZGVycy5tYXAoKGdlbnJlLCBrZXkpID0+IChcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB7Li4ue2tleX19IHZhbHVlPXtnZW5yZS5pZH0+e2dlbnJlLm5hbWV9PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICA8Lz4gOiAoXG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIGRpc2FibGVkIHZhbHVlPVwiXCI+SW5jYXBheiBkZSBjYXJnYXIgZ8OpbmVyb3M8L29wdGlvbj5cbiAgICAgICAgICAgICAgICApIH1cbiAgICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICAgIDxJbnZhbGlkRmVlZGJhY2sgZXJyb3I9e2Vycm9yfSBsb2FkaW5nPXtsb2FkaW5nfSBuYW1lPVwiZ2VuZGVyX2lkXCIgLz5cbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuXG4gICAgICAgICAgICB7LyogZG9jdW1lbnQgKi99XG4gICAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICA8TGFiZWwgaHRtbEZvcj1cImRvY3VtZW50XCI+RG9jdW1lbnRvPC9MYWJlbD5cbiAgICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgICAgaWQ9XCJkb2N1bWVudFwiXG4gICAgICAgICAgICAgICAgbmFtZT1cImRvY3VtZW50XCJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ9e3JlcXVpcmVkc31cbiAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlcy5kb2N1bWVudH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPEludmFsaWRGZWVkYmFjayBlcnJvcj17ZXJyb3J9IGxvYWRpbmc9e2xvYWRpbmd9IG5hbWU9XCJkb2N1bWVudFwiIC8+XG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD5cblxuICAgICAgICAgICAge2Rpc2NvdW50cyAmJiBkaXNjb3VudHMubWFwKCBkID0+IChcbiAgICAgICAgICAgICAgPEZvcm1Hcm91cCBrZXk9e2QuaWR9PlxuICAgICAgICAgICAgICAgIDxMYWJlbCBodG1sRm9yPXtkLmRzY19pZH0+e2QubmFtZX08L0xhYmVsPlxuICAgICAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2NvdW50cy5maW5kKFxuICAgICAgICAgICAgICAgICAgICBkaXNjID0+ICghWycnLHVuZGVmaW5lZF0uaW5jbHVkZXModmFsdWVzW2Rpc2MuZHNjX2lkXSkgJiYgZGlzYy5pZCAhPSBkLmlkKVxuICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgIGlkPXtkLmlkfVxuICAgICAgICAgICAgICAgICAgbWF4TGVuZ3RoPXs1fVxuICAgICAgICAgICAgICAgICAgbmFtZT17ZC5kc2NfaWR9XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlRGlzY291bnRDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICBzdHlsZT17dmFsdWVzLmRpc2NvdW50X2lkID09IGQuaWQgPyB7YmFja2dyb3VuZENvbG9yOiAncmdiKDIwNiwgMjQ5LCAyMDYpJ30gOiB7fX1cbiAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZXNbZC5kc2NfaWRdIHx8ICcnfVxuICAgICAgICAgICAgICAgICAgcmVhZE9ubHk9e2Jsb2NrRGlzY291bnRGaWVsZHN9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7ZmxvYXQ6ICdyaWdodCcsIHBhZGRpbmdUb3A6JzEwcHgnfX0+XG4gICAgICAgICAgICAgICAgICA8TG9hZGluZyBzaXplPVwiMjBcIiBjb2xvcj1cIndoaXRlXCIgbG9hZGluZ1N0YXRlPXt2YWx1ZXMuZGlzY291bnRfaWQgPT0gZC5pZCAgJiYgYmxvY2tEaXNjb3VudEZpZWxkc30vPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICAgICkpfVxuXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIHsvKiBhZGRyZXNzICovfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1tZC02XCI+XG4gICAgICAgICAgPEFkZHJlc3NcbiAgICAgICAgICAgIGFwaT17YXBpfVxuICAgICAgICAgICAgZXJyb3I9e2Vycm9yfVxuICAgICAgICAgICAgaGFuZGxlSW5wdXRDaGFuZ2U9e2hhbmRsZUlucHV0Q2hhbmdlfVxuICAgICAgICAgICAgbG9hZGluZz17bG9hZGluZ31cbiAgICAgICAgICAgIHJlcXVpcmVkcz17cmVxdWlyZWRzfVxuICAgICAgICAgICAgc2V0VmFsdWVzPXtzZXRWYWx1ZXN9XG4gICAgICAgICAgICB2YWx1ZXM9e3ZhbHVlc31cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgPC9kaXY+XG5cbiAgICAgIHsvKiBwYWNrYWdlIHNlbGVjdGlvbiAqL31cbiAgICAgIDxQYWNrYWdlcyB7Li4ue1xuICAgICAgICBlcnJvcjogcGFja2FnZXMuZXJyb3IgPyBwYWNrYWdlcy5lcnJvciA6IG51bGwsXG4gICAgICAgIGl0ZW1zOiBwYWNrYWdlcy5pdGVtcyA/IHBhY2thZ2VzLml0ZW1zIDogbnVsbCxcbiAgICAgICAgb25DaGFuZ2U6IG9uUGFja2FnZUNoYW5nZSxcbiAgICAgICAgcGFja2FnZV9pZDogdmFsdWVzLnBhY2thZ2VfaWQsXG4gICAgICAgIHZhbGlkYXRpb25FcnJvcjogISBsb2FkaW5nICYmIGVycm9yICYmIGVycm9yLmVycm9ycyAmJiBlcnJvci5lcnJvcnMucGFja2FnZV9pZCxcbiAgICAgICAgZGlzY291bnRfaWQ6IHZhbHVlcy5kaXNjb3VudF9pZCxcbiAgICAgICAgc2V0QmxvY2tEaXNjb3VudEZpZWxkcyxcbiAgICAgIH19IC8+XG5cbiAgICAgIHsvKiBwYXltZW50ICovfVxuICAgICAgeyB2YWx1ZXMucGFja2FnZV9pZCAmJiB2YWx1ZXMucGFja2FnZV9pZCAhPT0gZnJlZV9wYWNrYWdlX2lkICYmIChcbiAgICAgICAgPFBheW1lbnQgey4uLntcbiAgICAgICAgICBhcGksXG4gICAgICAgICAgY2FzaF9wYXltZW50X21ldGhvZF9pZDogdmFsdWVzLmNhc2hfcGF5bWVudF9tZXRob2RfaWQsXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgaXNDYXJkUGF5bWVudCxcbiAgICAgICAgICBpc1BheVVSZWFkeSxcbiAgICAgICAgICBsb2FkaW5nLFxuICAgICAgICAgIG9uQ2FzaFBheW1lbnRNZXRob2RDaGFuZ2UsXG4gICAgICAgICAgb25DaGFuZ2U6IG9uUGF5bWVudENoYW5nZSxcbiAgICAgICAgICBwYXltZW50X21ldGhvZF9pZDogdmFsdWVzLnBheW1lbnRfbWV0aG9kX2lkLFxuICAgICAgICAgIFBPUyxcbiAgICAgICAgICByZXF1aXJlZHMsXG4gICAgICAgICAgdmFsaWRhdGlvbkVycm9yOiAhIGxvYWRpbmcgJiYgZXJyb3IgJiYgZXJyb3IuZXJyb3JzICYmIGVycm9yLmVycm9ycy5wYXltZW50X21ldGhvZF9pZCxcbiAgICAgICAgfX0gLz5cbiAgICAgICkgfVxuXG4gICAgICB7LyogZm9vdGVyICovfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cgYWxpZ24taXRlbXMtY2VudGVyXCI+XG5cbiAgICAgICAgey8qIHRlcm1zICovfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1tZC02IG9mZnNldC1tZC00XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cInRlcm1zXCI+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgY2hlY2tlZD17dmFsdWVzLnRlcm1zfVxuICAgICAgICAgICAgICBuYW1lPVwidGVybXNcIlxuICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgICAgIHJlcXVpcmVkPXtyZXF1aXJlZHN9XG4gICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgIHZhbHVlPXtgdHJ1ZWB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPHNwYW4+SGUgbGXDrWRvIHkgYWNlcHRvIDxMaW5rIGhyZWY9XCIvdGVybWlub3MteS1wb2xpdGljYXNcIj5cbiAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9XCJfYmxhbmtcIj5lbCBjb250cmF0bzwvYT5cbiAgICAgICAgICAgICAgPC9MaW5rPiBkZSB7Q09ORklHLmFwcE5hbWV9PC9zcGFuPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPEludmFsaWRGZWVkYmFjayBlcnJvcj17ZXJyb3J9IGxvYWRpbmc9e2xvYWRpbmd9IG5hbWU9XCJ0ZXJtc1wiIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIHsvKiBzZW5kIGJ0biAqL31cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbWQtMiB0ZXh0LXJpZ2h0XCI+XG4gICAgICAgICAgPEJ1dHRvbiBibG9jayBjb2xvcj1cInNlY29uZGFyeVwiIGRpc2FibGVkPXtsb2FkaW5nfSB0eXBlPVwic3VibWl0XCI+RW52aWFyPC9CdXR0b24+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICA8L2Rpdj5cblxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICA6Z2xvYmFsKC5oMykge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICB9XG4gICAgICAgIGhyLFxuICAgICAgICAuaHIge1xuICAgICAgICAgIG1hcmdpbi10b3A6IDA7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTVweDtcbiAgICAgICAgfVxuICAgICAgICAudGVybXMge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICAgICAgfVxuICAgICAgICAudGVybXMgaW5wdXQge1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9mb3JtPlxuICApXG59XG5cbmNvbnN0IEludmFsaWRGZWVkYmFjayA9ICh7ZXJyb3IsIGxvYWRpbmcsIG5hbWV9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHsgISBsb2FkaW5nICYmIGVycm9yICYmIGVycm9yLmVycm9ycyAmJiBlcnJvci5lcnJvcnNbbmFtZV0gJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImludmFsaWQtZmVlZGJhY2tcIj57ZXJyb3IuZXJyb3JzW25hbWVdfTwvZGl2PlxuICAgICAgKX1cbiAgICA8Lz5cbiAgKVxufVxuXG5jb25zdCBTZWxlY3RGb3JtR3JvdXAgPSAoeyBlcnJvciwgbGFiZWwsIGxpc3QsIGxpc3RNYXBWYWx1ZSA9IG51bGwsIGxvYWRpbmcsIG5hbWUsIG9uQ2hhbmdlLCBwbHVyYWxMYWJlbCwgcmVxdWlyZWRzLCB2YWx1ZSB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEZvcm1Hcm91cD5cbiAgICAgIDxMYWJlbCBodG1sRm9yPXtuYW1lfT57bGFiZWx9PC9MYWJlbD5cbiAgICAgIDxTZWxlY3RcbiAgICAgICAgaWQ9e25hbWV9XG4gICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgcmVxdWlyZWQ9e3JlcXVpcmVkc31cbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgPlxuICAgICAgICB7ICEgbGlzdCA/IChcbiAgICAgICAgICA8b3B0aW9uIGRpc2FibGVkIHZhbHVlPVwiXCI+Q2FyZ2FuZG8uLi48L29wdGlvbj5cbiAgICAgICAgKSA6IGxpc3QubGVuZ3RoID8gPD5cbiAgICAgICAgICA8b3B0aW9uIGRpc2FibGVkIHZhbHVlPVwiXCI+U2VsZWNjaW9uYSB0dSB7bGFiZWwudG9Mb3dlckNhc2UoKX08L29wdGlvbj5cbiAgICAgICAgICB7IGxpc3QubWFwKChpdGVtLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbGlzdE1hcFZhbHVlID8gaXRlbVtsaXN0TWFwVmFsdWVdIDogaXRlbVxuICAgICAgICAgICAgY29uc3Qgb3B0aW9uTmFtZSA9IGxpc3RNYXBWYWx1ZSA/IGl0ZW0ubmFtZSA6IGl0ZW1cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxvcHRpb24ga2V5PXtrZXl9IHZhbHVlPXt2YWx1ZX0+e29wdGlvbk5hbWV9PC9vcHRpb24+XG4gICAgICAgICAgICApXG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvPiA6IChcbiAgICAgICAgICA8b3B0aW9uIGRpc2FibGVkIHZhbHVlPVwiXCI+SW5jYXBheiBkZSBjYXJnYXIge3BsdXJhbExhYmVsfTwvb3B0aW9uPlxuICAgICAgICApIH1cbiAgICAgIDwvU2VsZWN0PlxuICAgICAgPEludmFsaWRGZWVkYmFjayBlcnJvcj17ZXJyb3J9IGxvYWRpbmc9e2xvYWRpbmd9IG5hbWU9e25hbWV9IC8+XG4gICAgPC9Gb3JtR3JvdXA+XG4gIClcbn1cblxuY29uc3QgQWRkcmVzcyA9ICh7XG4gIGFwaSxcbiAgZXJyb3IsXG4gIGhhbmRsZUlucHV0Q2hhbmdlLFxuICBzZXRWYWx1ZXMsXG4gIGxvYWRpbmcsXG4gIHJlcXVpcmVkcyxcbiAgdmFsdWVzLFxufSkgPT4ge1xuXG4gIGNvbnN0IGFyZ0NvdW50cnlJZCA9IDExXG4gIGNvbnN0IGJyYUNvdW50cnlJZCA9IDMyXG4gIGNvbnN0IGNobENvdW50cnlJZCA9IDQ4XG5cbiAgY29uc3QgeyBjb3VudHJ5X2lkOiBjb3VudHJ5SWQsIGFkZHJlc3NfMXN0X2xldmVsLCBjaXR5LCBhZGRyZXNzXzNyZF9sZXZlbCwgYWRkcmVzcyB9ID0gdmFsdWVzXG5cbiAgY29uc3QgWyBjb3VudHJpZXMsIHNldENvdW50cmllcyBdID0gdXNlU3RhdGUoKVxuXG4gIHVzZUVmZmVjdCggXyA9PiB7XG4gICAgKGFzeW5jIF8gPT4ge1xuICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBhcGkuZ2V0KCdjb3VudHJpZXMnKVxuICAgICAgc2V0Q291bnRyaWVzKGRhdGEpXG4gICAgfSkoKVxuICB9LCBbXSlcblxuICBjb25zdCBoYW5kbGVDb3VudHJ5Q2hhbmdlID0gZSA9PiB7XG4gICAgY29uc3QgeyBuYW1lLCB2YWx1ZSB9ID0gZS50YXJnZXRcbiAgICBzZXRWYWx1ZXMoe1xuICAgICAgLi4udmFsdWVzLFxuICAgICAgW25hbWVdOiB2YWx1ZSxcbiAgICAgIGFkZHJlc3NfMXN0X2xldmVsOiAnJyxcbiAgICB9KVxuICB9XG5cbiAgY29uc3QgZmlyc3RMZXZlbExhYmVsID0gY291bnRyeUlkID09IGFyZ0NvdW50cnlJZCA/ICdQcm92aW5jaWEnIDpcbiAgY291bnRyeUlkID09IGJyYUNvdW50cnlJZCA/ICdFc3RhZG8nIDpcbiAgY291bnRyeUlkID09IGNobENvdW50cnlJZCA/ICdSZWdpw7NuJyA6XG4gICdTdGF0ZSdcblxuICBjb25zdCBmaXJzdExldmVsUGx1cmFsTGFiZWwgPSBjb3VudHJ5SWQgPT0gYXJnQ291bnRyeUlkID8gJ1Byb3ZpbmNpYXMnIDpcbiAgY291bnRyeUlkID09IGJyYUNvdW50cnlJZCA/ICdFc3RhZG9zJyA6XG4gIGNvdW50cnlJZCA9PSBjaGxDb3VudHJ5SWQgPyAnUmVnaW9uZXMnIDpcbiAgJ1N0YXRlcydcblxuICBjb25zdCBbIGZpcnN0TGV2ZWxMaXN0LCBzZXRGaXJzdExldmVsTGlzdCBdID0gdXNlU3RhdGUoKVxuXG4gIHVzZUVmZmVjdChfID0+IHtcbiAgICAoYXN5bmMgXyA9PiB7XG4gICAgICBjb25zdCBwYXJzZWRDb3VudHJ5SWQgPSBwYXJzZUludChjb3VudHJ5SWQpXG4gICAgICBjb25zdCB7IGRhdGE6IGFkZHJlc3NlcyB9ID0gW2FyZ0NvdW50cnlJZCwgYnJhQ291bnRyeUlkLCBjaGxDb3VudHJ5SWRdLmluY2x1ZGVzKHBhcnNlZENvdW50cnlJZCkgP1xuICAgICAgICBhd2FpdCBhcGkuZ2V0KCdhZGRyZXNzLTFzdC1sZXZlbHMnLCB7XG4gICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBjb3VudHJ5X2lkOiBjb3VudHJ5SWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSkgOiB7IGRhdGE6IG51bGwgfVxuICAgICAgICBzZXRGaXJzdExldmVsTGlzdChhZGRyZXNzZXMpXG4gICAgfSkoKVxuICB9LCBbY291bnRyeUlkXSlcblxuICBjb25zdCBjaXR5TGFiZWwgPSBjb3VudHJ5SWQgPT0gYnJhQ291bnRyeUlkID8gJ0NpZGFkZScgOlxuICBjb3VudHJ5SWQgPT0gY2hsQ291bnRyeUlkID8gJ1Byb3ZpbmNpYScgOlxuICAnQ2l1ZGFkJ1xuXG4gIGNvbnN0IHRoaXJkTGV2ZWxMYWJlbCA9IGNvdW50cnlJZCA9PSBjaGxDb3VudHJ5SWQgPyAnQ29tdW5hJyA6ICdEaXN0cmljdCdcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiYWRkcmVzc1wiPlxuICAgICAgPGgzIGNsYXNzTmFtZT1cImgzXCI+VWJpY2FjacOzbjwvaDM+XG5cbiAgICAgIHsvKiBjb3VudHJ5ICovfVxuICAgICAgPFNlbGVjdEZvcm1Hcm91cFxuICAgICAgICBlcnJvcj17ZXJyb3J9XG4gICAgICAgIGxhYmVsPVwiUGHDrXNcIlxuICAgICAgICBsb2FkaW5nPXtsb2FkaW5nfVxuICAgICAgICBsaXN0PXtjb3VudHJpZXN9XG4gICAgICAgIGxpc3RNYXBWYWx1ZT1cImlkXCJcbiAgICAgICAgbmFtZT1cImNvdW50cnlfaWRcIlxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ291bnRyeUNoYW5nZX1cbiAgICAgICAgcGx1cmFsTGFiZWw9XCJQYcOtc2VzXCJcbiAgICAgICAgcmVxdWlyZWRzPXtyZXF1aXJlZHN9XG4gICAgICAgIHZhbHVlPXtjb3VudHJ5SWR9XG4gICAgICAvPlxuXG4gICAgICB7LyogMXN0IGxldmVsICovfVxuICAgICAge1thcmdDb3VudHJ5SWQsIGJyYUNvdW50cnlJZCwgY2hsQ291bnRyeUlkXS5tYXAoaWQgPT4gaWQrJycpLmluY2x1ZGVzKGNvdW50cnlJZCkgJiYgKFxuICAgICAgICA8U2VsZWN0Rm9ybUdyb3VwXG4gICAgICAgICAgZXJyb3I9e2Vycm9yfVxuICAgICAgICAgIGxhYmVsPXtmaXJzdExldmVsTGFiZWx9XG4gICAgICAgICAgbG9hZGluZz17bG9hZGluZ31cbiAgICAgICAgICBsaXN0PXtmaXJzdExldmVsTGlzdH1cbiAgICAgICAgICBsaXN0TWFwVmFsdWU9XCJpZFwiXG4gICAgICAgICAgbmFtZT1cImFkZHJlc3NfMXN0X2xldmVsXCJcbiAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgcGx1cmFsTGFiZWw9e2ZpcnN0TGV2ZWxQbHVyYWxMYWJlbH1cbiAgICAgICAgICByZXF1aXJlZHM9e3JlcXVpcmVkc31cbiAgICAgICAgICB2YWx1ZT17YWRkcmVzc18xc3RfbGV2ZWx9XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICB7LyogY2l0eSAqL31cbiAgICAgIHtbYnJhQ291bnRyeUlkLCBjaGxDb3VudHJ5SWRdLm1hcChpZCA9PiBpZCsnJykuaW5jbHVkZXMoY291bnRyeUlkKSAmJiAoXG4gICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgPExhYmVsIGh0bWxGb3I9XCJjaXR5XCI+e2NpdHlMYWJlbH08L0xhYmVsPlxuICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgaWQ9XCJjaXR5XCJcbiAgICAgICAgICAgIG5hbWU9XCJjaXR5XCJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVJbnB1dENoYW5nZX1cbiAgICAgICAgICAgIHJlcXVpcmVkPXtyZXF1aXJlZHN9XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICB2YWx1ZT17Y2l0eX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxJbnZhbGlkRmVlZGJhY2sgZXJyb3I9e2Vycm9yfSBsb2FkaW5nPXtsb2FkaW5nfSBuYW1lPVwiY2l0eVwiIC8+XG4gICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgKX1cblxuICAgICAgey8qIDNyZCBsZXZlbCAqL31cbiAgICAgIHtbY2hsQ291bnRyeUlkXS5tYXAoaWQgPT4gaWQrJycpLmluY2x1ZGVzKGNvdW50cnlJZCkgJiYgKFxuICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgIDxMYWJlbCBodG1sRm9yPVwiYWRkcmVzc18zcmRfbGV2ZWxcIj57dGhpcmRMZXZlbExhYmVsfTwvTGFiZWw+XG4gICAgICAgICAgPElucHV0XG4gICAgICAgICAgICBpZD1cImFkZHJlc3NfM3JkX2xldmVsXCJcbiAgICAgICAgICAgIG5hbWU9XCJhZGRyZXNzXzNyZF9sZXZlbFwiXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgICByZXF1aXJlZD17cmVxdWlyZWRzfVxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgdmFsdWU9e2FkZHJlc3NfM3JkX2xldmVsfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPEludmFsaWRGZWVkYmFjayBlcnJvcj17ZXJyb3J9IGxvYWRpbmc9e2xvYWRpbmd9IG5hbWU9XCJhZGRyZXNzXzNyZF9sZXZlbFwiIC8+XG4gICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgKX1cblxuICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgPExhYmVsIGh0bWxGb3I9XCJhZGRyZXNzXCI+RGlyZWNjacOzbjwvTGFiZWw+XG4gICAgICAgIDxJbnB1dFxuICAgICAgICAgIGlkPVwiYWRkcmVzc1wiXG4gICAgICAgICAgbmFtZT1cImFkZHJlc3NcIlxuICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVJbnB1dENoYW5nZX1cbiAgICAgICAgICByZXF1aXJlZD17cmVxdWlyZWRzfVxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICB2YWx1ZT17YWRkcmVzc31cbiAgICAgICAgLz5cbiAgICAgICAgPEludmFsaWRGZWVkYmFjayBlcnJvcj17ZXJyb3J9IGxvYWRpbmc9e2xvYWRpbmd9IG5hbWU9XCJhZGRyZXNzXCIgLz5cbiAgICAgIDwvRm9ybUdyb3VwPlxuXG4gICAgPC9kaXY+XG4gIClcbn1cblxuY29uc3QgUGF5bWVudCA9ICh7XG4gIGFwaSxcbiAgY2FzaF9wYXltZW50X21ldGhvZF9pZCxcbiAgZXJyb3IsXG4gIGlzQ2FyZFBheW1lbnQsXG4gIGlzUGF5VVJlYWR5LFxuICBsb2FkaW5nLFxuICBvbkNhc2hQYXltZW50TWV0aG9kQ2hhbmdlLFxuICBvbkNoYW5nZSxcbiAgcGF5bWVudF9tZXRob2RfaWQsXG4gIFBPUyxcbiAgcmVxdWlyZWRzLFxuICB2YWxpZGF0aW9uRXJyb3Jcbn0pID0+IHtcblxuICAvLyBwYXltZW50IG1ldGhvZHNcbiAgY29uc3QgWyBwYXltZW50TWV0aG9kcywgc2V0UGF5bWVudE1ldGhvZHMgXSA9IHVzZVN0YXRlKClcblxuICAvLyBnZXQgcGF5bWVudCBtZXRob2RzXG4gIHVzZUVmZmVjdCggXyA9PiB7XG4gICAgY29uc3QgZ2V0UGF5bWVudE1ldGhvZHMgPSBhc3luYyBfID0+IHtcbiAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgYXBpLmdldCgncGF5bWVudC1tZXRob2RzJylcbiAgICAgIHNldFBheW1lbnRNZXRob2RzKGRhdGEpXG4gICAgfVxuICAgIGdldFBheW1lbnRNZXRob2RzKClcbiAgfSwgW10pXG5cbiAgLy8gaW5pdCBjYXJkIHNlY3VyZSBmaWVsZHNcbiAgdXNlRWZmZWN0KF8gPT4ge1xuICAgIGlmIChpc1BheVVSZWFkeSAmJiBpc0NhcmRQYXltZW50KSB7XG4gICAgICBQT1MuaW5pdFNlY3VyZUZpZWxkcygnY2FyZC1zZWN1cmUtZmllbGRzJylcbiAgICB9XG4gIH0sIFtpc1BheVVSZWFkeSwgaXNDYXJkUGF5bWVudF0pXG5cbiAgLy8gY2FzaCBwYXltZW50IG1ldGhvZHNcbiAgY29uc3QgWyBjYXNoUGF5bWVudE1ldGhvZHMsIHNldENhc2hQYXltZW50TWV0aG9kcyBdID0gdXNlU3RhdGUoKVxuXG4gIC8vIGdldCBjYXNoIHBheW1lbnQgbWV0aG9kc1xuICB1c2VFZmZlY3QoIF8gPT4ge1xuICAgIGNvbnN0IGdldENhc2hQYXltZW50TWV0aG9kcyA9IGFzeW5jIF8gPT4ge1xuICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBhcGkuZ2V0KCdjYXNoLXBheW1lbnQtbWV0aG9kcycpXG4gICAgICBzZXRDYXNoUGF5bWVudE1ldGhvZHMoZGF0YSlcbiAgICB9XG4gICAgZ2V0Q2FzaFBheW1lbnRNZXRob2RzKClcbiAgfSwgW10pXG5cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9mZnNldC1tZC0yIGNvbC1tZC04XCI+XG5cbiAgICAgICAgPGgzIGNsYXNzTmFtZT1cImgzXCI+UGFnbzwvaDM+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbWQtNlwiPlxuICAgICAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICAgIHsgcGF5bWVudE1ldGhvZHMgJiYgcGF5bWVudE1ldGhvZHMubWFwKChwYXltZW50TWV0aG9kLCBrZXkpID0+IChcbiAgICAgICAgICAgICAgICAgIDxJbnB1dFJhZGlvXG4gICAgICAgICAgICAgICAgICAgIGtleT17a2V5fVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17cGF5bWVudE1ldGhvZC5uYW1lfVxuICAgICAgICAgICAgICAgICAgICBuYW1lPVwicGF5bWVudFwiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgc3RhdGU9e3BheW1lbnRfbWV0aG9kX2lkfVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cGF5bWVudE1ldGhvZC5pZH1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSkgfVxuICAgICAgICAgICAgICAgIHsgdmFsaWRhdGlvbkVycm9yICYmIChcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW52YWxpZC1mZWVkYmFja1wiPnt2YWxpZGF0aW9uRXJyb3J9PC9kaXY+XG4gICAgICAgICAgICAgICAgKSB9XG4gICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLW1kLTZcIj5cblxuICAgICAgICAgICAgICB7LyogY3JlZGl0IC8gZGViaXQgY2FyZCAqL31cbiAgICAgICAgICAgICAge2lzQ2FyZFBheW1lbnQgPyAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkLWlucHV0c1wiPlxuXG4gICAgICAgICAgICAgICAgICB7LyogbWFuZGF0b3J5IGRhdGEgKi99XG4gICAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWwgaHRtbEZvcj1cImNhcmRob2xkZXItbmFtZVwiPk5vbWJyZSBpbXByZXNvIGVuIHRhcmpldGE8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXQgaWQ9XCJjYXJkaG9sZGVyLW5hbWVcIiBuYW1lPVwiY2FyZGhvbGRlci1uYW1lXCIgcmVxdWlyZWQ9e3JlcXVpcmVkc30gdHlwZT1cInRleHRcIiAvPlxuICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG5cbiAgICAgICAgICAgICAgICAgIHsvKiBjYXJkIGZpZWxkcyAqL31cbiAgICAgICAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJjYXJkLXNlY3VyZS1maWVsZHNcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8SW52YWxpZEZlZWRiYWNrIGVycm9yPXtlcnJvcn0gbG9hZGluZz17bG9hZGluZ30gbmFtZT1cInBheW1lbnRfb3NcIiAvPlxuICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG5cbiAgICAgICAgICAgICAgICAgIHsvKiA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWwgaHRtbEZvcj1cImNyZWRpdENhcmROYW1lXCI+Tm9tYnJlIGltcHJlc288L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXQgaWQ9XCJjcmVkaXRDYXJkTmFtZVwiIG5hbWU9XCJjcmVkaXRDYXJkTmFtZVwiIHJlcXVpcmVkPXtyZXF1aXJlZHN9IHR5cGU9XCJ0ZXh0XCIgLz5cbiAgICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgPExhYmVsIGh0bWxGb3I9XCJjcmVkaXRDYXJkTnVtYmVyXCI+TnVtZXJvPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0IGlkPVwiY3JlZGl0Q2FyZE51bWJlclwiIG5hbWU9XCJjcmVkaXRDYXJkTnVtYmVyXCIgcmVxdWlyZWQ9e3JlcXVpcmVkc30gdHlwZT1cInRleHRcIiAvPlxuICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC02XCI+XG4gICAgICAgICAgICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbCBodG1sRm9yPVwiY3JlZGl0Q2FyZERhdGVcIj5WYWxpZGV6PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCBpZD1cImNyZWRpdENhcmREYXRlXCIgbmFtZT1cImNyZWRpdENhcmREYXRlXCIgcmVxdWlyZWQ9e3JlcXVpcmVkc30gdHlwZT1cInRleHRcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtNlwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWwgaHRtbEZvcj1cImNyZWRpdENhcmRDb2RlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxhYmJyIHRpdGxlPVwiQ8OzZGlnbyBkZSBzZWd1cmlkYWRcIj5DVlY8L2FiYnI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0IGlkPVwiY3JlZGl0Q2FyZENvZGVcIiBuYW1lPVwiY3JlZGl0Q2FyZENvZGVcIiByZXF1aXJlZD17cmVxdWlyZWRzfSB0eXBlPVwidGV4dFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPC9kaXY+ICovfVxuXG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgLy8gY2FzaCBwYXltZW50IG1ldGhvZHNcbiAgICAgICAgICAgICAgKSA6IHBheW1lbnRfbWV0aG9kX2lkID09PSAzICYmIChcbiAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICAgICAge2Nhc2hQYXltZW50TWV0aG9kcyA9PSBudWxsID8gKFxuICAgICAgICAgICAgICAgICAgICA8cD5DYXJnYW5kby4uLjwvcD5cbiAgICAgICAgICAgICAgICAgICkgOiBjYXNoUGF5bWVudE1ldGhvZHMubGVuZ3RoID8gY2FzaFBheW1lbnRNZXRob2RzLm1hcCgoaXRlbSwga2V5KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dFJhZGlvXG4gICAgICAgICAgICAgICAgICAgICAga2V5PXtrZXl9XG4gICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2l0ZW0ubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiY2FzaF9wYXltZW50X21ldGhvZF9pZFwiXG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2FzaFBheW1lbnRNZXRob2RDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgc3RhdGU9e2Nhc2hfcGF5bWVudF9tZXRob2RfaWR9XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2l0ZW0uaWR9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICApKSA6IChcbiAgICAgICAgICAgICAgICAgICAgPHA+U2luIG3DqXRvZG8gZGUgcGFnbyBjb25maWd1cmFkby48L3A+XG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgPEludmFsaWRGZWVkYmFjayBlcnJvcj17ZXJyb3J9IGxvYWRpbmc9e2xvYWRpbmd9IG5hbWU9XCJjYXNoX3BheW1lbnRfbWV0aG9kX2lkXCIgLz5cbiAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICAgICAgKSB9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICA8L2Rpdj5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gICAgICAgICAgLmNhcmQtaW5wdXRzIHtcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IC0yMXB4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYH08L3N0eWxlPlxuICAgIDwvZGl2PlxuICApXG59XG5cbi8vIFJhZGlvXG5jb25zdCBJbnB1dFJhZGlvID0gKHsgbGFiZWwsIG5hbWUsIG9uQ2hhbmdlLCBzdGF0ZSwgdmFsdWUgfSkgPT4ge1xuICBjb25zdCB0aGVtZSA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KVxuICBjb25zdCByYWRpb0NvbG9yID0gdGhlbWUuY29sb3JzLmJhY2tncm91bmRcbiAgcmV0dXJuIChcbiAgICA8bGFiZWw+XG4gICAgICA8aW5wdXQgY2hlY2tlZD17c3RhdGUgPT09IHZhbHVlfSB0eXBlPVwicmFkaW9cIiB7Li4ue25hbWUsIG9uQ2hhbmdlLCB2YWx1ZX19IC8+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJmYWtlLWlucHV0XCI+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZha2UtcmFkaW9cIj48L3NwYW4+XG4gICAgICAgIDxzcGFuPntsYWJlbH08L3NwYW4+XG4gICAgICA8L3NwYW4+XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIGxhYmVsIHtcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiA1cHg7XG4gICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQge1xuICAgICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB9XG4gICAgICAgIC5mYWtlLWlucHV0IHtcbiAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCB2YXIoLS1wcmltYXJ5KTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgZm9udC1zaXplOiAxcmVtO1xuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjQ7XG4gICAgICAgICAgcGFkZGluZzogLjM3NXJlbSAuNzVyZW07XG4gICAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAuM3MsIGJvcmRlci1jb2xvciAuM3MsIGNvbG9yIC4zcztcbiAgICAgICAgfVxuICAgICAgICAuZmFrZS1yYWRpbyB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0td2hpdGUpO1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdyYXkyKTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgIGhlaWdodDogMTVweDtcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDcuNXB4O1xuICAgICAgICAgIHBhZGRpbmc6IDFweDtcbiAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogLTJweDtcbiAgICAgICAgICB3aWR0aDogMTVweDtcbiAgICAgICAgfVxuICAgICAgICAuZmFrZS1yYWRpbzo6YmVmb3JlIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3JhZGlvQ29sb3J9O1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IC4zcztcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dDpjaGVja2VkICsgLmZha2UtaW5wdXQge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnkpO1xuICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dDpjaGVja2VkICsgLmZha2UtaW5wdXQgLmZha2UtcmFkaW86OmJlZm9yZSB7XG4gICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgfVxuICAgICAgICB7LyogaW5wdXQ6Zm9jdXMgKyAuZmFrZS1pbnB1dCB7XG4gICAgICAgICAgYm9yZGVyLWNvbG9yOiB2YXIoLS13aGl0ZSk7XG4gICAgICAgIH0gKi99XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9sYWJlbD5cbiAgKVxufVxuXG4vLyBnZXRJbml0aWFsUHJvcHNcbkNvbXBsZXRlUmVnaXN0ZXJQYWdlLmdldEluaXRpYWxQcm9wcyA9IGFzeW5jIGN0eCA9PiB7XG5cbiAgY29uc3Qge2FwaSwgcmVzLCB1c2VyfSA9IGN0eFxuXG4gIC8vIGlmIHVzZXIgaGFzIGFscmVhZHkgY29tcGxldGVkIHJlZ2lzdHJ5LCByZWRpcmVjdCBpdFxuICBpZiAodXNlci5yZWdpc3Rlcl9jb21wbGV0ZWRfYXQpIHtcbiAgICBsZXQgbWVzc2FnZSA9IEpTT04uc3RyaW5naWZ5KHsgaW5mbzogXCJZYSBoYSBjb21wbGV0YWRvIHN1IHJlZ2lzdHJvLlwiIH0pXG4gICAgbm9va2llcy5zZXQoY3R4LCAnZmxhc2hfbWVzc2FnZScsIG1lc3NhZ2UsIHsgcGF0aDogJy8nIH0pXG4gICAgaWYgKHJlcykge1xuICAgICAgcmVzLnJlZGlyZWN0KCcvJylcbiAgICAgIHJlcy5lbmQoKVxuICAgICAgcmV0dXJuIHsgfVxuICAgIH0gZWxzZSB7XG4gICAgICBSb3V0ZXIuYmFjaygpXG4gICAgfVxuICB9XG5cbiAgLy8gZ2V0IHBhY2thZ2VzXG4gIGxldCBwYWNrYWdlc1xuICB0cnkge1xuICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgYXBpLmdldCgncGFja2FnZXMnKVxuICAgIHBhY2thZ2VzID0geyBpdGVtczogZGF0YSB9XG4gIH0gY2F0Y2goZXJyb3IpIHtcbiAgICBwYWNrYWdlcyA9IHsgZXJyb3IgfVxuICB9XG5cbiAgLy8gcmV0dXJuXG4gIHJldHVybiB7IHBhY2thZ2VzLCB1c2VyIH1cbn1cblxuLy8gZXhwb3J0XG5leHBvcnQgZGVmYXVsdCB3aXRoQXV0aChDb21wbGV0ZVJlZ2lzdGVyUGFnZSlcbiJdfQ== */\n/*@ sourceURL=/Users/rafael/Projects/somosgad/dale/pages/register/complete.js */`));\n}; // getInitialProps\n\n\nCompleteRegisterPage.getInitialProps = async ctx => {\n  const {\n    api,\n    res,\n    user\n  } = ctx; // if user has already completed registry, redirect it\n\n  if (user.register_completed_at) {\n    let message = JSON.stringify({\n      info: \"Ya ha completado su registro.\"\n    });\n    nookies.set(ctx, 'flash_message', message, {\n      path: '/'\n    });\n\n    if (res) {\n      res.redirect('/');\n      res.end();\n      return {};\n    } else {\n      Router.back();\n    }\n  } // get packages\n\n\n  let packages;\n\n  try {\n    const {\n      data\n    } = await api.get('packages');\n    packages = {\n      items: data\n    };\n  } catch (error) {\n    packages = {\n      error\n    };\n  } // return\n\n\n  return {\n    packages,\n    user\n  };\n}; // export\n\n\nexport default withAuth(CompleteRegisterPage);","map":{"version":3,"sources":["/Users/rafael/Projects/somosgad/dale/pages/register/complete.js"],"names":["useScript","ScriptStatus","Head","Link","Router","nookies","ThemeContext","Layout","CONFIG","FormGroup","Label","Input","Button","useContext","useEffect","useState","useCallback","UserContext","Packages","Select","IS_PRODUCTION","HAS_WINDOW","withAuth","Loading","CompleteRegisterPage","api","layoutProps","packages","user","ready","status","POS","window","payUEnv","businessUnitPublicKey","isPayUReady","setIsPayUReady","POSStyle","base","borderRadius","backgroundColor","height","fontSize","padding","marginLeft","cardImage","borderTopRightRadius","borderBottomRightRadius","margin","pan","width","borderTopLeftRadius","borderBottomLeftRadius","expirationDate","secureFields","left","cvv","ERROR","console","log","_","setPublicKey","setEnvironment","setStyle","setCardNumberPlaceholder","setExpirationDatePlaceholder","appName","CompleteRegisterForm","id","free_package_id","items","find","item","amount","debug","requireds","updateUser","genders","setGenders","discounts","setDiscounts","blockDiscountFields","setBlockDiscountFields","values","setValues","name","gender_id","document","country_id","address_1st_level","city","address_3rd_level","address","package_id","payment_method_id","payment_os","cash_payment_method_id","terms","discount_id","loading","setLoading","error","setError","data","get","map","disc","index","dsc_id","package_id_intention","handleInputChange","e","checked","value","type","target","handleDiscountChange","valid","checkDiscount","supporterCode","prom","delay","Promise","resolve","setTimeout","length","onPackageChange","parseInt","oldValues","onPaymentChange","onCashPaymentMethodChange","createToken","promise","reject","additionalData","holder_name","getElementById","result","json","JSON","parse","token","credit_card_id","debit_card_id","isCardPayment","includes","handleSubmit","preventDefault","paymentData","order","post","push","pathname","query","download_link","link","response","request","description","errors","message","color","stringify","genre","key","d","undefined","float","paddingTop","onChange","validationError","InvalidFeedback","SelectFormGroup","label","list","listMapValue","pluralLabel","toLowerCase","optionName","Address","argCountryId","braCountryId","chlCountryId","countryId","countries","setCountries","handleCountryChange","firstLevelLabel","firstLevelPluralLabel","firstLevelList","setFirstLevelList","parsedCountryId","addresses","params","cityLabel","thirdLevelLabel","Payment","paymentMethods","setPaymentMethods","getPaymentMethods","initSecureFields","cashPaymentMethods","setCashPaymentMethods","getCashPaymentMethods","paymentMethod","InputRadio","state","theme","radioColor","colors","background","getInitialProps","ctx","res","register_completed_at","info","set","path","redirect","end","back"],"mappings":"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","sourcesContent":["import useScript, { ScriptStatus } from '@charlietango/use-script'\nimport Head from 'next/head'\nimport Link from 'next/link'\nimport Router from 'next/router'\nimport nookies from 'nookies'\n// import sleep from 'sleep-promise'\nimport { ThemeContext } from 'styled-components'\nimport Layout from '~/components/layout/Layout'\nimport { CONFIG } from '~/config'\nimport FormGroup from '~/components/layout/AuthModal/FormGroup'\nimport Label from '~/components/layout/AuthModal/Label'\nimport Input from '~/components/layout/AuthModal/Input'\nimport Button from '~/components/button'\nimport { useContext, useEffect, useState, useCallback } from 'react'\nimport UserContext from '~/contexts/UserContext'\nimport Packages from '~/components/Packages'\nimport Select from '~/components/Select/Select'\nimport { IS_PRODUCTION, HAS_WINDOW } from '~/constants/constants'\nimport withAuth from '~/components/withAuth'\nimport Loading from '~/components/Loading/Loading'\n\n// page\nconst CompleteRegisterPage = ({ api, layoutProps, packages, user }) => {\n  const [ ready, status ] = useScript('https://js.paymentsos.com/v2/latest/secure-fields.min.js')\n  const POS = ready && HAS_WINDOW ? window.POS : null\n  const payUEnv = 'test'\n  const businessUnitPublicKey = '88985036-6530-4b5a-a7ec-c4e07ec07f6c'\n  const [ isPayUReady, setIsPayUReady ] = useState(false)\n  const POSStyle = {\n    base: {\n      borderRadius: '.15rem',\n      backgroundColor: 'white',\n      height: 'calc(1.5em + .75rem + 2px)',\n      fontSize: '12px',\n      padding:'0px 3px',\n      marginLeft: '5px',\n      cardImage: {\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 0,\n        margin: 0,\n      },\n      pan:{\n        width:'160px',\n        borderTopLeftRadius: 0,\n        borderBottomLeftRadius: 0,\n        marginLeft: 0,\n      },\n      expirationDate: { width: '47px' },\n      secureFields: { left: '40px' },\n      cvv: { width: '35px' }\n    }\n  }\n\n  if (status === ScriptStatus.ERROR) {\n    console.log('Failed to load POS API')\n  }\n\n  useEffect(_ => {\n    if (POS) {\n      POS.setPublicKey(businessUnitPublicKey)\n      POS.setEnvironment(payUEnv)\n      POS.setStyle(POSStyle)\n      POS.setCardNumberPlaceholder('Tarjeta de cr√©dito')\n      POS.setExpirationDatePlaceholder('MM/AA');\n      setIsPayUReady(true)\n    }\n  }, [POS])\n\n  return (\n    <Layout {...layoutProps}>\n      <Head>\n        <title>Confirmaci√≥n &lt; Registro &lt; {CONFIG.appName}</title>\n      </Head>\n      <div className=\"rgpage container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-xl-8 offset-xl-2\">\n\n            <h1 className=\"h2\">Completa tu registro</h1>\n\n            <CompleteRegisterForm {...{api, isPayUReady, packages, POS}} />\n\n          </div>\n        </div>\n      </div>\n      <style jsx>{`\n        .rgpage {\n          padding-top: 40px;\n          padding-bottom: 120px;\n        }\n        .h2 {\n          margin-bottom: 10px;\n        }\n      `}</style>\n    </Layout>\n  )\n}\n\nconst CompleteRegisterForm = ({ api, isPayUReady, packages, POS }) => {\n\n  const { id: free_package_id } = packages.items.find(item => item.amount == 0) || {}\n\n  const debug = false && ! IS_PRODUCTION\n  const requireds = IS_PRODUCTION\n\n  const { user, updateUser } = useContext(UserContext)\n\n  const [ genders, setGenders ] = useState()\n  const [ discounts, setDiscounts ] = useState(false)\n  const [ blockDiscountFields, setBlockDiscountFields ] = useState(false)\n\n  const [ values, setValues ] = useState({\n    name: '',\n    gender_id: '',\n    document: '',\n    country_id: '',\n    address_1st_level: '',\n    city: '',\n    address_3rd_level: '',\n    address: '',\n    package_id: '',\n    payment_method_id: null,\n    payment_os: null,\n    cash_payment_method_id: null,\n    terms: null,\n    discount_id: null,\n  })\n\n  const [ loading, setLoading ] = useState()\n  const [ error, setError ] = useState()\n\n  /* get genders */\n  useEffect(_ => {\n    (async _ => {\n      const {data} = await api.get('genders')\n      setGenders(data)\n    })()\n  }, [])\n\n   /* get discounts */\n   useEffect(_ => {\n    (async _ => {\n      var { data } = await api.get('discounts')\n\n      data = data.map( (disc, index) => {\n        disc.dsc_id = 'dsc_' + index\n        return disc\n      })\n\n      setDiscounts(data)\n    })()\n  }, [])\n\n  /* fill user form */\n  useEffect(_ => {\n    if (user) {\n      setValues({\n        ...values,\n        name: user.name,\n        gender_id: user.gender_id ? user.gender_id : '',\n        document: user.document ? user.document : '',\n        address: user.address ? user.address : '',\n        city: user.city ? user.city : '',\n        country_id: user.country_id ? user.country_id : '',\n        package_id: user.package_id_intention ? user.package_id_intention : '',\n      })\n    }\n  }, [user])\n\n  /* handle general input change */\n  const handleInputChange = e => {\n    const { checked, name, value, type } = e.target\n    setValues({\n      ...values,\n      [name]: type === 'checkbox' ?\n        (checked ? (value === 'true' ? true : value) : false) :\n        value,\n    })\n  }\n\n  /* handle disocunt change */\n  const handleDiscountChange = async ({target:{ name, value, id }}) => {\n\n    let valid = await checkDiscount(value)\n    // console.table(valid)\n\n    setValues({\n      ...values,\n      [name]: value,\n      discount_id: valid ? id : null\n    })\n  }\n\n  /* handle discount change */\n  const checkDiscount = async supporterCode => {\n\n    // Simulate API Call\n    const prom = (delay, value) => new Promise(resolve => setTimeout(resolve, delay, value))\n\n    return await prom(50, supporterCode.length === 5)\n\n  }\n\n  /* handle package change */\n  const onPackageChange = useCallback( e => {\n    const package_id = parseInt(e.target.value, 10)\n    setValues( oldValues => ({\n      ...oldValues,\n      package_id,\n      payment_method_id: package_id === free_package_id ? null : values.payment_method_id,\n    }))\n  },[])\n\n  /* handle payment method change */\n  function onPaymentChange(e) {\n    setValues({\n      ...values,\n      payment_method_id: parseInt(e.target.value, 10),\n      cash_payment_method_id: null,\n    })\n  }\n\n  function onCashPaymentMethodChange(e) {\n    setValues({\n      ...values,\n      cash_payment_method_id: parseInt(e.target.value, 10),\n    })\n  }\n\n  /* token */\n  async function createToken() {\n    const promise = new Promise((resolve, reject) => {\n      const additionalData = {\n        holder_name: document.getElementById('cardholder-name').value,\n        // custom_data: document.getElementById('custom').value,\n      }\n      POS.createToken(additionalData, (result) => {\n        const json = JSON.parse(result)\n        console.log('json', json)\n        json.token ? resolve(json) : reject(json)\n      })\n    })\n    return promise\n  }\n\n  // is card payment\n  const credit_card_id = 1\n  const debit_card_id = 2\n  const isCardPayment = [credit_card_id, debit_card_id].includes(values.payment_method_id)\n\n  /* submit */\n  const handleSubmit = async e => {\n    e.preventDefault()\n    setLoading(true)\n    setError(false)\n    try {\n      const paymentData = values.package_id && values.package_id !== free_package_id &&\n        values.payment_method_id && isCardPayment ? await createToken() : null\n      const data = { ...values, payment_os: paymentData }\n      if (data.country_id === '') {\n        delete data.country_id\n      }\n      if (data.address_1st_level === '') {\n        delete data.address_1st_level\n      }\n      if (data.address_3rd_level === '') {\n        delete data.address_3rd_level\n      }\n      try {\n        const { data: { user, order } } = await api.post('register/complete', data)\n        updateUser(user)\n        if (order) {\n          Router.push({\n            pathname: '/register/confirm',\n            query: {\n              download_link: order.download_link,\n              link: order.link,\n            },\n          }, '/register/confirm')\n        } else {\n          Router.push('/')\n        }\n      } catch (error) {\n        if (error.response) {\n          const { data, status } = error.response\n          if (status === 422) {\n            setError(data)\n          }\n        } else if (error.request) {\n          setError(error)\n        } else {\n          setError(error)\n        }\n      }\n    } catch (error) {\n      setError(error.description ? { errors: { payment_os: error.description } } : error)\n    }\n    setLoading(false)\n  }\n\n  return (\n    <form method=\"post\" onSubmit={handleSubmit}>\n\n      {/* main error msg */}\n      { error && error.message && (\n        <div className=\"invalid-feedback\">{error.message}</div>\n      ) }\n\n      {/* form data debug */}\n      { debug && (\n        <pre style={{ color: '#fff' }}>\n          {JSON.stringify(values, null, 2)}\n        </pre>\n      )}\n\n      <div className=\"row\">\n\n        <div className=\"col-md-6\">\n          <div className=\"data\">\n\n            {/* heading */}\n            <h3 className=\"h3\">Tus datos</h3>\n\n            {/* name */}\n            <FormGroup>\n              <Label htmlFor=\"name\">Nombre completo</Label>\n              <Input\n                id=\"name\"\n                name=\"name\"\n                onChange={handleInputChange}\n                required={requireds}\n                value={values.name}\n              />\n              <InvalidFeedback error={error} loading={loading} name=\"name\" />\n            </FormGroup>\n\n            {/* genre */}\n            <FormGroup>\n              <Label htmlFor=\"gender_id\">G√©nero</Label>\n              <Select\n                id=\"gender_id\"\n                name=\"gender_id\"\n                onChange={handleInputChange}\n                required={requireds}\n                value={values.gender_id}\n              >\n                { ! genders ? (\n                  <option disabled value=\"\">Cargando...</option>\n                ) : genders.length ? <>\n                  <option disabled value=\"\">Selecciona tu g√©nero</option>\n                  { genders.map((genre, key) => (\n                    <option {...{key}} value={genre.id}>{genre.name}</option>\n                  ))}\n                </> : (\n                  <option disabled value=\"\">Incapaz de cargar g√©neros</option>\n                ) }\n              </Select>\n              <InvalidFeedback error={error} loading={loading} name=\"gender_id\" />\n            </FormGroup>\n\n            {/* document */}\n            <FormGroup>\n              <Label htmlFor=\"document\">Documento</Label>\n              <Input\n                id=\"document\"\n                name=\"document\"\n                onChange={handleInputChange}\n                required={requireds}\n                type=\"text\"\n                value={values.document}\n              />\n              <InvalidFeedback error={error} loading={loading} name=\"document\" />\n            </FormGroup>\n\n            {discounts && discounts.map( d => (\n              <FormGroup key={d.id}>\n                <Label htmlFor={d.dsc_id}>{d.name}</Label>\n                <Input\n                  disabled={discounts.find(\n                    disc => (!['',undefined].includes(values[disc.dsc_id]) && disc.id != d.id)\n                  )}\n                  id={d.id}\n                  maxLength={5}\n                  name={d.dsc_id}\n                  onChange={handleDiscountChange}\n                  type=\"text\"\n                  style={values.discount_id == d.id ? {backgroundColor: 'rgb(206, 249, 206)'} : {}}\n                  value={values[d.dsc_id] || ''}\n                  readOnly={blockDiscountFields}\n                />\n                <div style={{float: 'right', paddingTop:'10px'}}>\n                  <Loading size=\"20\" color=\"white\" loadingState={values.discount_id == d.id  && blockDiscountFields}/>\n                </div>\n              </FormGroup>\n            ))}\n\n          </div>\n        </div>\n\n        {/* address */}\n        <div className=\"col-md-6\">\n          <Address\n            api={api}\n            error={error}\n            handleInputChange={handleInputChange}\n            loading={loading}\n            requireds={requireds}\n            setValues={setValues}\n            values={values}\n          />\n        </div>\n\n      </div>\n\n      {/* package selection */}\n      <Packages {...{\n        error: packages.error ? packages.error : null,\n        items: packages.items ? packages.items : null,\n        onChange: onPackageChange,\n        package_id: values.package_id,\n        validationError: ! loading && error && error.errors && error.errors.package_id,\n        discount_id: values.discount_id,\n        setBlockDiscountFields,\n      }} />\n\n      {/* payment */}\n      { values.package_id && values.package_id !== free_package_id && (\n        <Payment {...{\n          api,\n          cash_payment_method_id: values.cash_payment_method_id,\n          error,\n          isCardPayment,\n          isPayUReady,\n          loading,\n          onCashPaymentMethodChange,\n          onChange: onPaymentChange,\n          payment_method_id: values.payment_method_id,\n          POS,\n          requireds,\n          validationError: ! loading && error && error.errors && error.errors.payment_method_id,\n        }} />\n      ) }\n\n      {/* footer */}\n      <div className=\"row align-items-center\">\n\n        {/* terms */}\n        <div className=\"col-md-6 offset-md-4\">\n          <label className=\"terms\">\n            <input\n              checked={values.terms}\n              name=\"terms\"\n              onChange={handleInputChange}\n              required={requireds}\n              type=\"checkbox\"\n              value={`true`}\n            />\n            <span>He le√≠do y acepto <Link href=\"/terminos-y-politicas\">\n                <a target=\"_blank\">el contrato</a>\n              </Link> de {CONFIG.appName}</span>\n          </label>\n          <InvalidFeedback error={error} loading={loading} name=\"terms\" />\n        </div>\n\n        {/* send btn */}\n        <div className=\"col-md-2 text-right\">\n          <Button block color=\"secondary\" disabled={loading} type=\"submit\">Enviar</Button>\n        </div>\n\n      </div>\n\n      <style jsx>{`\n        :global(.h3) {\n          font-size: 20px;\n          font-weight: bold;\n          margin-bottom: 10px;\n        }\n        hr,\n        .hr {\n          margin-top: 0;\n          margin-bottom: 15px;\n        }\n        .terms {\n          font-size: 18px;\n        }\n        .terms input {\n          margin-right: 5px;\n        }\n      `}</style>\n    </form>\n  )\n}\n\nconst InvalidFeedback = ({error, loading, name}) => {\n  return (\n    <>\n      { ! loading && error && error.errors && error.errors[name] && (\n        <div className=\"invalid-feedback\">{error.errors[name]}</div>\n      )}\n    </>\n  )\n}\n\nconst SelectFormGroup = ({ error, label, list, listMapValue = null, loading, name, onChange, pluralLabel, requireds, value }) => {\n  return (\n    <FormGroup>\n      <Label htmlFor={name}>{label}</Label>\n      <Select\n        id={name}\n        name={name}\n        onChange={onChange}\n        required={requireds}\n        value={value}\n      >\n        { ! list ? (\n          <option disabled value=\"\">Cargando...</option>\n        ) : list.length ? <>\n          <option disabled value=\"\">Selecciona tu {label.toLowerCase()}</option>\n          { list.map((item, key) => {\n            const value = listMapValue ? item[listMapValue] : item\n            const optionName = listMapValue ? item.name : item\n            return (\n              <option key={key} value={value}>{optionName}</option>\n            )\n          })}\n        </> : (\n          <option disabled value=\"\">Incapaz de cargar {pluralLabel}</option>\n        ) }\n      </Select>\n      <InvalidFeedback error={error} loading={loading} name={name} />\n    </FormGroup>\n  )\n}\n\nconst Address = ({\n  api,\n  error,\n  handleInputChange,\n  setValues,\n  loading,\n  requireds,\n  values,\n}) => {\n\n  const argCountryId = 11\n  const braCountryId = 32\n  const chlCountryId = 48\n\n  const { country_id: countryId, address_1st_level, city, address_3rd_level, address } = values\n\n  const [ countries, setCountries ] = useState()\n\n  useEffect( _ => {\n    (async _ => {\n      const { data } = await api.get('countries')\n      setCountries(data)\n    })()\n  }, [])\n\n  const handleCountryChange = e => {\n    const { name, value } = e.target\n    setValues({\n      ...values,\n      [name]: value,\n      address_1st_level: '',\n    })\n  }\n\n  const firstLevelLabel = countryId == argCountryId ? 'Provincia' :\n  countryId == braCountryId ? 'Estado' :\n  countryId == chlCountryId ? 'Regi√≥n' :\n  'State'\n\n  const firstLevelPluralLabel = countryId == argCountryId ? 'Provincias' :\n  countryId == braCountryId ? 'Estados' :\n  countryId == chlCountryId ? 'Regiones' :\n  'States'\n\n  const [ firstLevelList, setFirstLevelList ] = useState()\n\n  useEffect(_ => {\n    (async _ => {\n      const parsedCountryId = parseInt(countryId)\n      const { data: addresses } = [argCountryId, braCountryId, chlCountryId].includes(parsedCountryId) ?\n        await api.get('address-1st-levels', {\n          params: {\n            country_id: countryId,\n          },\n        }) : { data: null }\n        setFirstLevelList(addresses)\n    })()\n  }, [countryId])\n\n  const cityLabel = countryId == braCountryId ? 'Cidade' :\n  countryId == chlCountryId ? 'Provincia' :\n  'Ciudad'\n\n  const thirdLevelLabel = countryId == chlCountryId ? 'Comuna' : 'District'\n\n  return (\n    <div className=\"address\">\n      <h3 className=\"h3\">Ubicaci√≥n</h3>\n\n      {/* country */}\n      <SelectFormGroup\n        error={error}\n        label=\"Pa√≠s\"\n        loading={loading}\n        list={countries}\n        listMapValue=\"id\"\n        name=\"country_id\"\n        onChange={handleCountryChange}\n        pluralLabel=\"Pa√≠ses\"\n        requireds={requireds}\n        value={countryId}\n      />\n\n      {/* 1st level */}\n      {[argCountryId, braCountryId, chlCountryId].map(id => id+'').includes(countryId) && (\n        <SelectFormGroup\n          error={error}\n          label={firstLevelLabel}\n          loading={loading}\n          list={firstLevelList}\n          listMapValue=\"id\"\n          name=\"address_1st_level\"\n          onChange={handleInputChange}\n          pluralLabel={firstLevelPluralLabel}\n          requireds={requireds}\n          value={address_1st_level}\n        />\n      )}\n\n      {/* city */}\n      {[braCountryId, chlCountryId].map(id => id+'').includes(countryId) && (\n        <FormGroup>\n          <Label htmlFor=\"city\">{cityLabel}</Label>\n          <Input\n            id=\"city\"\n            name=\"city\"\n            onChange={handleInputChange}\n            required={requireds}\n            type=\"text\"\n            value={city}\n          />\n          <InvalidFeedback error={error} loading={loading} name=\"city\" />\n        </FormGroup>\n      )}\n\n      {/* 3rd level */}\n      {[chlCountryId].map(id => id+'').includes(countryId) && (\n        <FormGroup>\n          <Label htmlFor=\"address_3rd_level\">{thirdLevelLabel}</Label>\n          <Input\n            id=\"address_3rd_level\"\n            name=\"address_3rd_level\"\n            onChange={handleInputChange}\n            required={requireds}\n            type=\"text\"\n            value={address_3rd_level}\n          />\n          <InvalidFeedback error={error} loading={loading} name=\"address_3rd_level\" />\n        </FormGroup>\n      )}\n\n      <FormGroup>\n        <Label htmlFor=\"address\">Direcci√≥n</Label>\n        <Input\n          id=\"address\"\n          name=\"address\"\n          onChange={handleInputChange}\n          required={requireds}\n          type=\"text\"\n          value={address}\n        />\n        <InvalidFeedback error={error} loading={loading} name=\"address\" />\n      </FormGroup>\n\n    </div>\n  )\n}\n\nconst Payment = ({\n  api,\n  cash_payment_method_id,\n  error,\n  isCardPayment,\n  isPayUReady,\n  loading,\n  onCashPaymentMethodChange,\n  onChange,\n  payment_method_id,\n  POS,\n  requireds,\n  validationError\n}) => {\n\n  // payment methods\n  const [ paymentMethods, setPaymentMethods ] = useState()\n\n  // get payment methods\n  useEffect( _ => {\n    const getPaymentMethods = async _ => {\n      const { data } = await api.get('payment-methods')\n      setPaymentMethods(data)\n    }\n    getPaymentMethods()\n  }, [])\n\n  // init card secure fields\n  useEffect(_ => {\n    if (isPayUReady && isCardPayment) {\n      POS.initSecureFields('card-secure-fields')\n    }\n  }, [isPayUReady, isCardPayment])\n\n  // cash payment methods\n  const [ cashPaymentMethods, setCashPaymentMethods ] = useState()\n\n  // get cash payment methods\n  useEffect( _ => {\n    const getCashPaymentMethods = async _ => {\n      const { data } = await api.get('cash-payment-methods')\n      setCashPaymentMethods(data)\n    }\n    getCashPaymentMethods()\n  }, [])\n\n\n  return (\n    <div className=\"row\">\n      <div className=\"offset-md-2 col-md-8\">\n\n        <h3 className=\"h3\">Pago</h3>\n\n        <div className=\"row\">\n\n            <div className=\"col-md-6\">\n              <FormGroup>\n                { paymentMethods && paymentMethods.map((paymentMethod, key) => (\n                  <InputRadio\n                    key={key}\n                    label={paymentMethod.name}\n                    name=\"payment\"\n                    onChange={onChange}\n                    state={payment_method_id}\n                    value={paymentMethod.id}\n                  />\n                )) }\n                { validationError && (\n                  <div className=\"invalid-feedback\">{validationError}</div>\n                ) }\n              </FormGroup>\n            </div>\n\n            <div className=\"col-md-6\">\n\n              {/* credit / debit card */}\n              {isCardPayment ? (\n                <div className=\"card-inputs\">\n\n                  {/* mandatory data */}\n                  <FormGroup>\n                    <Label htmlFor=\"cardholder-name\">Nombre impreso en tarjeta</Label>\n                    <Input id=\"cardholder-name\" name=\"cardholder-name\" required={requireds} type=\"text\" />\n                  </FormGroup>\n\n                  {/* card fields */}\n                  <FormGroup>\n                    <div id=\"card-secure-fields\" />\n                    <InvalidFeedback error={error} loading={loading} name=\"payment_os\" />\n                  </FormGroup>\n\n                  {/* <FormGroup>\n                    <Label htmlFor=\"creditCardName\">Nombre impreso</Label>\n                    <Input id=\"creditCardName\" name=\"creditCardName\" required={requireds} type=\"text\" />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label htmlFor=\"creditCardNumber\">Numero</Label>\n                    <Input id=\"creditCardNumber\" name=\"creditCardNumber\" required={requireds} type=\"text\" />\n                  </FormGroup>\n                  <div className=\"row\">\n                    <div className=\"col-6\">\n                      <FormGroup>\n                        <Label htmlFor=\"creditCardDate\">Validez</Label>\n                        <Input id=\"creditCardDate\" name=\"creditCardDate\" required={requireds} type=\"text\" />\n                      </FormGroup>\n                    </div>\n                    <div className=\"col-6\">\n                      <FormGroup>\n                        <Label htmlFor=\"creditCardCode\">\n                          <abbr title=\"C√≥digo de seguridad\">CVV</abbr>\n                        </Label>\n                        <Input id=\"creditCardCode\" name=\"creditCardCode\" required={requireds} type=\"text\" />\n                      </FormGroup>\n                    </div>\n                  </div> */}\n\n                </div>\n\n              // cash payment methods\n              ) : payment_method_id === 3 && (\n                <FormGroup>\n                  {cashPaymentMethods == null ? (\n                    <p>Cargando...</p>\n                  ) : cashPaymentMethods.length ? cashPaymentMethods.map((item, key) => (\n                    <InputRadio\n                      key={key}\n                      label={item.name}\n                      name=\"cash_payment_method_id\"\n                      onChange={onCashPaymentMethodChange}\n                      state={cash_payment_method_id}\n                      value={item.id}\n                    />\n                  )) : (\n                    <p>Sin m√©todo de pago configurado.</p>\n                  )}\n                  <InvalidFeedback error={error} loading={loading} name=\"cash_payment_method_id\" />\n                </FormGroup>\n              ) }\n              </div>\n          </div>\n\n      </div>\n      <style jsx>{`\n        @media (min-width: 768px) {\n          .card-inputs {\n            margin-top: -21px;\n          }\n        }\n      `}</style>\n    </div>\n  )\n}\n\n// Radio\nconst InputRadio = ({ label, name, onChange, state, value }) => {\n  const theme = useContext(ThemeContext)\n  const radioColor = theme.colors.background\n  return (\n    <label>\n      <input checked={state === value} type=\"radio\" {...{name, onChange, value}} />\n      <span className=\"fake-input\">\n        <span className=\"fake-radio\"></span>\n        <span>{label}</span>\n      </span>\n      <style jsx>{`\n        label {\n          display: block;\n          margin-bottom: 5px;\n          overflow: hidden;\n          position: relative;\n        }\n        input {\n          opacity: 0;\n          position: absolute;\n        }\n        .fake-input {\n          border: 2px solid var(--primary);\n          border-radius: 4px;\n          display: block;\n          font-size: 1rem;\n          line-height: 1.4;\n          padding: .375rem .75rem;\n          transition: background-color .3s, border-color .3s, color .3s;\n        }\n        .fake-radio {\n          background-color: var(--white);\n          border: 1px solid var(--gray2);\n          border-radius: 50%;\n          display: inline-block;\n          height: 15px;\n          margin-right: 7.5px;\n          padding: 1px;\n          vertical-align: -2px;\n          width: 15px;\n        }\n        .fake-radio::before {\n          background-color: ${radioColor};\n          border-radius: 50%;\n          content: '';\n          display: block;\n          opacity: 0;\n          height: 100%;\n          transition: opacity .3s;\n          width: 100%;\n        }\n        input:checked + .fake-input {\n          background-color: var(--primary);\n          color: white;\n        }\n        input:checked + .fake-input .fake-radio::before {\n          opacity: 1;\n        }\n        {/* input:focus + .fake-input {\n          border-color: var(--white);\n        } */}\n      `}</style>\n    </label>\n  )\n}\n\n// getInitialProps\nCompleteRegisterPage.getInitialProps = async ctx => {\n\n  const {api, res, user} = ctx\n\n  // if user has already completed registry, redirect it\n  if (user.register_completed_at) {\n    let message = JSON.stringify({ info: \"Ya ha completado su registro.\" })\n    nookies.set(ctx, 'flash_message', message, { path: '/' })\n    if (res) {\n      res.redirect('/')\n      res.end()\n      return { }\n    } else {\n      Router.back()\n    }\n  }\n\n  // get packages\n  let packages\n  try {\n    const { data } = await api.get('packages')\n    packages = { items: data }\n  } catch(error) {\n    packages = { error }\n  }\n\n  // return\n  return { packages, user }\n}\n\n// export\nexport default withAuth(CompleteRegisterPage)\n"]},"metadata":{},"sourceType":"module"}