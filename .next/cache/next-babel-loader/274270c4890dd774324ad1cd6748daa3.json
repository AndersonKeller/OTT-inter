{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport withAuth from \"~/components/withAuth\";\nimport Layout from \"~/components/layout/Layout\";\nimport UserData from \"./user-data\";\nimport Packages from \"./packages\";\nimport Payment from './payment';\nimport { useState } from \"react\";\n\nconst CompleteTest = ({\n  api,\n  layoutProps,\n  packages,\n  user\n}) => {\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    name: '',\n    gender_id: '',\n    document: '',\n    country_id: '',\n    address_1st_level: '',\n    city: '',\n    address_3rd_level: '',\n    address: '',\n    package_id: '',\n    payment_method_id: null,\n    payment_os: null,\n    cash_payment_method_id: null,\n    terms: null,\n    discount_id: null\n  });\n  const {\n    0: isPayUReady,\n    1: setIsPayUReady\n  } = useState(false);\n  const credit_card_id = 1;\n  const debit_card_id = 2;\n  const isCardPayment = [credit_card_id, debit_card_id].includes(values.payment_method_id);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState();\n  const {\n    0: error,\n    1: setError\n  } = useState();\n  /* handle payment method change */\n\n  function onPaymentChange(e) {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      payment_method_id: parseInt(e.target.value, 10),\n      cash_payment_method_id: null\n    }));\n  }\n\n  function onCashPaymentMethodChange(e) {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      cash_payment_method_id: parseInt(e.target.value, 10)\n    }));\n  }\n\n  return __jsx(Layout, null, __jsx(UserData, {\n    api: api,\n    layoutProps: layoutProps,\n    values: values,\n    setValues: setValues\n  }), __jsx(Packages, {\n    packages: packages,\n    layoutProps: layoutProps\n  }), __jsx(Payment, {\n    api,\n    cash_payment_method_id: values.cash_payment_method_id,\n    error,\n    isCardPayment,\n    isPayUReady,\n    loading,\n    onCashPaymentMethodChange,\n    onChange: onPaymentChange,\n    payment_method_id: values.payment_method_id,\n    POS,\n    requireds,\n    validationError: !loading && error && error.errors && error.errors.payment_method_id\n  }));\n};\n\nCompleteTest.getInitialProps = async ctx => {\n  const {\n    api,\n    res,\n    user\n  } = ctx; // if user has already completed registry, redirect it\n  // if (user.register_completed_at) {\n  //   let message = JSON.stringify({ info: \"Ya ha completado su registro.\" })\n  //   nookies.set(ctx, 'flash_message', message, { path: '/' })\n  //   if (res) {\n  //     res.redirect('/')\n  //     res.end()\n  //     return {}\n  //   } else {\n  //     Router.back()\n  //   }\n  // }\n  // get packages\n\n  let packages;\n\n  try {\n    const {\n      data\n    } = await api.get('packages');\n    packages = {\n      items: data\n    };\n  } catch (error) {\n    packages = {\n      error\n    };\n  } // return\n\n\n  return {\n    packages,\n    user\n  };\n};\n\nexport default withAuth(CompleteTest, true);","map":{"version":3,"sources":["/Users/rafael/Projects/somosgad/dale/pages/register/wizard/complete-test.js"],"names":["withAuth","Layout","UserData","Packages","Payment","useState","CompleteTest","api","layoutProps","packages","user","values","setValues","name","gender_id","document","country_id","address_1st_level","city","address_3rd_level","address","package_id","payment_method_id","payment_os","cash_payment_method_id","terms","discount_id","isPayUReady","setIsPayUReady","credit_card_id","debit_card_id","isCardPayment","includes","loading","setLoading","error","setError","onPaymentChange","e","parseInt","target","value","onCashPaymentMethodChange","onChange","POS","requireds","validationError","errors","getInitialProps","ctx","res","data","get","items"],"mappings":"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","sourcesContent":["import withAuth from \"~/components/withAuth\";\nimport Layout from \"~/components/layout/Layout\";\nimport UserData from \"./user-data\";\nimport Packages from \"./packages\";\nimport Payment from './payment';\nimport { useState } from \"react\";\n\nconst CompleteTest = ({ api, layoutProps, packages, user }) => {\n\n  const [values, setValues] = useState({\n    name: '',\n    gender_id: '',\n    document: '',\n    country_id: '',\n    address_1st_level: '',\n    city: '',\n    address_3rd_level: '',\n    address: '',\n    package_id: '',\n    payment_method_id: null,\n    payment_os: null,\n    cash_payment_method_id: null,\n    terms: null,\n    discount_id: null,\n  })\n\n  const [isPayUReady, setIsPayUReady] = useState(false)\n\n  const credit_card_id = 1\n  const debit_card_id = 2\n  const isCardPayment = [credit_card_id, debit_card_id].includes(values.payment_method_id)\n\n  const [ loading, setLoading ] = useState()\n  const [ error, setError ] = useState()\n\n  /* handle payment method change */\n  function onPaymentChange(e) {\n    setValues({\n      ...values,\n      payment_method_id: parseInt(e.target.value, 10),\n      cash_payment_method_id: null,\n    })\n  }\n\n  function onCashPaymentMethodChange(e) {\n    setValues({\n      ...values,\n      cash_payment_method_id: parseInt(e.target.value, 10),\n    })\n  }\n\n  return (\n\n    <Layout>\n\n      <UserData\n        api={ api }\n        layoutProps={ layoutProps }\n        values={ values }\n        setValues={ setValues }\n      ></UserData>\n\n      <Packages packages={ packages } layoutProps={ layoutProps }/>\n\n      <Payment\n        { ...{\n          api,\n          cash_payment_method_id: values.cash_payment_method_id,\n          error,\n          isCardPayment,\n          isPayUReady,\n          loading,\n          onCashPaymentMethodChange,\n          onChange: onPaymentChange,\n          payment_method_id: values.payment_method_id,\n          POS,\n          requireds,\n          validationError: !loading && error && error.errors && error.errors.payment_method_id,\n        } }\n      />\n\n    </Layout>\n\n\n  )\n\n}\n\nCompleteTest.getInitialProps = async ctx => {\n\n  const { api, res, user } = ctx\n\n  // if user has already completed registry, redirect it\n  // if (user.register_completed_at) {\n  //   let message = JSON.stringify({ info: \"Ya ha completado su registro.\" })\n  //   nookies.set(ctx, 'flash_message', message, { path: '/' })\n  //   if (res) {\n  //     res.redirect('/')\n  //     res.end()\n  //     return {}\n  //   } else {\n  //     Router.back()\n  //   }\n  // }\n\n  // get packages\n  let packages\n  try {\n    const { data } = await api.get('packages')\n    packages = { items: data }\n  } catch (error) {\n    packages = { error }\n  }\n\n  // return\n  return { packages, user }\n}\n\n\nexport default withAuth(CompleteTest, true);\n"]},"metadata":{},"sourceType":"module"}