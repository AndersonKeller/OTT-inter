{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useField } from 'formik';\nimport Select from '../Select/Select';\nimport Label from '../layout/AuthModal/Label';\nimport Input from '../layout/AuthModal/Input'; // create formik input field\n\nexport var FkInput = function FkInput(_ref) {\n  var style = _ref.style,\n      label = _ref.label,\n      props = _objectWithoutProperties(_ref, [\"style\", \"label\"]);\n\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      meta = _useField2[1];\n\n  field.value = field.value || '';\n  return __jsx(React.Fragment, null, props.type == 'hidden' ? '' : __jsx(Label, {\n    htmlFor: props.id || props.name\n  }, label), __jsx(Input, _extends({\n    style: _objectSpread({\n      color: 'black'\n    }, style)\n  }, field, props)), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, meta.error) : null);\n}; // create formik select field\n\nexport var FkSelect = function FkSelect(_ref2) {\n  var style = _ref2.style,\n      label = _ref2.label,\n      list = _ref2.list,\n      props = _objectWithoutProperties(_ref2, [\"style\", \"label\", \"list\"]);\n\n  var _useField3 = useField(props),\n      _useField4 = _slicedToArray(_useField3, 2),\n      field = _useField4[0],\n      meta = _useField4[1];\n\n  field.value = field.value || '';\n  var opts = list && list.length ? [{\n    id: 0,\n    name: \"Selecciona tu \".concat(label)\n  }].concat(_toConsumableArray(list)) : [{\n    id: 0,\n    name: \"Selecciona tu \".concat(label)\n  }];\n  return __jsx(React.Fragment, null, __jsx(Label, {\n    htmlFor: props.id || props.name\n  }, label), __jsx(Select, _extends({\n    style: _objectSpread({\n      color: 'black'\n    }, style)\n  }, field, props), list && list.length ? opts.map(function (opt, key) {\n    return __jsx(\"option\", _extends({\n      key: key\n    }, {\n      value: opt.id\n    }), opt.name);\n  }) : __jsx(\"option\", {\n    disabled: true,\n    value: 0\n  }, \"Incapaz de cargar \".concat(label))), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, meta.error) : null);\n};","map":{"version":3,"sources":["/Users/rafael/Projects/somosgad/dale/components/Formik/fields.js"],"names":["useField","Select","Label","Input","FkInput","style","label","props","field","meta","value","type","id","name","color","touched","error","FkSelect","list","opts","length","map","opt","key"],"mappings":";;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,QAAzB;AAEA,OAAOC,MAAP,MAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAyB,2BAAzB;AACA,OAAOC,KAAP,MAAyB,2BAAzB,C,CAEA;;AACA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAgC;AAAA,MAA7BC,KAA6B,QAA7BA,KAA6B;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAZC,KAAY;;AAAA,kBAC/BP,QAAQ,CAACO,KAAD,CADuB;AAAA;AAAA,MAC9CC,KAD8C;AAAA,MACvCC,IADuC;;AAErDD,EAAAA,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACE,KAAN,IAAe,EAA7B;AAEA,SACE,4BACIH,KAAK,CAACI,IAAN,IAAc,QAAd,GAAyB,EAAzB,GAA8B,MAAC,KAAD;AAAO,IAAA,OAAO,EAAEJ,KAAK,CAACK,EAAN,IAAYL,KAAK,CAACM;AAAlC,KAAyCP,KAAzC,CADlC,EAEE,MAAC,KAAD;AAAO,IAAA,KAAK;AAAGQ,MAAAA,KAAK,EAAE;AAAV,OAAsBT,KAAtB;AAAZ,KAA+CG,KAA/C,EAA0DD,KAA1D,EAFF,EAGGE,IAAI,CAACM,OAAL,IAAgBN,IAAI,CAACO,KAArB,GAA+B;AAAK,IAAA,SAAS,EAAC;AAAf,KAAoCP,IAAI,CAACO,KAAzC,CAA/B,GAA0F,IAH7F,CADF;AAOD,CAXM,C,CAaP;;AACA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,QAAsC;AAAA,MAAnCZ,KAAmC,SAAnCA,KAAmC;AAAA,MAA5BC,KAA4B,SAA5BA,KAA4B;AAAA,MAArBY,IAAqB,SAArBA,IAAqB;AAAA,MAAZX,KAAY;;AAAA,mBACtCP,QAAQ,CAACO,KAAD,CAD8B;AAAA;AAAA,MACrDC,KADqD;AAAA,MAC9CC,IAD8C;;AAE5DD,EAAAA,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACE,KAAN,IAAe,EAA7B;AAEA,MAAIS,IAAI,GAAGD,IAAI,IAAIA,IAAI,CAACE,MAAb,IAAwB;AAACR,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,IAAI,0BAAkBP,KAAlB;AAAX,GAAxB,4BAAiEY,IAAjE,KAAyE,CAAC;AAACN,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,IAAI,0BAAkBP,KAAlB;AAAX,GAAD,CAApF;AAEA,SACE,4BACE,MAAC,KAAD;AAAO,IAAA,OAAO,EAAEC,KAAK,CAACK,EAAN,IAAYL,KAAK,CAACM;AAAlC,KAAyCP,KAAzC,CADF,EAEE,MAAC,MAAD;AAAQ,IAAA,KAAK;AAAGQ,MAAAA,KAAK,EAAE;AAAV,OAAsBT,KAAtB;AAAb,KAA+CG,KAA/C,EAA0DD,KAA1D,GACGW,IAAI,IAAIA,IAAI,CAACE,MAAb,GACCD,IAAI,CAACE,GAAL,CACE,UAACC,GAAD,EAAMC,GAAN;AAAA,WAAc,yBAAY;AAACA,MAAAA,GAAG,EAAHA;AAAD,KAAZ;AAAmB,MAAA,KAAK,EAAED,GAAG,CAACV;AAA9B,QAAmCU,GAAG,CAACT,IAAvC,CAAd;AAAA,GADF,CADD,GAKC;AAAQ,IAAA,QAAQ,MAAhB;AAAiB,IAAA,KAAK,EAAE;AAAxB,iCAAiDP,KAAjD,EANJ,CAFF,EAWGG,IAAI,CAACM,OAAL,IAAgBN,IAAI,CAACO,KAArB,GAA+B;AAAK,IAAA,SAAS,EAAC;AAAf,KAAoCP,IAAI,CAACO,KAAzC,CAA/B,GAA0F,IAX7F,CADF;AAeD,CArBM","sourcesContent":["import { useField } from 'formik'\n\nimport Select       from '../Select/Select'\nimport Label        from '../layout/AuthModal/Label'\nimport Input        from '../layout/AuthModal/Input'\n\n// create formik input field\nexport const FkInput = ({ style, label, ...props }) => {\n  const [field, meta] = useField(props)\n  field.value = field.value || ''\n\n  return (\n    <>\n      { props.type == 'hidden' ? '' : <Label htmlFor={props.id || props.name}>{label}</Label> }\n      <Input style={{color: 'black', ...style}}  {...field} {...props} />\n      {meta.touched && meta.error ? ( <div className=\"invalid-feedback\">{ meta.error }</div> ) : null}\n    </>\n  )\n}\n\n// create formik select field\nexport const FkSelect = ({ style, label, list, ...props }) => {\n  const [field, meta] = useField(props)\n  field.value = field.value || ''\n\n  let opts = list && list.length ?  [{id:0, name:`Selecciona tu ${label}`},...list] : [{id:0, name:`Selecciona tu ${label}`}]\n\n  return (\n    <>\n      <Label htmlFor={props.id || props.name}>{label}</Label>\n      <Select style={{color: 'black', ...style}} {...field} {...props}>\n        {list && list.length ?\n          opts.map(\n            (opt, key) => <option {...{key}} value={opt.id}>{opt.name}</option>\n          )\n          :\n          <option disabled value={0}>{`Incapaz de cargar ${label}`}</option>\n        }\n      </Select>\n      {meta.touched && meta.error ? ( <div className=\"invalid-feedback\">{ meta.error }</div> ) : null}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}