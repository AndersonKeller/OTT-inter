{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n//react\nimport { useEffect, useState } from 'react'; //components\n\nimport FormGroup from '~/components/layout/AuthModal/FormGroup';\nimport Label from '~/components/layout/AuthModal/Label';\nimport Input from '~/components/layout/AuthModal/Input'; // Payment\n\nconst Payment = ({\n  api,\n  cash_payment_method_id,\n  error,\n  isCardPayment,\n  isPayUReady,\n  loading,\n  onCashPaymentMethodChange,\n  onChange,\n  payment_method_id,\n  POS,\n  requireds,\n  validationError\n}) => {\n  // payment methods\n  const {\n    0: paymentMethods,\n    1: setPaymentMethods\n  } = useState(); // cash payment methods\n\n  const {\n    0: cashPaymentMethods,\n    1: setCashPaymentMethods\n  } = useState(); // get payment methods\n\n  useEffect(_ => {\n    (async _ => {\n      const {\n        data\n      } = await api.get('payment-methods');\n      setPaymentMethods(data);\n    })();\n  }, []); // init card secure fields\n\n  useEffect(_ => {\n    isPayUReady && isCardPayment && POS.initSecureFields('card-secure-fields');\n  }, [isPayUReady, isCardPayment]); // get cash payment methods\n\n  useEffect(_ => {\n    (async _ => {\n      const {\n        data\n      } = await api.get('cash-payment-methods');\n      setCashPaymentMethods(data);\n    })();\n  }, []);\n  return __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"offset-md-2 col-md-8\"\n  }, __jsx(\"h3\", {\n    className: \"h3\"\n  }, \"Pago\"), __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-6\"\n  }, __jsx(FormGroup, null, paymentMethods && paymentMethods.map((paymentMethod, key) => __jsx(InputRadio, {\n    key: key,\n    label: paymentMethod.name,\n    name: \"payment\",\n    onChange: onChange,\n    state: payment_method_id,\n    value: paymentMethod.id\n  })), validationError && __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, validationError))), __jsx(\"div\", {\n    className: \"col-md-6\"\n  }, isCardPayment ? __jsx(\"div\", {\n    className: \"card-inputs\"\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    htmlFor: \"cardholder-name\"\n  }, \"Nombre impreso en tarjeta\"), __jsx(Input, {\n    id: \"cardholder-name\",\n    name: \"cardholder-name\",\n    required: requireds,\n    type: \"text\"\n  })), __jsx(FormGroup, null, __jsx(\"div\", {\n    id: \"card-secure-fields\"\n  }), !loading && error && error.errors && error.errors.payment_os && __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, error.errors.payment_os))) // cash payment methods\n  : payment_method_id === 3 && __jsx(FormGroup, null, cashPaymentMethods == null ? __jsx(\"p\", null, \"Cargando...\") : cashPaymentMethods.length ? cashPaymentMethods.map((item, key) => __jsx(InputRadio, {\n    key: key,\n    label: item.name,\n    name: \"cash_payment_method_id\",\n    onChange: onCashPaymentMethodChange,\n    state: cash_payment_method_id,\n    value: item.id\n  })) : __jsx(\"p\", null, \"Sin m\\xE9todo de pago configurado.\"), !loading && error && error.errors && error.errors.cash_payment_method_id && __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, error.errors.cash_payment_method_id))))));\n}; // Radio\n\n\nconst InputRadio = ({\n  label,\n  name,\n  onChange,\n  state,\n  value\n}) => {\n  return __jsx(\"label\", {\n    className: \"jsx-3479789161\"\n  }, __jsx(\"input\", _extends({\n    checked: state === value,\n    type: \"radio\"\n  }, {\n    name,\n    onChange,\n    value\n  }, {\n    className: \"jsx-3479789161\"\n  })), __jsx(\"span\", {\n    className: \"jsx-3479789161\" + \" \" + \"fake-input\"\n  }, __jsx(\"span\", {\n    className: \"jsx-3479789161\" + \" \" + \"fake-radio\"\n  }), __jsx(\"span\", {\n    className: \"jsx-3479789161\"\n  }, label)), __jsx(_JSXStyle, {\n    id: \"3479789161\"\n  }, [\"label.jsx-3479789161{display:block;margin-bottom:5px;overflow:hidden;position:relative;}\", \"input.jsx-3479789161{opacity:0;position:absolute;}\", \".fake-input.jsx-3479789161{border:2px solid var(--primary);border-radius:4px;display:block;font-size:1rem;line-height:1.4;padding:.375rem .75rem;-webkit-transition:background-color .3s,border-color .3s,color .3s;transition:background-color .3s,border-color .3s,color .3s;}\", \".fake-radio.jsx-3479789161{background-color:var(--white);border:1px solid var(--gray2);border-radius:50%;display:inline-block;height:15px;margin-right:7.5px;padding:1px;vertical-align:-2px;width:15px;}\", \".fake-radio.jsx-3479789161::before{background-color:var(--black);border-radius:50%;content:'';display:block;opacity:0;height:100%;-webkit-transition:opacity .3s;transition:opacity .3s;width:100%;}\", \"input.jsx-3479789161:checked+.fake-input.jsx-3479789161{background-color:var(--primary);color:white;}\", \"input.jsx-3479789161:checked+.fake-input.jsx-3479789161 .fake-radio.jsx-3479789161::before{opacity:1;}\"]));\n};\n\nexport default Payment;","map":{"version":3,"sources":["/Users/rafael/Projects/somosgad/dale/pages/user/changePlan/payment.js"],"names":["useEffect","useState","FormGroup","Label","Input","Payment","api","cash_payment_method_id","error","isCardPayment","isPayUReady","loading","onCashPaymentMethodChange","onChange","payment_method_id","POS","requireds","validationError","paymentMethods","setPaymentMethods","cashPaymentMethods","setCashPaymentMethods","_","data","get","initSecureFields","map","paymentMethod","key","name","id","errors","payment_os","length","item","InputRadio","label","state","value"],"mappings":"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","sourcesContent":["//react\nimport { useEffect, useState } from 'react'\n\n//components\nimport FormGroup from '~/components/layout/AuthModal/FormGroup'\nimport Label from '~/components/layout/AuthModal/Label'\nimport Input from '~/components/layout/AuthModal/Input'\n\n// Payment\nconst Payment = ({\n  api,\n  cash_payment_method_id,\n  error,\n  isCardPayment,\n  isPayUReady,\n  loading,\n  onCashPaymentMethodChange,\n  onChange,\n  payment_method_id,\n  POS,\n  requireds,\n  validationError\n}) => {\n\n  // payment methods\n  const [paymentMethods, setPaymentMethods] = useState()\n  // cash payment methods\n  const [cashPaymentMethods, setCashPaymentMethods] = useState()\n\n  // get payment methods\n  useEffect(_ => {\n    (async _ => {\n      const { data } = await api.get('payment-methods')\n      setPaymentMethods(data)\n    })()\n  }, [])\n\n  // init card secure fields\n  useEffect(_ => { isPayUReady && isCardPayment && POS.initSecureFields('card-secure-fields') },\n    [isPayUReady, isCardPayment]\n  )\n\n  // get cash payment methods\n  useEffect(_ => {\n    (async _ => {\n      const { data } = await api.get('cash-payment-methods')\n      setCashPaymentMethods(data)\n    })()\n  }, [])\n\n\n  return (\n    <div className=\"row\">\n      <div className=\"offset-md-2 col-md-8\">\n        <h3 className=\"h3\">Pago</h3>\n        <div className=\"row\">\n\n          <div className=\"col-md-6\">\n            <FormGroup>\n              {paymentMethods && paymentMethods.map((paymentMethod, key) => (\n                <InputRadio\n                  key={key}\n                  label={paymentMethod.name}\n                  name=\"payment\"\n                  onChange={onChange}\n                  state={payment_method_id}\n                  value={paymentMethod.id}\n                />\n              ))}\n              {validationError && (\n                <div className=\"invalid-feedback\">{validationError}</div>\n              )}\n            </FormGroup>\n          </div>\n\n          <div className=\"col-md-6\">\n\n            {/* credit / debit card */}\n            {isCardPayment ? (\n              <div className=\"card-inputs\">\n\n                {/* mandatory data */}\n                <FormGroup>\n                  <Label htmlFor=\"cardholder-name\">Nombre impreso en tarjeta</Label>\n                  <Input id=\"cardholder-name\" name=\"cardholder-name\" required={requireds} type=\"text\" />\n                </FormGroup>\n\n                {/* card fields */}\n                <FormGroup>\n                  <div id=\"card-secure-fields\" />\n                  {!loading && error && error.errors && error.errors.payment_os && (\n                    <div className=\"invalid-feedback\">{error.errors.payment_os}</div>\n                  )}\n                </FormGroup>\n              </div>\n\n              // cash payment methods\n            ) : payment_method_id === 3 && (\n              <FormGroup>\n                {cashPaymentMethods == null ? (\n                  <p>Cargando...</p>\n                ) : cashPaymentMethods.length ? cashPaymentMethods.map((item, key) => (\n                  <InputRadio\n                    key={key}\n                    label={item.name}\n                    name=\"cash_payment_method_id\"\n                    onChange={onCashPaymentMethodChange}\n                    state={cash_payment_method_id}\n                    value={item.id}\n                  />\n                )) : (\n                      <p>Sin método de pago configurado.</p>\n                    )}\n                {!loading && error && error.errors && error.errors.cash_payment_method_id && (\n                  <div className=\"invalid-feedback\">{error.errors.cash_payment_method_id}</div>\n                )}\n              </FormGroup>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\n// Radio\nconst InputRadio = ({ label, name, onChange, state, value }) => {\n  return (\n    <label>\n      <input checked={state === value} type=\"radio\" {...{ name, onChange, value }} />\n      <span className=\"fake-input\">\n        <span className=\"fake-radio\"></span>\n        <span>{label}</span>\n      </span>\n      <style jsx>{`\n        label {\n          display: block;\n          margin-bottom: 5px;\n          overflow: hidden;\n          position: relative;\n        }\n        input {\n          opacity: 0;\n          position: absolute;\n        }\n        .fake-input {\n          border: 2px solid var(--primary);\n          border-radius: 4px;\n          display: block;\n          font-size: 1rem;\n          line-height: 1.4;\n          padding: .375rem .75rem;\n          transition: background-color .3s, border-color .3s, color .3s;\n        }\n        .fake-radio {\n          background-color: var(--white);\n          border: 1px solid var(--gray2);\n          border-radius: 50%;\n          display: inline-block;\n          height: 15px;\n          margin-right: 7.5px;\n          padding: 1px;\n          vertical-align: -2px;\n          width: 15px;\n        }\n        .fake-radio::before {\n          background-color: var(--black);\n          border-radius: 50%;\n          content: '';\n          display: block;\n          opacity: 0;\n          height: 100%;\n          transition: opacity .3s;\n          width: 100%;\n        }\n        input:checked + .fake-input {\n          background-color: var(--primary);\n          color: white;\n        }\n        input:checked + .fake-input .fake-radio::before {\n          opacity: 1;\n        }\n      `}</style>\n    </label>\n  )\n}\n\nexport default Payment\n"]},"metadata":{},"sourceType":"module"}