{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useContext } from 'react';\nimport UserContext from '../../contexts/UserContext';\nimport api from '../../services/api';\n\nconst withApi = WrappedComponent => {\n  const WithApi = props => {\n    const {\n      signOut\n    } = useContext(UserContext);\n    const clientApi = api(null, signOut);\n    return __jsx(WrappedComponent, _extends({\n      api: clientApi\n    }, props));\n  };\n\n  if (WrappedComponent.getInitialProps) {\n    WithApi.getInitialProps = async ctx => {\n      const serverApi = api(ctx);\n      ctx.api = serverApi;\n      const componentProps = await WrappedComponent.getInitialProps(ctx);\n      return _objectSpread({}, componentProps);\n    };\n  }\n\n  WithApi.displayName = `WithApi(${getDisplayName(WrappedComponent)})`;\n  return WithApi;\n};\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport default withApi;","map":{"version":3,"sources":["/Users/rafael/Projects/somosgad/dale/components/withApi/index.js"],"names":["React","useContext","UserContext","api","withApi","WrappedComponent","WithApi","props","signOut","clientApi","getInitialProps","ctx","serverApi","componentProps","displayName","getDisplayName","name"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,GAAP,MAAgB,oBAAhB;;AAEA,MAAMC,OAAO,GAAGC,gBAAgB,IAAI;AAElC,QAAMC,OAAO,GAAGC,KAAK,IAAI;AACvB,UAAM;AAAEC,MAAAA;AAAF,QAAcP,UAAU,CAACC,WAAD,CAA9B;AACA,UAAMO,SAAS,GAAGN,GAAG,CAAC,IAAD,EAAOK,OAAP,CAArB;AACA,WAAO,MAAC,gBAAD;AAAkB,MAAA,GAAG,EAAEC;AAAvB,OAAsCF,KAAtC,EAAP;AACD,GAJD;;AAMA,MAAIF,gBAAgB,CAACK,eAArB,EAAsC;AACpCJ,IAAAA,OAAO,CAACI,eAAR,GAA0B,MAAMC,GAAN,IAAa;AACrC,YAAMC,SAAS,GAAGT,GAAG,CAACQ,GAAD,CAArB;AACAA,MAAAA,GAAG,CAACR,GAAJ,GAAUS,SAAV;AACA,YAAMC,cAAc,GAAG,MAAMR,gBAAgB,CAACK,eAAjB,CAAiCC,GAAjC,CAA7B;AACA,+BAAYE,cAAZ;AACD,KALD;AAMD;;AAEDP,EAAAA,OAAO,CAACQ,WAAR,GAAuB,WAAUC,cAAc,CAACV,gBAAD,CAAmB,GAAlE;AAEA,SAAOC,OAAP;AACD,CApBD;;AAsBA,SAASS,cAAT,CAAwBV,gBAAxB,EAA0C;AACxC,SAAOA,gBAAgB,CAACS,WAAjB,IAAgCT,gBAAgB,CAACW,IAAjD,IAAyD,WAAhE;AACD;;AAED,eAAeZ,OAAf","sourcesContent":["import React, { useContext } from 'react'\nimport UserContext from '../../contexts/UserContext'\nimport api from '../../services/api'\n\nconst withApi = WrappedComponent => {\n\n  const WithApi = props => {\n    const { signOut } = useContext(UserContext)\n    const clientApi = api(null, signOut)\n    return <WrappedComponent api={clientApi} {...props} />\n  }\n\n  if (WrappedComponent.getInitialProps) {\n    WithApi.getInitialProps = async ctx => {\n      const serverApi = api(ctx)\n      ctx.api = serverApi\n      const componentProps = await WrappedComponent.getInitialProps(ctx)\n      return { ...componentProps }\n    }\n  }\n\n  WithApi.displayName = `WithApi(${getDisplayName(WrappedComponent)})`;\n\n  return WithApi\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport default withApi\n"]},"metadata":{},"sourceType":"module"}