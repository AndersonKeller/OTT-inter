{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// react\nimport { useEffect, useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup'; // components\n\nimport { FkSelect, FkInput } from '~/components/Formik/fields';\nimport FormGroup from '~/components/layout/AuthModal/FormGroup';\nimport Button from '~/components/button';\nimport { CONFIG } from '~/config';\nimport api from '~/services/api';\nimport { StyleFormData } from '~/components/layout/FormData/index';\n\nconst UserForm = ({\n  handleSubmit,\n  initialValues,\n  button\n}) => {\n  const {\n    0: genders,\n    1: setGenders\n  } = useState([]);\n  const {\n    0: countries,\n    1: setCountries\n  } = useState([]);\n  /* get genders */\n\n  useEffect(_ => {\n    (async _ => {\n      const {\n        data\n      } = await api().get('genders');\n      setGenders(data);\n    })();\n  }, []);\n  /* get countries */\n\n  useEffect(_ => {\n    (async _ => {\n      const {\n        data\n      } = await api().get('countries');\n      setCountries(data);\n    })();\n  }, []);\n  return __jsx(Formik, {\n    initialValues: initialValues,\n    validationSchema: yupSchema(countries, genders),\n    onSubmit: handleSubmit,\n    component: props => __jsx(DataForm, _objectSpread({\n      countries,\n      genders,\n      button\n    }, props))\n  });\n};\n\nconst DataForm = ({\n  isSubmitting,\n  countries,\n  genders,\n  button\n}) => {\n  const cityLabel = CONFIG.lang === 'es-CL' ? 'Provincia' : 'Ciudad';\n  return __jsx(Form, null, __jsx(StyleFormData, null, __jsx(\"h1\", {\n    className: \"h2\"\n  }, \"Datos Personales\"), __jsx(\"hr\", null), __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-6\"\n  }, __jsx(\"div\", {\n    className: \"data\"\n  }, __jsx(\"h4\", null, \"Tus datos\"), __jsx(FormGroup, null, __jsx(FkInput, {\n    name: \"name\",\n    label: \"Nombre Completo\"\n  })), __jsx(FormGroup, null, __jsx(FkSelect, {\n    name: \"gender\",\n    label: \"G\\xE9nero\",\n    list: genders\n  })), __jsx(FormGroup, null, __jsx(FkInput, {\n    name: \"document\",\n    label: \"Documento\"\n  })))), __jsx(\"div\", {\n    className: \"col-md-6\"\n  }, __jsx(\"div\", {\n    className: \"localization\"\n  }, __jsx(\"h3\", {\n    className: \"h3\"\n  }, \"Ubicaci\\xF3n\"), __jsx(FormGroup, null, __jsx(FkSelect, {\n    name: \"country\",\n    label: \"Pa\\xEDs\",\n    list: countries\n  })), __jsx(FormGroup, null, __jsx(FkInput, {\n    name: \"city\",\n    label: cityLabel\n  })), __jsx(FormGroup, null, __jsx(FkInput, {\n    name: \"address\",\n    label: \"Direcci\\xF3n\"\n  }))))), button && __jsx(\"div\", {\n    className: \"row align-items-center\"\n  }, __jsx(\"div\", {\n    className: \"aling-button\"\n  }, __jsx(Button, {\n    type: \"submit\",\n    disabled: isSubmitting,\n    loading: isSubmitting\n  }, \"Guardar cambios\")))));\n}; // create Yup validation Schema\n\n\nconst yupSchema = (countries, genders) => {\n  const nullable3CharMinString = Yup.string().trim().nullable().required('Obligatorio').min(3, 'Debe tener 3 caracteres o más.');\n  return Yup.object({\n    name: nullable3CharMinString.max(25, 'Debe tener 25 caracteres o menos'),\n    document: nullable3CharMinString.max(20, 'Debe tener 20 caracteres o menos'),\n    address: nullable3CharMinString.max(80, 'Debe tener 80 caracteres o menos'),\n    city: nullable3CharMinString.max(20, 'Debe tener 20 caracteres o menos'),\n    country: Yup.number().nullable().oneOf(countries.map(c => c.id), \"País inválido\").required('Obligatorio'),\n    gender: Yup.number().nullable().oneOf(genders.map(g => g.id), \"Género inválido\").required('Obligatorio')\n  });\n};\n\nexport default UserForm;","map":{"version":3,"sources":["/Users/rafael/Projects/somosgad/dale/components/form-user.js"],"names":["useEffect","useState","Formik","Form","Yup","FkSelect","FkInput","FormGroup","Button","CONFIG","api","StyleFormData","UserForm","handleSubmit","initialValues","button","genders","setGenders","countries","setCountries","_","data","get","yupSchema","props","DataForm","isSubmitting","cityLabel","lang","nullable3CharMinString","string","trim","nullable","required","min","object","name","max","document","address","city","country","number","oneOf","map","c","id","gender","g"],"mappings":"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","sourcesContent":["// react\nimport { useEffect, useState } from 'react'\nimport { Formik, Form } from 'formik'\nimport * as Yup from 'yup'\n\n// components\nimport { FkSelect, FkInput } from '~/components/Formik/fields'\nimport FormGroup from '~/components/layout/AuthModal/FormGroup'\nimport Button from '~/components/button'\nimport { CONFIG } from '~/config'\nimport api from '~/services/api'\nimport { StyleFormData } from '~/components/layout/FormData/index'\n\n\n\nconst UserForm = ({ handleSubmit, initialValues, button }) => {\n  const [genders, setGenders] = useState([])\n  const [countries, setCountries] = useState([])\n\n  /* get genders */\n  useEffect(_ => {\n    (async _ => {\n      const { data } = await api().get('genders')\n      setGenders(data)\n    })()\n  }, [])\n\n  /* get countries */\n  useEffect(_ => {\n    (async _ => {\n      const { data } = await api().get('countries')\n      setCountries(data)\n    })()\n  }, [])\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={\n        yupSchema(countries, genders)\n      }\n      onSubmit={handleSubmit}\n      component={props => <DataForm {...{ countries, genders, button, ...props }} />}\n    />\n  )\n}\n\nconst DataForm = ({ isSubmitting, countries, genders, button }) => {\n\n  const cityLabel = CONFIG.lang === 'es-CL' ? 'Provincia' : 'Ciudad'\n\n  return (\n    <Form>\n      <StyleFormData>\n        <h1 className=\"h2\">Datos Personales</h1>\n        <hr />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <div className=\"data\">\n              <h4>Tus datos</h4>\n              <FormGroup>\n                <FkInput name=\"name\" label=\"Nombre Completo\" />\n              </FormGroup>\n              <FormGroup>\n                <FkSelect name=\"gender\" label=\"Género\" list={genders} />\n              </FormGroup>\n              <FormGroup>\n                <FkInput name=\"document\" label=\"Documento\" />\n              </FormGroup>\n            </div>\n          </div>\n\n          <div className=\"col-md-6\">\n            <div className=\"localization\">\n              <h3 className=\"h3\">Ubicación</h3>\n              <FormGroup>\n                <FkSelect name=\"country\" label=\"País\" list={countries} />\n              </FormGroup>\n              <FormGroup>\n                <FkInput name=\"city\" label={cityLabel} />\n              </FormGroup>\n              <FormGroup>\n                <FkInput name=\"address\" label=\"Dirección\" />\n              </FormGroup>\n            </div>\n          </div>\n        </div>\n\n        {button && <div className=\"row align-items-center\">\n          <div className=\"aling-button\">\n            <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n              Guardar cambios\n          </Button>\n          </div>\n        </div>}\n      </StyleFormData>\n    </Form>\n\n  )\n}\n\n// create Yup validation Schema\nconst yupSchema = (countries, genders) => {\n  const nullable3CharMinString = Yup.string()\n    .trim().nullable()\n    .required('Obligatorio')\n    .min(3, 'Debe tener 3 caracteres o más.')\n\n  return Yup.object({\n    name: nullable3CharMinString\n      .max(25, 'Debe tener 25 caracteres o menos'),\n    document: nullable3CharMinString\n      .max(20, 'Debe tener 20 caracteres o menos'),\n    address: nullable3CharMinString\n      .max(80, 'Debe tener 80 caracteres o menos'),\n    city: nullable3CharMinString\n      .max(20, 'Debe tener 20 caracteres o menos'),\n    country: Yup.number().nullable()\n      .oneOf(countries.map(c => c.id), \"País inválido\")\n      .required('Obligatorio'),\n    gender: Yup.number().nullable()\n      .oneOf(genders.map(g => g.id), \"Género inválido\")\n      .required('Obligatorio'),\n  })\n}\n\nexport default UserForm\n"]},"metadata":{},"sourceType":"module"}