{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { backendLogout, frontendLogout, getAccessToken } from './auth';\nimport { API_URL } from '~/config';\nexport var baseURL = API_URL;\nvar http, apiCtx, apiSignOut;\n\nvar api = function api(ctx, signOut) {\n  if (!http) {\n    // client creation\n    http = axios.create({\n      baseURL: \"\".concat(baseURL, \"/api\")\n    }); // request interceptor (before)\n\n    http.interceptors.request.use( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config) {\n        var accessToken;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                accessToken = getAccessToken(apiCtx);\n                config.headers.Accept = 'application/json';\n\n                if (accessToken) {\n                  config.headers.Authorization = \"Bearer \".concat(accessToken);\n                }\n\n                return _context.abrupt(\"return\", config);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()); // response interceptor (after)\n\n    http.interceptors.response.use(function (response) {\n      // Any status code that lie within the range of 2xx cause this function to trigger\n      // Do something with response data\n      return response;\n    }, function (error) {\n      // if the request is unauthorized\n      var unauthorized = error.response && error.response.status === 401; // if it's a backend request\n\n      if (apiCtx && unauthorized) {\n        backendLogout(apiCtx); // if it's a front end request\n      } else if (unauthorized) {\n        frontendLogout(apiSignOut);\n      } // Any status codes that falls outside the range of 2xx cause this function to trigger\n      // Do something with response error\n\n\n      return Promise.reject(error);\n    });\n  }\n\n  apiCtx = ctx;\n  apiSignOut = signOut;\n  return http;\n};\n\nexport default api;","map":{"version":3,"sources":["/Users/rafael/Projects/somosgad/dale/services/api.js"],"names":["axios","backendLogout","frontendLogout","getAccessToken","API_URL","baseURL","http","apiCtx","apiSignOut","api","ctx","signOut","create","interceptors","request","use","config","accessToken","headers","Accept","Authorization","response","error","unauthorized","status","Promise","reject"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,cAAxC,QAA8D,QAA9D;AACA,SAASC,OAAT,QAAwB,UAAxB;AAEA,OAAO,IAAMC,OAAO,GAAGD,OAAhB;AAEP,IAAIE,IAAJ,EAAUC,MAAV,EAAkBC,UAAlB;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,GAAD,EAAMC,OAAN,EAAkB;AAE5B,MAAK,CAAEL,IAAP,EAAa;AAEX;AACAA,IAAAA,IAAI,GAAGN,KAAK,CAACY,MAAN,CAAa;AAClBP,MAAAA,OAAO,YAAKA,OAAL;AADW,KAAb,CAAP,CAHW,CAOX;;AACAC,IAAAA,IAAI,CAACO,YAAL,CAAkBC,OAAlB,CAA0BC,GAA1B;AAAA,0EAA8B,iBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBC,gBAAAA,WADsB,GACRd,cAAc,CAACI,MAAD,CADN;AAE5BS,gBAAAA,MAAM,CAACE,OAAP,CAAeC,MAAf,GAAwB,kBAAxB;;AACA,oBAAIF,WAAJ,EAAiB;AACfD,kBAAAA,MAAM,CAACE,OAAP,CAAeE,aAAf,oBAAyCH,WAAzC;AACD;;AAL2B,iDAMrBD,MANqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA9B;;AAAA;AAAA;AAAA;AAAA,SARW,CAiBX;;AACAV,IAAAA,IAAI,CAACO,YAAL,CAAkBQ,QAAlB,CAA2BN,GAA3B,CAA+B,UAAAM,QAAQ,EAAI;AAEzC;AACA;AACA,aAAOA,QAAP;AAED,KAND,EAMG,UAAUC,KAAV,EAAiB;AAElB;AACA,UAAMC,YAAY,GAAGD,KAAK,CAACD,QAAN,IAAkBC,KAAK,CAACD,QAAN,CAAeG,MAAf,KAA0B,GAAjE,CAHkB,CAKlB;;AACA,UAAIjB,MAAM,IAAIgB,YAAd,EAA4B;AAC1BtB,QAAAA,aAAa,CAACM,MAAD,CAAb,CAD0B,CAG5B;AACC,OAJD,MAIO,IAAIgB,YAAJ,EAAkB;AACvBrB,QAAAA,cAAc,CAACM,UAAD,CAAd;AACD,OAZiB,CAclB;AACA;;;AACA,aAAOiB,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,KAvBD;AAyBD;;AAEDf,EAAAA,MAAM,GAAGG,GAAT;AACAF,EAAAA,UAAU,GAAGG,OAAb;AAEA,SAAOL,IAAP;AACD,CAnDD;;AAqDA,eAAeG,GAAf","sourcesContent":["import axios from 'axios'\nimport { backendLogout, frontendLogout, getAccessToken } from './auth'\nimport { API_URL } from '~/config'\n\nexport const baseURL = API_URL\n\nlet http, apiCtx, apiSignOut\n\nconst api = (ctx, signOut) => {\n\n  if ( ! http) {\n\n    // client creation\n    http = axios.create({\n      baseURL: `${baseURL}/api`\n    })\n\n    // request interceptor (before)\n    http.interceptors.request.use(async config => {\n      const accessToken = getAccessToken(apiCtx)\n      config.headers.Accept = 'application/json'\n      if (accessToken) {\n        config.headers.Authorization = `Bearer ${accessToken}`\n      }\n      return config\n    })\n\n    // response interceptor (after)\n    http.interceptors.response.use(response => {\n\n      // Any status code that lie within the range of 2xx cause this function to trigger\n      // Do something with response data\n      return response\n\n    }, function (error) {\n\n      // if the request is unauthorized\n      const unauthorized = error.response && error.response.status === 401\n\n      // if it's a backend request\n      if (apiCtx && unauthorized) {\n        backendLogout(apiCtx)\n\n      // if it's a front end request\n      } else if (unauthorized) {\n        frontendLogout(apiSignOut)\n      }\n\n      // Any status codes that falls outside the range of 2xx cause this function to trigger\n      // Do something with response error\n      return Promise.reject(error)\n    })\n\n  }\n\n  apiCtx = ctx\n  apiSignOut = signOut\n\n  return http\n}\n\nexport default api\n"]},"metadata":{},"sourceType":"module"}