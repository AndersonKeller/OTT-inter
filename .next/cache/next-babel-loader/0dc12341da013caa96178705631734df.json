{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport FormGroup from \"~/components/layout/AuthModal/FormGroup\";\nimport Label from \"~/components/Form/Label\";\nimport Input from \"~/components/layout/AuthModal/Input\";\nimport { useEffect, useState } from \"react\";\nimport withAuth from \"~/components/withAuth\";\nimport SelectFormGroup from \"~/components/Form/SelectFormGroup\";\nimport InvalidFeedback from \"~/components/Form/InvalidFeedback\";\n\nconst Address = ({\n  api,\n  error,\n  handleInputChange,\n  setValues,\n  loading,\n  requireds,\n  values,\n  formData,\n  setFormData\n}) => {\n  // TODO: FIX hardcoded country configuration.\n  const argCountryId = 11;\n  const braCountryId = 32;\n  const chlCountryId = 48; // Isso NÂO É uma boa prática. Deve ser mudado. Porém a estrutura de estado do app impede outra implementação.\n  // let formDataHasProperties = formData.hasOwnProperty(\"country_id\")\n  //                             && formData.hasOwnProperty(\"address_1st_level\")\n  //                             && formData.hasOwnProperty(\"city\")\n  //                             && formData.hasOwnProperty(\"address_3rd_level\")\n  //                             && formData.hasOwnProperty(\"address\");\n  // const {\n  //   country_id: countryId,\n  //   address_1st_level,\n  //   city,\n  //   address_3rd_level,\n  //   address\n  // } = formData;\n  // } = formDataHasProperties ? formData : values;\n\n  const {\n    0: countries,\n    1: setCountries\n  } = useState();\n  const {\n    0: selectedCountry,\n    1: setSelectedCountry\n  } = useState();\n  useEffect(_ => {\n    (async _ => {\n      const {\n        data\n      } = await api.get(\"countries\");\n      setCountries(data);\n    })();\n  }, []);\n\n  const handleCountryChange = e => {\n    const {\n      name,\n      value\n    } = e.target; // setValues({\n    //   ...values,\n    //   [name]: value,\n    //   address_1st_level: \"\"\n    // });\n\n    setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n      [name]: value,\n      address_1st_level: \"\"\n    }));\n    onChangeCountry();\n  };\n\n  const firstLevelLabel = formData.country_id == argCountryId ? \"Provincia\" : formData.country_id == braCountryId ? \"Estado\" : formData.country_id == chlCountryId ? \"Región\" : \"State\";\n  const firstLevelPluralLabel = formData.country_id == argCountryId ? \"Provincias\" : formData.country_id == braCountryId ? \"Estados\" : formData.country_id == chlCountryId ? \"Regiones\" : \"States\";\n  const {\n    0: firstLevelList,\n    1: setFirstLevelList\n  } = useState(); // useEffect(\n  //   _ => {\n  //     (async _ => {\n  //       onChangeCountry();\n  //     })();\n  //   },\n  //   []\n  // );\n\n  let onChangeCountry = async () => {\n    const parsedCountryId = parseInt(formData.country_id);\n    const {\n      data: addresses\n    } = [argCountryId, braCountryId, chlCountryId].includes(parsedCountryId) ? await api.get(\"address-1st-levels\", {\n      params: {\n        country_id: formData.country_id\n      }\n    }) : {\n      data: null\n    };\n    setFirstLevelList(addresses);\n  };\n\n  const cityLabel = formData.country_id == braCountryId ? \"Cidade\" : formData.country_id == chlCountryId ? \"Provincia\" : \"Ciudad\";\n  const thirdLevelLabel = formData.country_id == chlCountryId ? \"Ciudad / Comuna\" : \"District\";\n  return __jsx(\"div\", {\n    className: \"address\"\n  }, __jsx(SelectFormGroup, {\n    error: error,\n    label: \"Pa\\xEDs\",\n    loading: loading,\n    list: countries,\n    listMapValue: \"id\",\n    name: \"country_id\",\n    onChange: handleCountryChange,\n    pluralLabel: \"Pa\\xEDses\",\n    requireds: requireds,\n    value: formData.country_id\n  }), [argCountryId, braCountryId, chlCountryId].map(id => id + \"\").includes(formData.country_id) && __jsx(SelectFormGroup, {\n    error: error,\n    label: firstLevelLabel,\n    loading: loading,\n    list: firstLevelList,\n    listMapValue: \"id\",\n    name: \"address_1st_level\",\n    onChange: handleInputChange,\n    pluralLabel: firstLevelPluralLabel,\n    requireds: requireds,\n    value: formData.address_1st_level\n  }), [braCountryId, chlCountryId].map(id => id + \"\").includes(formData.country_id) && __jsx(FormGroup, null, __jsx(Label, {\n    htmlFor: \"city\"\n  }, cityLabel), __jsx(Input, {\n    id: \"city\",\n    name: \"city\",\n    onChange: handleInputChange,\n    required: requireds,\n    type: \"text\",\n    value: formData.city\n  }), __jsx(InvalidFeedback, {\n    error: error,\n    loading: loading,\n    name: \"city\"\n  })), [chlCountryId].map(id => id + \"\").includes(formData.country_id) && __jsx(FormGroup, null, __jsx(Label, {\n    htmlFor: \"address_3rd_level\"\n  }, thirdLevelLabel), __jsx(Input, {\n    id: \"address_3rd_level\",\n    name: \"address_3rd_level\",\n    onChange: handleInputChange,\n    required: requireds,\n    type: \"text\",\n    value: formData.address_3rd_level\n  }), __jsx(InvalidFeedback, {\n    error: error,\n    loading: loading,\n    name: \"address_3rd_level\"\n  })), __jsx(FormGroup, null, __jsx(Label, {\n    htmlFor: \"address\"\n  }, \"Direcci\\xF3n\"), __jsx(Input, {\n    id: \"address\",\n    name: \"address\",\n    onChange: handleInputChange,\n    required: requireds,\n    type: \"text\",\n    value: formData.address\n  }), __jsx(InvalidFeedback, {\n    error: error,\n    loading: loading,\n    name: \"address\"\n  })));\n};\n\nexport default withAuth(Address, true);","map":{"version":3,"sources":["/Users/rafael/Projects/somosgad/dale/pages/register/wizard/partials/address.js"],"names":["FormGroup","Label","Input","useEffect","useState","withAuth","SelectFormGroup","InvalidFeedback","Address","api","error","handleInputChange","setValues","loading","requireds","values","formData","setFormData","argCountryId","braCountryId","chlCountryId","countries","setCountries","selectedCountry","setSelectedCountry","_","data","get","handleCountryChange","e","name","value","target","address_1st_level","onChangeCountry","firstLevelLabel","country_id","firstLevelPluralLabel","firstLevelList","setFirstLevelList","parsedCountryId","parseInt","addresses","includes","params","cityLabel","thirdLevelLabel","map","id","city","address_3rd_level","address"],"mappings":";;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,yCAAtB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,KAAP,MAAkB,qCAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,eAAP,MAA4B,mCAA5B;;AAEA,MAAMC,OAAO,GAAG,CAAC;AACfC,EAAAA,GADe;AAEfC,EAAAA,KAFe;AAGfC,EAAAA,iBAHe;AAIfC,EAAAA,SAJe;AAKfC,EAAAA,OALe;AAMfC,EAAAA,SANe;AAOfC,EAAAA,MAPe;AAQfC,EAAAA,QARe;AASfC,EAAAA;AATe,CAAD,KAUV;AACJ;AACA,QAAMC,YAAY,GAAG,EAArB;AACA,QAAMC,YAAY,GAAG,EAArB;AACA,QAAMC,YAAY,GAAG,EAArB,CAJI,CAMJ;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BlB,QAAQ,EAA1C;AACA,QAAM;AAAA,OAACmB,eAAD;AAAA,OAAkBC;AAAlB,MAAwCpB,QAAQ,EAAtD;AAEAD,EAAAA,SAAS,CAACsB,CAAC,IAAI;AACb,KAAC,MAAMA,CAAN,IAAW;AACV,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMjB,GAAG,CAACkB,GAAJ,CAAQ,WAAR,CAAvB;AACAL,MAAAA,YAAY,CAACI,IAAD,CAAZ;AACD,KAHD;AAID,GALQ,EAKN,EALM,CAAT;;AAOA,QAAME,mBAAmB,GAAGC,CAAC,IAAI;AAC/B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B,CAD+B,CAE/B;AACA;AACA;AACA;AACA;;AACAf,IAAAA,WAAW,iCACND,QADM;AAET,OAACc,IAAD,GAAQC,KAFC;AAGTE,MAAAA,iBAAiB,EAAE;AAHV,OAAX;AAMAC,IAAAA,eAAe;AAEhB,GAfD;;AAiBA,QAAMC,eAAe,GAAGnB,QAAQ,CAACoB,UAAT,IAAuBlB,YAAvB,GACpB,WADoB,GAEpBF,QAAQ,CAACoB,UAAT,IAAuBjB,YAAvB,GACE,QADF,GAEEH,QAAQ,CAACoB,UAAT,IAAuBhB,YAAvB,GACE,QADF,GAEE,OANR;AAQA,QAAMiB,qBAAqB,GAAGrB,QAAQ,CAACoB,UAAT,IAAuBlB,YAAvB,GAC1B,YAD0B,GAE1BF,QAAQ,CAACoB,UAAT,IAAuBjB,YAAvB,GACE,SADF,GAEEH,QAAQ,CAACoB,UAAT,IAAuBhB,YAAvB,GACE,UADF,GAEE,QANR;AAQA,QAAM;AAAA,OAACkB,cAAD;AAAA,OAAiBC;AAAjB,MAAsCnC,QAAQ,EAApD,CAjEI,CAmEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAI8B,eAAe,GAAG,YAAY;AAChC,UAAMM,eAAe,GAAGC,QAAQ,CAACzB,QAAQ,CAACoB,UAAV,CAAhC;AACA,UAAM;AAAEV,MAAAA,IAAI,EAAEgB;AAAR,QAAsB,CAC1BxB,YAD0B,EAE1BC,YAF0B,EAG1BC,YAH0B,EAI1BuB,QAJ0B,CAIjBH,eAJiB,IAKxB,MAAM/B,GAAG,CAACkB,GAAJ,CAAQ,oBAAR,EAA8B;AACpCiB,MAAAA,MAAM,EAAE;AACNR,QAAAA,UAAU,EAAEpB,QAAQ,CAACoB;AADf;AAD4B,KAA9B,CALkB,GAUxB;AAAEV,MAAAA,IAAI,EAAE;AAAR,KAVJ;AAWAa,IAAAA,iBAAiB,CAACG,SAAD,CAAjB;AACD,GAdD;;AAgBA,QAAMG,SAAS,GAAG7B,QAAQ,CAACoB,UAAT,IAAuBjB,YAAvB,GACd,QADc,GAEdH,QAAQ,CAACoB,UAAT,IAAuBhB,YAAvB,GACE,WADF,GAEE,QAJN;AAMA,QAAM0B,eAAe,GACrB9B,QAAQ,CAACoB,UAAT,IAAuBhB,YAAvB,GAAsC,iBAAtC,GAA0D,UAD1D;AAGA,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KAEE,MAAC,eAAD;AACE,IAAA,KAAK,EAAEV,KADT;AAEE,IAAA,KAAK,EAAC,SAFR;AAGE,IAAA,OAAO,EAAEG,OAHX;AAIE,IAAA,IAAI,EAAEQ,SAJR;AAKE,IAAA,YAAY,EAAC,IALf;AAME,IAAA,IAAI,EAAC,YANP;AAOE,IAAA,QAAQ,EAAEO,mBAPZ;AAQE,IAAA,WAAW,EAAC,WARd;AASE,IAAA,SAAS,EAAEd,SATb;AAUE,IAAA,KAAK,EAAEE,QAAQ,CAACoB;AAVlB,IAFF,EAgBG,CAAClB,YAAD,EAAeC,YAAf,EAA6BC,YAA7B,EACE2B,GADF,CACMC,EAAE,IAAIA,EAAE,GAAG,EADjB,EAEEL,QAFF,CAEW3B,QAAQ,CAACoB,UAFpB,KAGC,MAAC,eAAD;AACE,IAAA,KAAK,EAAE1B,KADT;AAEE,IAAA,KAAK,EAAEyB,eAFT;AAGE,IAAA,OAAO,EAAEtB,OAHX;AAIE,IAAA,IAAI,EAAEyB,cAJR;AAKE,IAAA,YAAY,EAAC,IALf;AAME,IAAA,IAAI,EAAC,mBANP;AAOE,IAAA,QAAQ,EAAE3B,iBAPZ;AAQE,IAAA,WAAW,EAAE0B,qBARf;AASE,IAAA,SAAS,EAAEvB,SATb;AAUE,IAAA,KAAK,EAAEE,QAAQ,CAACiB;AAVlB,IAnBJ,EAkCG,CAACd,YAAD,EAAeC,YAAf,EAA+B2B,GAA/B,CAAmCC,EAAE,IAAIA,EAAE,GAAG,EAA9C,EAAkDL,QAAlD,CAA2D3B,QAAQ,CAACoB,UAApE,KACC,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,IAAA,OAAO,EAAC;AAAf,KAAuBS,SAAvB,CADF,EAEE,MAAC,KAAD;AACE,IAAA,EAAE,EAAC,MADL;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,QAAQ,EAAElC,iBAHZ;AAIE,IAAA,QAAQ,EAAEG,SAJZ;AAKE,IAAA,IAAI,EAAC,MALP;AAME,IAAA,KAAK,EAAEE,QAAQ,CAACiC;AANlB,IAFF,EAUE,MAAC,eAAD;AAAiB,IAAA,KAAK,EAAEvC,KAAxB;AAA+B,IAAA,OAAO,EAAEG,OAAxC;AAAiD,IAAA,IAAI,EAAC;AAAtD,IAVF,CAnCJ,EAkDG,CAACO,YAAD,EAAe2B,GAAf,CAAmBC,EAAE,IAAIA,EAAE,GAAG,EAA9B,EAAkCL,QAAlC,CAA2C3B,QAAQ,CAACoB,UAApD,KACC,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,IAAA,OAAO,EAAC;AAAf,KAAoCU,eAApC,CADF,EAEE,MAAC,KAAD;AACE,IAAA,EAAE,EAAC,mBADL;AAEE,IAAA,IAAI,EAAC,mBAFP;AAGE,IAAA,QAAQ,EAAEnC,iBAHZ;AAIE,IAAA,QAAQ,EAAEG,SAJZ;AAKE,IAAA,IAAI,EAAC,MALP;AAME,IAAA,KAAK,EAAEE,QAAQ,CAACkC;AANlB,IAFF,EAUE,MAAC,eAAD;AACE,IAAA,KAAK,EAAExC,KADT;AAEE,IAAA,OAAO,EAAEG,OAFX;AAGE,IAAA,IAAI,EAAC;AAHP,IAVF,CAnDJ,EAqEE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,IAAA,OAAO,EAAC;AAAf,oBADF,EAEE,MAAC,KAAD;AACE,IAAA,EAAE,EAAC,SADL;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,QAAQ,EAAEF,iBAHZ;AAIE,IAAA,QAAQ,EAAEG,SAJZ;AAKE,IAAA,IAAI,EAAC,MALP;AAME,IAAA,KAAK,EAAEE,QAAQ,CAACmC;AANlB,IAFF,EAUE,MAAC,eAAD;AAAiB,IAAA,KAAK,EAAEzC,KAAxB;AAA+B,IAAA,OAAO,EAAEG,OAAxC;AAAiD,IAAA,IAAI,EAAC;AAAtD,IAVF,CArEF,CADF;AAoFD,CAnMD;;AAqMA,eAAeR,QAAQ,CAACG,OAAD,EAAU,IAAV,CAAvB","sourcesContent":["import FormGroup from \"~/components/layout/AuthModal/FormGroup\";\nimport Label from \"~/components/Form/Label\";\nimport Input from \"~/components/layout/AuthModal/Input\";\nimport { useEffect, useState } from \"react\";\nimport withAuth from \"~/components/withAuth\";\nimport SelectFormGroup from \"~/components/Form/SelectFormGroup\";\nimport InvalidFeedback from \"~/components/Form/InvalidFeedback\";\n\nconst Address = ({\n  api,\n  error,\n  handleInputChange,\n  setValues,\n  loading,\n  requireds,\n  values,\n  formData,\n  setFormData\n}) => {\n  // TODO: FIX hardcoded country configuration.\n  const argCountryId = 11;\n  const braCountryId = 32;\n  const chlCountryId = 48;\n\n  // Isso NÂO É uma boa prática. Deve ser mudado. Porém a estrutura de estado do app impede outra implementação.\n  // let formDataHasProperties = formData.hasOwnProperty(\"country_id\")\n  //                             && formData.hasOwnProperty(\"address_1st_level\")\n  //                             && formData.hasOwnProperty(\"city\")\n  //                             && formData.hasOwnProperty(\"address_3rd_level\")\n  //                             && formData.hasOwnProperty(\"address\");\n\n  // const {\n  //   country_id: countryId,\n  //   address_1st_level,\n  //   city,\n  //   address_3rd_level,\n  //   address\n  // } = formData;\n  // } = formDataHasProperties ? formData : values;\n\n  const [countries, setCountries] = useState();\n  const [selectedCountry, setSelectedCountry] = useState();\n\n  useEffect(_ => {\n    (async _ => {\n      const { data } = await api.get(\"countries\");\n      setCountries(data);\n    })();\n  }, []);\n\n  const handleCountryChange = e => {\n    const { name, value } = e.target;\n    // setValues({\n    //   ...values,\n    //   [name]: value,\n    //   address_1st_level: \"\"\n    // });\n    setFormData({\n      ...formData,\n      [name]: value,\n      address_1st_level: \"\"\n    });\n\n    onChangeCountry()\n\n  };\n\n  const firstLevelLabel = formData.country_id == argCountryId\n    ? \"Provincia\"\n    : formData.country_id == braCountryId\n      ? \"Estado\"\n      : formData.country_id == chlCountryId\n        ? \"Región\"\n        : \"State\";\n\n  const firstLevelPluralLabel = formData.country_id == argCountryId\n    ? \"Provincias\"\n    : formData.country_id == braCountryId\n      ? \"Estados\"\n      : formData.country_id == chlCountryId\n        ? \"Regiones\"\n        : \"States\";\n\n  const [firstLevelList, setFirstLevelList] = useState();\n\n  // useEffect(\n  //   _ => {\n  //     (async _ => {\n  //       onChangeCountry();\n  //     })();\n  //   },\n  //   []\n  // );\n\n  let onChangeCountry = async () => {\n    const parsedCountryId = parseInt(formData.country_id);\n    const { data: addresses } = [\n      argCountryId,\n      braCountryId,\n      chlCountryId\n    ].includes(parsedCountryId)\n      ? await api.get(\"address-1st-levels\", {\n        params: {\n          country_id: formData.country_id\n        }\n      })\n      : { data: null };\n    setFirstLevelList(addresses);\n  }\n\n  const cityLabel = formData.country_id == braCountryId\n    ? \"Cidade\"\n    : formData.country_id == chlCountryId\n      ? \"Provincia\"\n      : \"Ciudad\";\n\n  const thirdLevelLabel =\n  formData.country_id == chlCountryId ? \"Ciudad / Comuna\" : \"District\";\n\n  return (\n    <div className=\"address\">\n      {/* country */}\n      <SelectFormGroup\n        error={error}\n        label=\"País\"\n        loading={loading}\n        list={countries}\n        listMapValue=\"id\"\n        name=\"country_id\"\n        onChange={handleCountryChange}\n        pluralLabel=\"Países\"\n        requireds={requireds}\n        value={formData.country_id}\n      />\n\n      {/* 1st level */}\n      {[argCountryId, braCountryId, chlCountryId]\n        .map(id => id + \"\")\n        .includes(formData.country_id) && (\n        <SelectFormGroup\n          error={error}\n          label={firstLevelLabel}\n          loading={loading}\n          list={firstLevelList}\n          listMapValue=\"id\"\n          name=\"address_1st_level\"\n          onChange={handleInputChange}\n          pluralLabel={firstLevelPluralLabel}\n          requireds={requireds}\n          value={formData.address_1st_level}\n        />\n      )}\n\n      {/* city */}\n      {[braCountryId, chlCountryId].  map(id => id + \"\").includes(formData.country_id) && (\n        <FormGroup>\n          <Label htmlFor=\"city\">{cityLabel}</Label>\n          <Input\n            id=\"city\"\n            name=\"city\"\n            onChange={handleInputChange}\n            required={requireds}\n            type=\"text\"\n            value={formData.city}\n          />\n          <InvalidFeedback error={error} loading={loading} name=\"city\" />\n        </FormGroup>\n      )}\n\n      {/* 3rd level */}\n      {[chlCountryId].map(id => id + \"\").includes(formData.country_id) && (\n        <FormGroup>\n          <Label htmlFor=\"address_3rd_level\">{thirdLevelLabel}</Label>\n          <Input\n            id=\"address_3rd_level\"\n            name=\"address_3rd_level\"\n            onChange={handleInputChange}\n            required={requireds}\n            type=\"text\"\n            value={formData.address_3rd_level}\n          />\n          <InvalidFeedback\n            error={error}\n            loading={loading}\n            name=\"address_3rd_level\"\n          />\n        </FormGroup>\n      )}\n\n      <FormGroup>\n        <Label htmlFor=\"address\">Dirección</Label>\n        <Input\n          id=\"address\"\n          name=\"address\"\n          onChange={handleInputChange}\n          required={requireds}\n          type=\"text\"\n          value={formData.address}\n        />\n        <InvalidFeedback error={error} loading={loading} name=\"address\" />\n      </FormGroup>\n    </div>\n  );\n};\n\nexport default withAuth(Address, true);\n"]},"metadata":{},"sourceType":"module"}