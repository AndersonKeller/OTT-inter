{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// react\nimport { useEffect, useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup'; // components\n\nimport { FkSelect, FkInput } from '~/components/Formik/fields';\nimport FormGroup from '~/components/layout/AuthModal/FormGroup';\nimport Button from '~/components/button';\nimport { CONFIG } from '~/config';\nimport api from '~/services/api';\n\nvar UserForm = function UserForm(_ref) {\n  _s();\n\n  var handleSubmit = _ref.handleSubmit,\n      initialValues = _ref.initialValues,\n      button = _ref.button;\n\n  var _useState = useState([]),\n      genders = _useState[0],\n      setGenders = _useState[1];\n\n  var _useState2 = useState([]),\n      countries = _useState2[0],\n      setCountries = _useState2[1];\n  /* get genders */\n\n\n  useEffect(function (_) {\n    (function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_) {\n        var _yield$api$get, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return api().get('genders');\n\n              case 2:\n                _yield$api$get = _context.sent;\n                data = _yield$api$get.data;\n                setGenders(data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    })()();\n  }, []);\n  /* get countries */\n\n  useEffect(function (_) {\n    (function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_) {\n        var _yield$api$get2, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return api().get('countries');\n\n              case 2:\n                _yield$api$get2 = _context2.sent;\n                data = _yield$api$get2.data;\n                setCountries(data);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    })()();\n  }, []);\n  return __jsx(Formik, {\n    initialValues: initialValues,\n    validationSchema: yupSchema(countries, genders),\n    onSubmit: handleSubmit,\n    component: function component(props) {\n      return __jsx(DataForm, _objectSpread({\n        countries: countries,\n        genders: genders,\n        button: button\n      }, props));\n    }\n  });\n};\n\n_s(UserForm, \"PL12gb7EBXBr5IwqONPvRs+GfNQ=\");\n\n_c = UserForm;\n\nvar DataForm = function DataForm(_ref4) {\n  var isSubmitting = _ref4.isSubmitting,\n      countries = _ref4.countries,\n      genders = _ref4.genders,\n      button = _ref4.button;\n  var cityLabel = CONFIG.lang === 'es-CL' ? 'Provincia' : 'Ciudad';\n  return __jsx(Form, null, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-6\"\n  }, __jsx(\"div\", {\n    className: \"data\"\n  }, __jsx(\"h4\", null, \"Tus datos\"), __jsx(FormGroup, null, __jsx(FkInput, {\n    name: \"name\",\n    label: \"Nombre Completo\"\n  })), __jsx(FormGroup, null, __jsx(FkSelect, {\n    name: \"gender\",\n    label: \"G\\xE9nero\",\n    list: genders\n  })), __jsx(FormGroup, null, __jsx(FkInput, {\n    name: \"document\",\n    label: \"Documento\"\n  })))), __jsx(\"div\", {\n    className: \"col-md-6\"\n  }, __jsx(\"div\", {\n    className: \"localization\"\n  }, __jsx(\"h3\", {\n    className: \"h3\"\n  }, \"Ubicaci\\xF3n\"), __jsx(FormGroup, null, __jsx(FkSelect, {\n    name: \"country\",\n    label: \"Pa\\xEDs\",\n    list: countries\n  })), __jsx(FormGroup, null, __jsx(FkInput, {\n    name: \"city\",\n    label: cityLabel\n  })), __jsx(FormGroup, null, __jsx(FkInput, {\n    name: \"address\",\n    label: \"Direcci\\xF3n\"\n  }))))), button && __jsx(\"div\", {\n    className: \"row align-items-center\"\n  }, __jsx(\"div\", {\n    className: \"col-md-12 text-right\"\n  }, __jsx(Button, {\n    type: \"submit\",\n    disabled: isSubmitting,\n    loading: isSubmitting\n  }, \"Cambiar datos\"))));\n}; // create Yup validation Schema\n\n\n_c2 = DataForm;\n\nvar yupSchema = function yupSchema(countries, genders) {\n  var nullable3CharMinString = Yup.string().trim().nullable().required('Obligatorio').min(3, 'Debe tener 3 caracteres o más.');\n  return Yup.object({\n    name: nullable3CharMinString.max(25, 'Debe tener 25 caracteres o menos'),\n    document: nullable3CharMinString.max(20, 'Debe tener 20 caracteres o menos'),\n    address: nullable3CharMinString.max(80, 'Debe tener 80 caracteres o menos'),\n    city: nullable3CharMinString.max(20, 'Debe tener 20 caracteres o menos'),\n    country: Yup.number().nullable().oneOf(countries.map(function (c) {\n      return c.id;\n    }), \"País inválido\").required('Obligatorio'),\n    gender: Yup.number().nullable().oneOf(genders.map(function (g) {\n      return g.id;\n    }), \"Género inválido\").required('Obligatorio')\n  });\n};\n\nexport default UserForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UserForm\");\n$RefreshReg$(_c2, \"DataForm\");","map":{"version":3,"sources":["/Users/rafael/Projects/somosgad/dale/components/form-user.js"],"names":["useEffect","useState","Formik","Form","Yup","FkSelect","FkInput","FormGroup","Button","CONFIG","api","UserForm","handleSubmit","initialValues","button","genders","setGenders","countries","setCountries","_","get","data","yupSchema","props","DataForm","isSubmitting","cityLabel","lang","nullable3CharMinString","string","trim","nullable","required","min","object","name","max","document","address","city","country","number","oneOf","map","c","id","gender","g"],"mappings":"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","sourcesContent":["// react\nimport { useEffect, useState }  from 'react'\nimport { Formik, Form }         from 'formik'\nimport * as Yup                 from 'yup'\n\n// components\nimport { FkSelect, FkInput }  from '~/components/Formik/fields'\nimport FormGroup              from '~/components/layout/AuthModal/FormGroup'\nimport Button                 from '~/components/button'\nimport { CONFIG }             from '~/config'\nimport api                    from '~/services/api'\n\n\n\nconst UserForm = ({handleSubmit, initialValues, button }) => {\n  const [ genders, setGenders ] = useState([])\n  const [ countries, setCountries ] = useState([])\n\n  /* get genders */\n  useEffect(_ => {\n    (async _ => {\n      const {data} = await api().get('genders')\n      setGenders(data)\n    })()\n  }, [])\n\n  /* get countries */\n  useEffect(_ => {\n    (async _ => {\n      const {data} = await api().get('countries')\n      setCountries(data)\n    })()\n  }, [])\n\n  return(\n    <Formik\n      initialValues={initialValues}\n      validationSchema={\n        yupSchema(countries, genders)\n      }\n      onSubmit={handleSubmit}\n      component={props => <DataForm {...{countries, genders, button, ...props}} />}\n    />\n  )\n}\n\nconst DataForm = ({isSubmitting, countries, genders, button})  => {\n\n  const cityLabel = CONFIG.lang === 'es-CL' ? 'Provincia' : 'Ciudad'\n\n  return (\n    <Form>\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <div className=\"data\">\n            <h4>Tus datos</h4>\n            <FormGroup>\n              <FkInput name=\"name\" label=\"Nombre Completo\" />\n            </FormGroup>\n            <FormGroup>\n              <FkSelect name=\"gender\" label=\"Género\" list={genders} />\n            </FormGroup>\n            <FormGroup>\n              <FkInput name=\"document\" label=\"Documento\" />\n            </FormGroup>\n          </div>\n        </div>\n\n        <div className=\"col-md-6\">\n          <div className=\"localization\">\n            <h3 className=\"h3\">Ubicación</h3>\n            <FormGroup>\n              <FkSelect name=\"country\" label=\"País\" list={countries} />\n            </FormGroup>\n            <FormGroup>\n              <FkInput name=\"city\" label={cityLabel} />\n            </FormGroup>\n            <FormGroup>\n              <FkInput name=\"address\" label=\"Dirección\" />\n            </FormGroup>\n          </div>\n        </div>\n      </div>\n\n      {button && <div className=\"row align-items-center\">\n        <div className=\"col-md-12 text-right\">\n          <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n            Cambiar datos\n          </Button>\n        </div>\n      </div> }\n    </Form>\n  )\n}\n\n// create Yup validation Schema\nconst yupSchema = (countries, genders) => {\n  const nullable3CharMinString = Yup.string()\n    .trim().nullable()\n    .required('Obligatorio')\n    .min(3, 'Debe tener 3 caracteres o más.')\n\n  return Yup.object({\n    name: nullable3CharMinString\n      .max(25, 'Debe tener 25 caracteres o menos'),\n    document: nullable3CharMinString\n      .max(20, 'Debe tener 20 caracteres o menos'),\n    address: nullable3CharMinString\n      .max(80, 'Debe tener 80 caracteres o menos'),\n    city: nullable3CharMinString\n      .max(20, 'Debe tener 20 caracteres o menos'),\n    country: Yup.number().nullable()\n      .oneOf(countries.map(c => c.id), \"País inválido\")\n      .required('Obligatorio'),\n    gender: Yup.number().nullable()\n      .oneOf(genders.map(g => g.id), \"Género inválido\")\n      .required('Obligatorio'),\n  })\n}\n\nexport default UserForm\n"]},"metadata":{},"sourceType":"module"}